{
	"info": {
		"_postman_id": "ac2143fd-312b-474a-8c92-5fd4264b9285",
		"name": "TEST - BHR 2.0 - Talents",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Load the HTML response to $",
									"const $ = cheerio.load(pm.response.text());",
									"const responseJson = pm.response.json();",
									"// Use the jQuery selector API to get different elements on the page",
									"//  console.log($(\"title\").text()); // get title",
									"//  console.log($(\"a#careers-were-hiring\").attr('href')); // get URL to careers page",
									"",
									"  var jsonData = pm.response.json();",
									"",
									"var token = responseJson.data.token;",
									"",
									"pm.environment.set(\"talent_access_token\", token)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Access Token Generated\", function () {",
									"    pm.expect(jsonData.data.token).to.not.be.null;",
									"    pm.expect(pm.response.text()).to.include(\"token\");",
									"});",
									"",
									"pm.environment.set('talentid',jsonData.data.id)",
									"pm.environment.set('talentname',jsonData.data.name)",
									"pm.environment.set('talentavatar',jsonData.data.avatar)",
									"pm.environment.set('talentinitials',jsonData.data.initials)",
									"pm.environment.set('talenttitle',jsonData.data.title)",
									"pm.environment.set('talentcompleteness',jsonData.data.completeness)",
									"",
									"",
									"pm.test(\"Login\", function () {",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"talentid\"));",
									"    pm.expect(jsonData.data.name).to.eql(pm.environment.get(\"talentname\"));",
									"    pm.expect(jsonData.data.avatar).to.eql(pm.environment.get(\"talentavatar\"));",
									"    pm.expect(jsonData.data.initials).to.eql(pm.environment.get(\"talentinitials\"));",
									"    pm.expect(jsonData.data.completeness).to.eql(pm.environment.get(\"talentcompleteness\"));",
									"});"
								],
								"id": "d74e3703-eb0b-45ec-b9d4-9ba4fd5e714a"
							}
						}
					],
					"_postman_id": "15c2dbfa-9c7f-4e81-afa6-ddbcf7336d6a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\":victoria80@example.org\",\n    \"password\":\":victoria80@example.org\"\n}",
							"options": {}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/auth"
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"id": "bd074c8e-09fc-4ddb-b37c-43979384ce59"
							}
						}
					],
					"_postman_id": "378d13ee-3711-4414-bf2c-40ef56135cec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"victoria80@example.org\"\n}",
							"options": {}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/auth"
					},
					"response": []
				}
			],
			"_postman_id": "8630c2a6-815e-49f3-b789-01c799e52fe2"
		},
		{
			"name": "Resumes",
			"item": [
				{
					"name": "Upload Resume",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"id": "6f98e90f-8451-48da-be68-5bdee2056907"
							}
						}
					],
					"_postman_id": "c78de03d-1f86-495d-8f31-65bf16422d06",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/User/Documents/QA_ST/Adinebo Michael-backend.pdf"
								}
							],
							"options": {}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/resumes"
					},
					"response": []
				},
				{
					"name": "List Resumes",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									" var jsonData = pm.response.json();",
									"",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set('resumeid',jsonData.data[0].id)",
									"pm.environment.set('resumeenabled',jsonData.data[0].enabled)",
									"pm.environment.set('resumename',jsonData.data[0].name)",
									"pm.environment.set('resumefilename',jsonData.data[0].file_name)",
									"",
									"pm.test(\"List Resume\", function () {",
									"    pm.expect(jsonData.data[0].id).to.eql(pm.environment.get(\"resumeid\"));",
									"    pm.expect(jsonData.data[0].enabled).to.eql(pm.environment.get(\"resumeenabled\"));",
									"    pm.expect(jsonData.data[0].name).to.eql(pm.environment.get(\"resumename\"));",
									"    pm.expect(jsonData.data[0].file_name).to.eql(pm.environment.get(\"resumefilename\"));",
									"});",
									"",
									" var value = pm.environment.get(\"resumeid\");"
								],
								"id": "f02ba6aa-4587-4b1c-bb5b-be34003167a2"
							}
						}
					],
					"_postman_id": "c2aab450-f0e9-458c-9867-658f9af1da45",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{borderless_service_url}}/api/v1/talents/resumes"
					},
					"response": []
				},
				{
					"name": "Fetch Resume",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"id": "a9a57be4-f3e0-424d-a2e4-c3ba578a3386"
							}
						}
					],
					"_postman_id": "ff8c5c30-72fc-4739-aa6f-94abbc52a701",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/resumes/:resume_id?file=true",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"resumes",
								":resume_id"
							],
							"query": [
								{
									"key": "file",
									"value": "true",
									"description": "Return the resume file instead?"
								}
							],
							"variable": [
								{
									"id": "e360eb4b-a1cf-4db8-b96b-e1d480e3cccd",
									"key": "resume_id",
									"value": "{{resumeid}}",
									"description": "Primary key of resume of interest",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Resume",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									" var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('Uresumeid',jsonData.data.id)\r",
									"pm.environment.set('Uresumetalentid',jsonData.data.talent_id)\r",
									"pm.environment.set('Uresumeenabled',jsonData.data.enabled)\r",
									"pm.environment.set('Uresumename',jsonData.data.name)\r",
									"pm.environment.set('Uresumefilename',jsonData.data.file_name)\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"User id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"Uresumeid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"talent id\", function () {\r",
									"    pm.expect(jsonData.data.talent_id).to.eql(pm.environment.get(\"Uresumetalentid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Enabled\", function () {\r",
									"    pm.expect(jsonData.data.enabled).to.eql(pm.environment.get(\"Uresumeenabled\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Name\", function () {\r",
									"    pm.expect(jsonData.data.name).to.eql(pm.environment.get(\"Uresumename\"));\r",
									"});\r",
									"\r",
									"pm.test(\"File name\", function () {\r",
									"    pm.expect(jsonData.data.file_name).to.eql(pm.environment.get(\"Uresumefilename\"));\r",
									"});"
								],
								"id": "06dbdecc-6920-43bf-ac59-c0f5322a0c7e"
							}
						}
					],
					"_postman_id": "ccb6a080-b4b7-48f9-af38-0051aa576878",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"Backend Developer CV\",\n    \"enabled\" : false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/resumes/:resume_id",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"resumes",
								":resume_id"
							],
							"variable": [
								{
									"id": "0fbedeb1-e31d-44c6-a586-5e03619b27c1",
									"key": "resume_id",
									"value": "{{resumeid}}",
									"description": "Primary key of resume of interest",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Resume",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"id": "36b6317b-9b92-4aff-9426-1e1773216481"
							}
						}
					],
					"_postman_id": "a523ed6e-069c-4cab-b800-3e18ec96bf05",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/resumes/:resume_id?key=INTEGER",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"resumes",
								":resume_id"
							],
							"query": [
								{
									"key": "key",
									"value": "INTEGER",
									"description": "0-based index of entrty to delete from cached resumes"
								}
							],
							"variable": [
								{
									"id": "9890ff0f-4840-47d0-a095-ce5b80a5b14c",
									"key": "resume_id",
									"value": "{{resumeid}}",
									"description": "Primary key of resume of interest",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "7c95bf50-b86f-45ce-af27-6c0f691fbb6d"
		},
		{
			"name": "Cover Letters",
			"item": [
				{
					"name": "Index",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"id": "b8a9de65-9832-4cb8-a811-cc267a9cd033"
							}
						}
					],
					"_postman_id": "d92115fd-33e0-4367-b462-9675e8751e6d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{borderless_service_url}}/api/v1/talents/cover-letters"
					},
					"response": []
				},
				{
					"name": "Show",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"id": "ec263a46-21fb-4a20-93d6-e121cc10a392"
							}
						}
					],
					"_postman_id": "b4ccd171-e0fb-4e77-85b4-0495b94ba121",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/cover-letters/:id",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"cover-letters",
								":id"
							],
							"variable": [
								{
									"id": "57ba9682-3a06-4118-b7f0-a6e463a855a4",
									"key": "id",
									"value": "6386",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"id": "9bcda4a1-2b2c-47b1-85f6-598af9a64562"
							}
						}
					],
					"_postman_id": "752823bc-85b1-41b2-b675-59eb364dbfbd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{borderless_service_url}}/api/v1/talents/cover-letters/create"
					},
					"response": []
				},
				{
					"name": "Store",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"id": "fdb3c064-3ca1-4788-8e80-62e5a684672c"
							}
						}
					],
					"_postman_id": "bc8129da-767b-405f-82be-727261842ab0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/cover-letters"
					},
					"response": []
				},
				{
					"name": "Edit",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"id": "376b7291-afcf-4dea-98c0-233336273ce9"
							}
						}
					],
					"_postman_id": "27a05865-d6c5-47c2-bc60-9ca7dea78796",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/cover-letters/:id/edit",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"cover-letters",
								":id",
								"edit"
							],
							"variable": [
								{
									"id": "63f12afc-3cc4-4c8c-a733-a5ec3b928ef6",
									"key": "id",
									"value": "6034",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Record not found!\");\r",
									"});"
								],
								"id": "2b5d02c9-16e8-419d-b234-27d42daab1db"
							}
						}
					],
					"_postman_id": "d167c3b6-f3d4-4202-8da9-4c1711994822",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/cover-letters/:id/update",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"cover-letters",
								":id",
								"update"
							],
							"variable": [
								{
									"id": "0adfee07-95cd-4743-ba0c-6cdc1783ee5c",
									"key": "id",
									"value": "6034",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"id": "ca06692f-4dcf-49af-b4bb-751e491ecb90"
							}
						}
					],
					"_postman_id": "7a7fa62b-909b-47eb-ae0c-bf819b0286ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/cover-letters/:id",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"cover-letters",
								":id"
							],
							"variable": [
								{
									"id": "98124deb-753b-4dc6-8fd5-6308603f80e6",
									"key": "id",
									"value": "6411",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "6c64186f-01c0-4df2-ae4e-c4b51b831700"
		},
		{
			"name": "Password Reset",
			"item": [
				{
					"name": "Request Password Reset",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"id": "36212b8d-f4f0-435b-9659-060e59afb610"
							}
						}
					],
					"_postman_id": "3e9655ad-4769-4b62-8275-2a2179976029",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"test1234@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/reset-password-request"
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"id": "c5ae2175-e1d1-4744-8871-c309bdf21c62"
							}
						}
					],
					"_postman_id": "cd84c9be-dc20-4f4c-a292-fc53b6aee476",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\":\"{{talent_access_token}}\",\n    \"email\":\"test1234@example.com\",\n    \"password\":\"Password123@@\",\n    \"password_confirmation\":\"Password123@@\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/reset-password"
					},
					"response": []
				}
			],
			"_postman_id": "368149ba-7b75-4eb2-9a59-91a0b4aa6f6b"
		},
		{
			"name": "Educations",
			"item": [
				{
					"name": "Update Education",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									" var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('educationid',jsonData.data.id)\r",
									"pm.environment.set('educationenabled',jsonData.data.enabled)\r",
									"pm.environment.set('educationtitle',jsonData.data.title)\r",
									"pm.environment.set('educationinstitution',jsonData.data.institution)\r",
									"pm.environment.set('educationdegreeid',jsonData.data.degree_id)\r",
									"pm.environment.set('educationdegree',jsonData.data.degree)\r",
									"pm.environment.set('educationstartdate',jsonData.data.start_date)\r",
									"pm.environment.set('educationenddate',jsonData.data.end_date)\r",
									"\r",
									"pm.test(\"The get the education id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"educationid\"));\r",
									"    pm.expect(jsonData.data.enabled).to.eql(pm.environment.get(\"educationenabled\"));\r",
									"    pm.expect(jsonData.data.title).to.eql(pm.environment.get(\"educationtitle\"));\r",
									"    pm.expect(jsonData.data.institution).to.eql(pm.environment.get(\"educationinstitution\"));\r",
									"    pm.expect(jsonData.data.degree_id).to.eql(pm.environment.get(\"educationdegreeid\"));\r",
									"    pm.expect(jsonData.data.degree).to.eql(pm.environment.get(\"educationdegree\"));\r",
									"     pm.expect(jsonData.data.start_date).to.eql(pm.environment.get(\"educationstartdate\"));\r",
									"     pm.expect(jsonData.data.end_date).to.eql(pm.environment.get(\"educationenddate\"));\r",
									"\r",
									"\r",
									"});"
								],
								"id": "661ab490-db0b-42e1-968f-679fe0584a3b"
							}
						}
					],
					"_postman_id": "2e58923f-c084-4fa9-9b91-00996e0fc866",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Software Engineering\",\n    \"institution\": \"Azad Univeristy\",\n    \"degree_id\" : 2,\n    \"start_date\": \"2007-02-01\",\n    \"end_date\": \"2010-02-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/educations/:education_id",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"educations",
								":education_id"
							],
							"variable": [
								{
									"id": "af508381-5a90-4915-bb3d-32b8bbd36ec2",
									"key": "education_id",
									"value": "{{educationid0}}",
									"description": "Primary key of education of interest",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Education - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.environment.set('degreeid',jsonData.data.degree_id)",
									"pm.environment.set('educationtitle',jsonData.data.title)",
									"pm.environment.set('educationinstitution',jsonData.data.institution)",
									"pm.environment.set('educationstartdate',jsonData.data.start_date)",
									"pm.environment.set('educationtalentid',jsonData.data.talent_id)",
									"pm.environment.set('educationdataid',jsonData.data.id)",
									"pm.environment.set('talentid',jsonData.data.talent.id)",
									"pm.environment.set('talentemail',jsonData.data.talent.email)",
									"pm.environment.set('talentavatar',jsonData.data.talent.avatar)",
									"pm.environment.set('jobstatusid',jsonData.data.talent.job_status_id)",
									"pm.environment.set('remotetypeid',jsonData.data.talent.remote_type_id)",
									"pm.environment.set('getnotifications',jsonData.data.talent.get_notifications)",
									"pm.environment.set('getmatches',jsonData.data.talent.get_matches)",
									"pm.environment.set('talentactive',jsonData.data.talent.active)",
									"pm.environment.set('salarycurrencyid',jsonData.data.talent.salary_currency_id)",
									"",
									"pm.environment.set('resumesid0',jsonData.data.talent.resumes[0].id)",
									"pm.environment.set('resumestalentid0',jsonData.data.talent.resumes[0].talent_id)",
									"pm.environment.set('resumesname0',jsonData.data.talent.resumes[0].name)",
									"pm.environment.set('resumesfilename0',jsonData.data.talent.resumes[0].file_name)",
									"",
									"pm.environment.set('skillsid0',jsonData.data.talent.skills[0].id)",
									"pm.environment.set('skillstalentid0',jsonData.data.talent.skills[0].talent_id)",
									"pm.environment.set('skillsskillid0',jsonData.data.talent.skills[0].skill_id)",
									"pm.environment.set('skillsprimaryid0',jsonData.data.talent.skills[0].is_primary)",
									"pm.environment.set('skillssecondaryid0',jsonData.data.talent.skills[0].is_secondary)",
									"pm.environment.set('skilllevelid0',jsonData.data.talent.skills[0].skill_level_id)",
									"",
									"pm.environment.set('experiencesid0',jsonData.data.talent.experiences[0].id)",
									"pm.environment.set('experiencestalentid0',jsonData.data.talent.experiences[0].talent_id)",
									"pm.environment.set('experiencescompanyname0',jsonData.data.talent.experiences[0].company_name)",
									"pm.environment.set('experiencesstateid0',jsonData.data.talent.experiences[0].state_id)",
									"pm.environment.set('experiencescountryid0',jsonData.data.talent.experiences[0].country_id)",
									"pm.environment.set('experiencesseniorityid0',jsonData.data.talent.experiences[0].seniority_id)",
									"pm.environment.set('experiencestitleid0',jsonData.data.talent.experiences[0].title_id)",
									"pm.environment.set('experiencesdescription0',jsonData.data.talent.experiences[0].description)",
									"pm.environment.set('experiencesindustryid0',jsonData.data.talent.experiences[0].industry_id)",
									"",
									"",
									"pm.environment.set('educationid0',jsonData.data.talent.educations[0].id)",
									"pm.environment.set('educationtalentid0',jsonData.data.talent.educations[0].talent_id)",
									"pm.environment.set('educationdegreeid0',jsonData.data.talent.educations[0].degree_id)",
									"pm.environment.set('educationid1',jsonData.data.talent.educations[1,2,3,4,5].id)",
									"pm.environment.set('educationtalentid1',jsonData.data.talent.educations[1,2,3,4,5].talent_id)",
									"pm.environment.set('educationdegreeid1',jsonData.data.talent.educations[1,2,3,4,5].degree_id)",
									"",
									"",
									"pm.test(\"The get the Degree id\", function () {",
									"    pm.expect(jsonData.data.degree_id).to.eql(pm.environment.get(\"degreeid\"));",
									"});",
									"",
									"pm.test(\"The get User's title\", function () {",
									"    pm.expect(jsonData.data.title).to.eql(pm.environment.get(\"educationtitle\"));",
									"});",
									"",
									"pm.test(\"The get User's institution\", function () {",
									"    pm.expect(jsonData.data.institution).to.eql(pm.environment.get(\"educationinstitution\"));",
									"});",
									"",
									"pm.test(\"The get the Start Date\", function () {",
									"    pm.expect(jsonData.data.start_date).to.eql(pm.environment.get(\"educationstartdate\"));",
									"});",
									"",
									"pm.test(\"The get the Talent id\", function () {",
									"    pm.expect(jsonData.data.talent_id).to.eql(pm.environment.get(\"educationtalentid\"));",
									"});",
									"",
									"pm.test(\"The get the id\", function () {",
									"   pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"educationdataid\"));",
									"});",
									"",
									"pm.test(\"The get the id under talent\", function () {",
									"    pm.expect(jsonData.data.talent.id).to.eql(pm.environment.get(\"talentid\"));",
									"});",
									"",
									"pm.test(\"The get the user email\", function () {",
									"    pm.expect(jsonData.data.talent.email).to.eql(pm.environment.get(\"talentemail\"));",
									"});",
									"",
									"pm.test(\"The get the user avatar\", function () {",
									"    pm.expect(jsonData.data.talent.avatar).to.eql(pm.environment.get(\"talentavatar\"));",
									"});",
									"",
									"pm.test(\"The get the user job status id\", function () {",
									"    pm.expect(jsonData.data.talent.job_status_id).to.eql(pm.environment.get(\"jobstatusid\"));",
									"});",
									"",
									"pm.test(\"The get the user remote type id\", function () {",
									"    pm.expect(jsonData.data.talent.remote_type_id).to.eql(pm.environment.get(\"remotetypeid\"));",
									"});",
									"",
									"pm.test(\"The get the user gets notifications\", function () {",
									"    pm.expect(jsonData.data.talent.get_notifications).to.eql(pm.environment.get(\"getnotifications\"));",
									"});",
									"",
									"pm.test(\"The get the user gets matches\", function () {",
									"    pm.expect(jsonData.data.talent.get_matches).to.eql(pm.environment.get(\"getmatches\"));",
									"});",
									"",
									"pm.test(\"The get the user active\", function () {",
									"    pm.expect(jsonData.data.talent.active).to.eql(pm.environment.get(\"talentactive\"));",
									"});",
									"",
									"",
									"pm.test(\"The get the user salary currency id\", function () {",
									"    pm.expect(jsonData.data.talent.salary_currency_id).to.eql(pm.environment.get(\"salarycurrencyid\"));",
									"});",
									"",
									"pm.test(\"The get the user resumes id\", function () {",
									"    pm.expect(jsonData.data.talent.resumes[0].id).to.eql(pm.environment.get(\"resumesid0\"));",
									"    });",
									"pm.test(\"The get the user resumes talent id\", function () {",
									"    pm.expect(jsonData.data.talent.resumes[0].talent_id).to.eql(pm.environment.get(\"resumestalentid0\"));",
									"    });",
									"pm.test(\"The get the user resumes name\", function () {",
									"    pm.expect(jsonData.data.talent.resumes[0].name).to.eql(pm.environment.get(\"resumesname0\"));",
									"    });",
									"pm.test(\"The get the user resumes talent id\", function () {",
									"    pm.expect(jsonData.data.talent.resumes[0].file_name).to.eql(pm.environment.get(\"resumesfilename0\"));",
									"    });",
									"",
									"pm.test(\"The get the user skills id\", function () {",
									"    pm.expect(jsonData.data.talent.skills[0].id).to.eql(pm.environment.get(\"skillsid0\"));",
									"    });",
									"pm.test(\"The get the user skills talent id\", function () {",
									"    pm.expect(jsonData.data.talent.skills[0].talent_id).to.eql(pm.environment.get(\"skillstalentid0\"));",
									"    });",
									"pm.test(\"The get the user skills skill id\", function () {",
									"    pm.expect(jsonData.data.talent.skills[0].skill_id).to.eql(pm.environment.get(\"skillsskillid0\"));",
									"    });",
									"pm.test(\"The get the user skills primary id\", function () {",
									"    pm.expect(jsonData.data.talent.skills[0].is_primary).to.eql(pm.environment.get(\"skillsprimaryid0\"));",
									"    });",
									"pm.test(\"The get the user skills secondary id\", function () {",
									"    pm.expect(jsonData.data.talent.skills[0].is_secondary).to.eql(pm.environment.get(\"skillssecondaryid0\"));",
									"    });",
									"pm.test(\"The get the user skills level id\", function () {",
									"    pm.expect(jsonData.data.talent.skills[0].skill_level_id).to.eql(pm.environment.get(\"skilllevelid0\"));",
									"    });",
									"",
									"pm.test(\"The get the user experience id\", function () {",
									"    pm.expect(jsonData.data.talent.experiences[0].id).to.eql(pm.environment.get(\"experiencesid0\"));",
									"    });",
									"pm.test(\"The get the user experience talent id\", function () {",
									"    pm.expect(jsonData.data.talent.experiences[0].talent_id).to.eql(pm.environment.get(\"experiencestalentid0\"));",
									"    });",
									"pm.test(\"The get the user experience company name id\", function () {",
									"    pm.expect(jsonData.data.talent.experiences[0].company_name).to.eql(pm.environment.get(\"experiencescompanyname0\"));",
									"    });",
									"pm.test(\"The get the user experience state id\", function () {",
									"    pm.expect(jsonData.data.talent.experiences[0].state_id).to.eql(pm.environment.get(\"experiencesstateid0\"));",
									"    });",
									"pm.test(\"The get the user experience country id\", function () {",
									"    pm.expect(jsonData.data.talent.experiences[0].country_id).to.eql(pm.environment.get(\"experiencescountryid0\"));",
									"    });",
									"pm.test(\"The get the user experience seniority id\", function () {",
									"    pm.expect(jsonData.data.talent.experiences[0].seniority_id).to.eql(pm.environment.get(\"experiencesseniorityid0\"));",
									"    });",
									"pm.test(\"The get the user experience title id\", function () {",
									"    pm.expect(jsonData.data.talent.experiences[0].title_id).to.eql(pm.environment.get(\"experiencestitleid0\"));",
									"    });",
									"pm.test(\"The get the user experience description id\", function () {",
									"    pm.expect(jsonData.data.talent.experiences[0].description).to.eql(pm.environment.get(\"experiencesdescription0\"));",
									"    });",
									"pm.test(\"The get the user experience industry id\", function () {",
									"    pm.expect(jsonData.data.talent.experiences[0].industry_id).to.eql(pm.environment.get(\"experiencesindustryid0\"));",
									"    });",
									"",
									"pm.test(\"The get the user educations id\", function () {",
									"    pm.expect(jsonData.data.talent.educations[0].id).to.eql(pm.environment.get(\"educationid0\"));",
									"});",
									"",
									"pm.test(\"The get the user educations talent id\", function () {",
									"    pm.expect(jsonData.data.talent.educations[0].talent_id).to.eql(pm.environment.get(\"educationtalentid0\"));",
									"});",
									"",
									"pm.test(\"The get the user educations degree id\", function () {",
									"    pm.expect(jsonData.data.talent.educations[0].degree_id).to.eql(pm.environment.get(\"educationdegreeid0\"));",
									"});",
									"",
									"",
									"pm.test(\"The get the user educations id 1 - 9\", function () {",
									"    pm.expect(jsonData.data.talent.educations[1,2,3,4,5].id).to.eql(pm.environment.get(\"educationid1\"));",
									"});",
									"",
									"pm.test(\"The get the user educations talent id 1-9\", function () {",
									"    pm.expect(jsonData.data.talent.educations[1,2,3,4,5].talent_id).to.eql(pm.environment.get(\"educationtalentid1\"));",
									"});",
									"",
									"pm.test(\"The get the user educations degree id\", function () {",
									"    pm.expect(jsonData.data.talent.educations[1,2,3,4,5].degree_id).to.eql(pm.environment.get(\"educationdegreeid1\"));",
									"});"
								],
								"id": "cbdfa056-aacf-4921-8a44-0d91389cbddd"
							}
						}
					],
					"_postman_id": "87850f03-d098-4744-bac6-6abb62c97aa2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Software Engineering\",\n    \"institution\": \"Azad Univeristy\",\n    \"degree_id\" : 2,\n    \"start_date\": \"2007-02-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/educations"
					},
					"response": []
				},
				{
					"name": "Add Education-empty Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});"
								],
								"id": "3835710c-c737-415a-a6fb-1d20c83d5044"
							}
						}
					],
					"_postman_id": "84bbe461-bfa5-4a1f-aeee-54a297e39251",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"\",\n    \"institution\": \"Azad Univeristy,\n    \"degree_id\" : 2,\n    \"start_date\": \"2007-02-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/educations"
					},
					"response": []
				},
				{
					"name": "Add Education-empty Institution Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});"
								],
								"id": "77669bac-04f2-4766-b80f-32b7b186f69c"
							}
						}
					],
					"_postman_id": "184d4051-0a56-427f-9b58-747fce7df0f2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Software Engineering\",\n    \"institution\": \"\",\n    \"degree_id\" : 2,\n    \"start_date\": \"2007-02-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/educations"
					},
					"response": []
				},
				{
					"name": "Add Education - empty degree_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});"
								],
								"id": "6375d088-a83b-4108-905e-02853a9074af"
							}
						}
					],
					"_postman_id": "aa073fe8-46d0-42ae-a0c3-a75df616d98e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Software Engineering\",\n    \"institution\": \"Azad Univeristy\",\n    \"degree_id\" : \"\",\n    \"start_date\": \"2007-02-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/educations"
					},
					"response": []
				},
				{
					"name": "Add Education- empty Start_date",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});"
								],
								"id": "0af6fd7b-8bf2-41fa-8c83-781bc2700448"
							}
						}
					],
					"_postman_id": "dcf47666-2dc4-491f-a490-21d0ec2e6e75",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Software Engineering\",\n    \"institution\": \"Azad Univeristy\",\n    \"degree_id\" : 2,\n    \"start_date\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/educations"
					},
					"response": []
				},
				{
					"name": "Add Education - Invalid degree_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"invalid\");\r",
									"});"
								],
								"id": "46757680-6731-48db-8134-ce49007c4c91"
							}
						}
					],
					"_postman_id": "d6621e84-f457-4062-9756-f278f28d25b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Software Engineering\",\n    \"institution\": \"Azad Univeristy\",\n    \"degree_id\" : 0,\n    \"start_date\": \"2007-02-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/educations"
					},
					"response": []
				},
				{
					"name": "Add Education- Invalid Start_date",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"valid\");\r",
									"});"
								],
								"id": "20ff4ead-256a-4d74-ab5f-c8f640bd5a1d"
							}
						}
					],
					"_postman_id": "49a997d2-b0fa-41a5-9aed-d0be3e70fc98",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Software Engineering\",\n    \"institution\": \"Azad Univeristy\",\n    \"degree_id\" : 2,\n    \"start_date\": \"yyyy-mm-dd\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/educations"
					},
					"response": []
				},
				{
					"name": "Delete Education",
					"_postman_id": "2a7df31b-2836-4087-8631-6e988bb807e3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/educations/:education_id?key=INTEGER",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"educations",
								":education_id"
							],
							"query": [
								{
									"key": "key",
									"value": "INTEGER",
									"description": "[OPTIONAL] Index of cached education entrty to delete, starting from 0"
								}
							],
							"variable": [
								{
									"id": "d5baaa57-c06d-4ba6-84cb-42df1a91bb90",
									"key": "education_id",
									"value": "{{educationid0}}",
									"description": "Primary key of education of interest",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Education",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									" var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('educationid',jsonData.data.id)\r",
									"pm.environment.set('educationenabled',jsonData.data.enabled)\r",
									"pm.environment.set('educationtitle',jsonData.data.title)\r",
									"pm.environment.set('educationinstitution',jsonData.data.institution)\r",
									"pm.environment.set('educationdegreeid',jsonData.data.degree_id)\r",
									"pm.environment.set('educationdegree',jsonData.data.degree)\r",
									"pm.environment.set('educationstartdate',jsonData.data.start_date)\r",
									"pm.environment.set('educationenddate',jsonData.data.end_date)\r",
									"\r",
									"pm.test(\"The get the education id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"educationid\"));\r",
									"    pm.expect(jsonData.data.enabled).to.eql(pm.environment.get(\"educationenabled\"));\r",
									"    pm.expect(jsonData.data.title).to.eql(pm.environment.get(\"educationtitle\"));\r",
									"    pm.expect(jsonData.data.institution).to.eql(pm.environment.get(\"educationinstitution\"));\r",
									"    pm.expect(jsonData.data.degree_id).to.eql(pm.environment.get(\"educationdegreeid\"));\r",
									"    pm.expect(jsonData.data.degree).to.eql(pm.environment.get(\"educationdegree\"));\r",
									"     pm.expect(jsonData.data.start_date).to.eql(pm.environment.get(\"educationstartdate\"));\r",
									"     pm.expect(jsonData.data.end_date).to.eql(pm.environment.get(\"educationenddate\"));\r",
									"\r",
									"\r",
									"});"
								],
								"id": "a36320ab-e607-410a-b297-dd6d24fc7548"
							}
						}
					],
					"_postman_id": "add24c3b-72ff-4436-b99c-fda5b7105adf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/educations/:education_id",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"educations",
								":education_id"
							],
							"variable": [
								{
									"id": "679cf3c3-a01d-4a1d-9f18-0ce87edb59c4",
									"key": "education_id",
									"value": "{{educationid0}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cached Education",
					"_postman_id": "4eb10087-2f72-410a-846c-ae86c96ce6fe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/educations/:index/cached",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"educations",
								":index",
								"cached"
							],
							"variable": [
								{
									"id": "ccf52a53-d5ce-441b-b763-86296321ef34",
									"key": "index",
									"value": "{{educationid0}}",
									"description": "0 based index key of cached item of interest",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Educations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									" var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('educationid',jsonData.data[0,1,2,3,4,5,6,7,8,9,10,11,12].id)\r",
									"pm.environment.set('educationenabled',jsonData.data[0,1,2,3,4,5,6,7,8,9,10,11,12].enabled)\r",
									"pm.environment.set('educationtitle',jsonData.data[0,1,2,3,4,5,6,7,8,9,10,11,12].title)\r",
									"pm.environment.set('educationinstitution',jsonData.data[0,1,2,3,4,5,6,7,8,9,10,11,12].institution)\r",
									"pm.environment.set('educationdegreeid',jsonData.data[0,1,2,3,4,5,6,7,8,9,10,11,12].degree_id)\r",
									"pm.environment.set('educationdegree',jsonData.data[0,1,2,3,4,5,6,7,8,9,10,11,12].degree)\r",
									"pm.environment.set('educationstartdate',jsonData.data[0,1,2,3,4,5,6,7,8,9,10,11,12].start_date)\r",
									"pm.environment.set('educationenddate',jsonData.data[0,1,2,3,4,5,6,7,8,9,10,11,12].end_date)\r",
									"\r",
									"pm.test(\"The get the education id\", function () {\r",
									"    pm.expect(jsonData.data[0,1,2,3,4,5,6,7,8,9,10,11,12].id).to.eql(pm.environment.get(\"educationid\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3,4,5,6,7,8,9,10,11,12].enabled).to.eql(pm.environment.get(\"educationenabled\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3,4,5,6,7,8,9,10,11,12].title).to.eql(pm.environment.get(\"educationtitle\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3,4,5,6,7,8,9,10,11,12].institution).to.eql(pm.environment.get(\"educationinstitution\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3,4,5,6,7,8,9,10,11,12].degree_id).to.eql(pm.environment.get(\"educationdegreeid\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3,4,5,6,7,8,9,10,11,12].degree).to.eql(pm.environment.get(\"educationdegree\"));\r",
									"     pm.expect(jsonData.data[0,1,2,3,4,5,6,7,8,9,10,11,12].start_date).to.eql(pm.environment.get(\"educationstartdate\"));\r",
									"     pm.expect(jsonData.data[0,1,2,3,4,5,6,7,8,9,10,11,12].end_date).to.eql(pm.environment.get(\"educationenddate\"));\r",
									"\r",
									"\r",
									"});"
								],
								"id": "ba607f70-d2e8-422d-be2e-d492f2c0bafd"
							}
						}
					],
					"_postman_id": "8f09a43b-0da2-4c67-83f1-a530daf5b7b8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{borderless_service_url}}/api/v1/talents/educations"
					},
					"response": []
				}
			],
			"_postman_id": "cbce382b-4f08-4180-94e8-903de37c226c",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f3f62b5a-8bf5-4937-94cf-61fd0f4c8c86",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "944532f9-5209-4f82-95e1-ad12dc12a992",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"The get the Success\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.be.oneOf([true,false]);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Skills",
			"item": [
				{
					"name": "Update Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"id": "bd0f7ae8-bead-47da-8c6f-5897ffe66218"
							}
						}
					],
					"_postman_id": "79a10c4d-b562-4b1d-b568-93cb4f135166",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"skill_id\": 4,\n    \"skill_level_id\": 1,\n    \"start_date\": \"2012-02\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/skills/:skill_id",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"skills",
								":skill_id"
							],
							"variable": [
								{
									"id": "1a1b40db-5d58-433f-b107-57c469602d97",
									"key": "skill_id",
									"value": "{{skillid}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Skill-success",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"pm.environment.set('skillsid',jsonData.data.id)\r",
									"pm.environment.set('skillsenabled',jsonData.data.enabled)\r",
									"pm.environment.set('skillsskillid',jsonData.data.skill_id)\r",
									"pm.environment.set('skillsskill',jsonData.data.skill)\r",
									"pm.environment.set('skillsprimaryid',jsonData.data.is_primary)\r",
									"pm.environment.set('skillssecondaryid',jsonData.data.is_secondary)\r",
									"pm.environment.set('skilllevelid',jsonData.data.skill_level_id)\r",
									"pm.environment.set('skillslevel',jsonData.data.skill_level)\r",
									"pm.environment.set('skillsstartdate',jsonData.data.start_date)\r",
									"pm.environment.set('skillsyearsexperience',jsonData.data.years_experience)\r",
									"\r",
									"pm.test(\"The get the user skills id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"skillsid\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills enabled\", function () {\r",
									"    pm.expect(jsonData.data.enabled).to.eql(pm.environment.get(\"skillsenabled\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills skill id\", function () {\r",
									"    pm.expect(jsonData.data.skill_id).to.eql(pm.environment.get(\"skillsskillid\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills skill\", function () {\r",
									"    pm.expect(jsonData.data.skill).to.eql(pm.environment.get(\"skillsskill\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills primary id\", function () {\r",
									"    pm.expect(jsonData.data.is_primary).to.eql(pm.environment.get(\"skillsprimaryid\"));\r",
									"    });\r",
									"pm.test(\"The get the user skills secondary id\", function () {\r",
									"    pm.expect(jsonData.data.is_secondary).to.eql(pm.environment.get(\"skillssecondaryid\"));\r",
									"    });\r",
									"pm.test(\"The get the user skills level id\", function () {\r",
									"    pm.expect(jsonData.data.skill_level_id).to.eql(pm.environment.get(\"skilllevelid\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills level\", function () {\r",
									"    pm.expect(jsonData.data.skill_level).to.eql(pm.environment.get(\"skillslevel\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user start date\", function () {\r",
									"    pm.expect(jsonData.data.start_date).to.eql(pm.environment.get(\"skillsstartdate\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills years experience\", function () {\r",
									"    pm.expect(jsonData.data.years_experience).to.eql(pm.environment.get(\"skillsyearsexperience\"));\r",
									"    });"
								],
								"id": "d3863131-812f-4fa7-a318-34976d0f24c1"
							}
						}
					],
					"_postman_id": "d6170a5e-a3e2-46be-9c16-14c0048f5576",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"skill_id\" : 9,\n    \"skill_level_id\": 2,\n    \"is_primary\": true,\n    \"is_secondary\": false,\n    \"start_date\": \"2021-08-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/skills"
					},
					"response": []
				},
				{
					"name": "Add Skill-change skill id-success",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"pm.environment.set('skillsid',jsonData.data.id)\r",
									"pm.environment.set('skillsenabled',jsonData.data.enabled)\r",
									"pm.environment.set('skillsskillid',jsonData.data.skill_id)\r",
									"pm.environment.set('skillsskill',jsonData.data.skill)\r",
									"pm.environment.set('skillsprimaryid',jsonData.data.is_primary)\r",
									"pm.environment.set('skillssecondaryid',jsonData.data.is_secondary)\r",
									"pm.environment.set('skilllevelid',jsonData.data.skill_level_id)\r",
									"pm.environment.set('skillslevel',jsonData.data.skill_level)\r",
									"pm.environment.set('skillsstartdate',jsonData.data.start_date)\r",
									"pm.environment.set('skillsyearsexperience',jsonData.data.years_experience)\r",
									"\r",
									"pm.test(\"The get the user skills id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"skillsid\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills enabled\", function () {\r",
									"    pm.expect(jsonData.data.enabled).to.eql(pm.environment.get(\"skillsenabled\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills skill id\", function () {\r",
									"    pm.expect(jsonData.data.skill_id).to.eql(pm.environment.get(\"skillsskillid\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills skill\", function () {\r",
									"    pm.expect(jsonData.data.skill).to.eql(pm.environment.get(\"skillsskill\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills primary id\", function () {\r",
									"    pm.expect(jsonData.data.is_primary).to.eql(pm.environment.get(\"skillsprimaryid\"));\r",
									"    });\r",
									"pm.test(\"The get the user skills secondary id\", function () {\r",
									"    pm.expect(jsonData.data.is_secondary).to.eql(pm.environment.get(\"skillssecondaryid\"));\r",
									"    });\r",
									"pm.test(\"The get the user skills level id\", function () {\r",
									"    pm.expect(jsonData.data.skill_level_id).to.eql(pm.environment.get(\"skilllevelid\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills level\", function () {\r",
									"    pm.expect(jsonData.data.skill_level).to.eql(pm.environment.get(\"skillslevel\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user start date\", function () {\r",
									"    pm.expect(jsonData.data.start_date).to.eql(pm.environment.get(\"skillsstartdate\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills years experience\", function () {\r",
									"    pm.expect(jsonData.data.years_experience).to.eql(pm.environment.get(\"skillsyearsexperience\"));\r",
									"    });"
								],
								"id": "c25c25b4-b5b2-4423-bcde-6dbb4d10b6e7"
							}
						}
					],
					"_postman_id": "2d190ba8-1bdf-41c6-a9f0-6f1e34a70915",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"skill_id\" : 20,\n    \"skill_level_id\": 2,\n    \"is_primary\": true,\n    \"is_secondary\": false,\n    \"start_date\": \"2021-08-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/skills"
					},
					"response": []
				},
				{
					"name": "Add Skill-maximum skill id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"pm.environment.set('skillsid',jsonData.data.id)\r",
									"pm.environment.set('skillsenabled',jsonData.data.enabled)\r",
									"pm.environment.set('skillsskillid',jsonData.data.skill_id)\r",
									"pm.environment.set('skillsskill',jsonData.data.skill)\r",
									"pm.environment.set('skillsprimaryid',jsonData.data.is_primary)\r",
									"pm.environment.set('skillssecondaryid',jsonData.data.is_secondary)\r",
									"pm.environment.set('skilllevelid',jsonData.data.skill_level_id)\r",
									"pm.environment.set('skillslevel',jsonData.data.skill_level)\r",
									"pm.environment.set('skillsstartdate',jsonData.data.start_date)\r",
									"pm.environment.set('skillsyearsexperience',jsonData.data.years_experience)\r",
									"\r",
									"pm.test(\"The get the user skills id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"skillsid\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills enabled\", function () {\r",
									"    pm.expect(jsonData.data.enabled).to.eql(pm.environment.get(\"skillsenabled\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills skill id\", function () {\r",
									"    pm.expect(jsonData.data.skill_id).to.eql(pm.environment.get(\"skillsskillid\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills skill\", function () {\r",
									"    pm.expect(jsonData.data.skill).to.eql(pm.environment.get(\"skillsskill\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills primary id\", function () {\r",
									"    pm.expect(jsonData.data.is_primary).to.eql(pm.environment.get(\"skillsprimaryid\"));\r",
									"    });\r",
									"pm.test(\"The get the user skills secondary id\", function () {\r",
									"    pm.expect(jsonData.data.is_secondary).to.eql(pm.environment.get(\"skillssecondaryid\"));\r",
									"    });\r",
									"pm.test(\"The get the user skills level id\", function () {\r",
									"    pm.expect(jsonData.data.skill_level_id).to.eql(pm.environment.get(\"skilllevelid\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills level\", function () {\r",
									"    pm.expect(jsonData.data.skill_level).to.eql(pm.environment.get(\"skillslevel\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user start date\", function () {\r",
									"    pm.expect(jsonData.data.start_date).to.eql(pm.environment.get(\"skillsstartdate\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills years experience\", function () {\r",
									"    pm.expect(jsonData.data.years_experience).to.eql(pm.environment.get(\"skillsyearsexperience\"));\r",
									"    });"
								],
								"id": "bc742661-b20f-44ce-811c-f424b1fe9f84"
							}
						}
					],
					"_postman_id": "7216ebb5-9961-47fa-826d-b97d67ec7dcf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"skill_id\" : 30,\n    \"skill_level_id\": 2,\n    \"is_primary\": true,\n    \"is_secondary\": false,\n    \"start_date\": \"2021-08-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/skills"
					},
					"response": []
				},
				{
					"name": "Add Skill-change skill level id-success",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"pm.environment.set('skillsid',jsonData.data.id)\r",
									"pm.environment.set('skillsenabled',jsonData.data.enabled)\r",
									"pm.environment.set('skillsskillid',jsonData.data.skill_id)\r",
									"pm.environment.set('skillsskill',jsonData.data.skill)\r",
									"pm.environment.set('skillsprimaryid',jsonData.data.is_primary)\r",
									"pm.environment.set('skillssecondaryid',jsonData.data.is_secondary)\r",
									"pm.environment.set('skilllevelid',jsonData.data.skill_level_id)\r",
									"pm.environment.set('skillslevel',jsonData.data.skill_level)\r",
									"pm.environment.set('skillsstartdate',jsonData.data.start_date)\r",
									"pm.environment.set('skillsyearsexperience',jsonData.data.years_experience)\r",
									"\r",
									"pm.test(\"The get the user skills id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"skillsid\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills enabled\", function () {\r",
									"    pm.expect(jsonData.data.enabled).to.eql(pm.environment.get(\"skillsenabled\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills skill id\", function () {\r",
									"    pm.expect(jsonData.data.skill_id).to.eql(pm.environment.get(\"skillsskillid\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills skill\", function () {\r",
									"    pm.expect(jsonData.data.skill).to.eql(pm.environment.get(\"skillsskill\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills primary id\", function () {\r",
									"    pm.expect(jsonData.data.is_primary).to.eql(pm.environment.get(\"skillsprimaryid\"));\r",
									"    });\r",
									"pm.test(\"The get the user skills secondary id\", function () {\r",
									"    pm.expect(jsonData.data.is_secondary).to.eql(pm.environment.get(\"skillssecondaryid\"));\r",
									"    });\r",
									"pm.test(\"The get the user skills level id\", function () {\r",
									"    pm.expect(jsonData.data.skill_level_id).to.eql(pm.environment.get(\"skilllevelid\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills level\", function () {\r",
									"    pm.expect(jsonData.data.skill_level).to.eql(pm.environment.get(\"skillslevel\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user start date\", function () {\r",
									"    pm.expect(jsonData.data.start_date).to.eql(pm.environment.get(\"skillsstartdate\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills years experience\", function () {\r",
									"    pm.expect(jsonData.data.years_experience).to.eql(pm.environment.get(\"skillsyearsexperience\"));\r",
									"    });"
								],
								"id": "4be9c64f-c970-4f63-8d6f-19d48501a970"
							}
						}
					],
					"_postman_id": "43bee250-6fc8-4f1f-8aa0-52b210967fa8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"skill_id\" : 9,\n    \"skill_level_id\": 4,\n    \"is_primary\": true,\n    \"is_secondary\": false,\n    \"start_date\": \"2021-08-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/skills"
					},
					"response": []
				},
				{
					"name": "Add Skill-switch boolean-success",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"pm.environment.set('skillsid',jsonData.data.id)\r",
									"pm.environment.set('skillsenabled',jsonData.data.enabled)\r",
									"pm.environment.set('skillsskillid',jsonData.data.skill_id)\r",
									"pm.environment.set('skillsskill',jsonData.data.skill)\r",
									"pm.environment.set('skillsprimaryid',jsonData.data.is_primary)\r",
									"pm.environment.set('skillssecondaryid',jsonData.data.is_secondary)\r",
									"pm.environment.set('skilllevelid',jsonData.data.skill_level_id)\r",
									"pm.environment.set('skillslevel',jsonData.data.skill_level)\r",
									"pm.environment.set('skillsstartdate',jsonData.data.start_date)\r",
									"pm.environment.set('skillsyearsexperience',jsonData.data.years_experience)\r",
									"\r",
									"pm.test(\"The get the user skills id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"skillsid\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills enabled\", function () {\r",
									"    pm.expect(jsonData.data.enabled).to.eql(pm.environment.get(\"skillsenabled\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills skill id\", function () {\r",
									"    pm.expect(jsonData.data.skill_id).to.eql(pm.environment.get(\"skillsskillid\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills skill\", function () {\r",
									"    pm.expect(jsonData.data.skill).to.eql(pm.environment.get(\"skillsskill\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills primary id\", function () {\r",
									"    pm.expect(jsonData.data.is_primary).to.eql(pm.environment.get(\"skillsprimaryid\"));\r",
									"    });\r",
									"pm.test(\"The get the user skills secondary id\", function () {\r",
									"    pm.expect(jsonData.data.is_secondary).to.eql(pm.environment.get(\"skillssecondaryid\"));\r",
									"    });\r",
									"pm.test(\"The get the user skills level id\", function () {\r",
									"    pm.expect(jsonData.data.skill_level_id).to.eql(pm.environment.get(\"skilllevelid\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills level\", function () {\r",
									"    pm.expect(jsonData.data.skill_level).to.eql(pm.environment.get(\"skillslevel\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user start date\", function () {\r",
									"    pm.expect(jsonData.data.start_date).to.eql(pm.environment.get(\"skillsstartdate\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills years experience\", function () {\r",
									"    pm.expect(jsonData.data.years_experience).to.eql(pm.environment.get(\"skillsyearsexperience\"));\r",
									"    });"
								],
								"id": "97b00f2c-765b-4296-a127-d650a3b00adb"
							}
						}
					],
					"_postman_id": "937e4f3b-411b-4dab-a7f5-efe7cf860f0d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"skill_id\" : 9,\n    \"skill_level_id\": 2,\n    \"is_primary\": false,\n    \"is_secondary\": true,\n    \"start_date\": \"2021-08-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/skills"
					},
					"response": []
				},
				{
					"name": "Add Skill-null skill id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"invalid\");\r",
									"});\r",
									"\r",
									"pm.test(\"Skill id Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.skill_id[0]).to.include(\"invalid\");\r",
									"});"
								],
								"id": "8170fb09-d2e5-4c25-b7ce-e9d61a581df2"
							}
						}
					],
					"_postman_id": "811272ab-a0dc-4b20-a7e3-e7519918678a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"skill_id\" : 0,\n    \"skill_level_id\": 2,\n    \"is_primary\": true,\n    \"is_secondary\": false,\n    \"start_date\": \"2021-08-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/skills"
					},
					"response": []
				},
				{
					"name": "Add Skill-wrong skill level id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"invalid\");\r",
									"});\r",
									"\r",
									"pm.test(\"Skill id Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.skill_level_id[0]).to.include(\"invalid\");\r",
									"});"
								],
								"id": "88621ad7-11e4-4a85-a773-6ca87ff063b6"
							}
						}
					],
					"_postman_id": "23b945a9-fd91-4655-804c-ccbdb3b4430b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"skill_id\" : 9,\n    \"skill_level_id\": 5,\n    \"is_primary\": true,\n    \"is_secondary\": false,\n    \"start_date\": \"2021-08-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/skills"
					},
					"response": []
				},
				{
					"name": "Add Skill -empty skill id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Skill id Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.skill_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Skill Level id Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.skill_level_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Primary Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.is_primary[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Secondary Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.is_secondary[0]).to.include(\"required\");\r",
									"});"
								],
								"id": "8af7e670-7f11-4004-aff3-f5595671538d"
							}
						}
					],
					"_postman_id": "7f44afaf-4b4c-4707-9c93-0f7eccba9ff3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"skill_id\" : ,\n    \"skill_level_id\": 2,\n    \"is_primary\": true,\n    \"is_secondary\": false,\n    \"start_date\": \"2021-08-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/skills"
					},
					"response": []
				},
				{
					"name": "Add Skill-empty skill level id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Skill id Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.skill_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Skill Level id Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.skill_level_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Primary Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.is_primary[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Secondary Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.is_secondary[0]).to.include(\"required\");\r",
									"});"
								],
								"id": "ba32821d-1a6d-4127-b144-317d847d2322"
							}
						}
					],
					"_postman_id": "f3e4612f-2627-4f14-95ab-c8443e6ffc96",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"skill_id\" : 9,\n    \"skill_level_id\": ,\n    \"is_primary\": true,\n    \"is_secondary\": false,\n    \"start_date\": \"2021-08-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/skills"
					},
					"response": []
				},
				{
					"name": "Add Skill-empty primary",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Skill id Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.skill_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Skill Level id Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.skill_level_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Primary Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.is_primary[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Secondary Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.is_secondary[0]).to.include(\"required\");\r",
									"});"
								],
								"id": "beeaca56-51c2-441d-8a04-443645345aa5"
							}
						}
					],
					"_postman_id": "cc9e7987-aeca-4b27-801d-c2949c9f9ca8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"skill_id\" : 9,\n    \"skill_level_id\": 2,\n    \"is_primary\": ,\n    \"is_secondary\": false,\n    \"start_date\": \"2021-08-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/skills"
					},
					"response": []
				},
				{
					"name": "Add Skill-empty secondary",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Skill id Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.skill_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Skill Level id Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.skill_level_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Primary Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.is_primary[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Secondary Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.is_secondary[0]).to.include(\"required\");\r",
									"});"
								],
								"id": "390795ee-d50a-4657-99c7-4051235bb28b"
							}
						}
					],
					"_postman_id": "872ec7e2-8bf1-425b-8a20-45574bdb2ffa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"skill_id\" : 9,\n    \"skill_level_id\": 2,\n    \"is_primary\": true,\n    \"is_secondary\": ,\n    \"start_date\": \"2021-08-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/skills"
					},
					"response": []
				},
				{
					"name": "Add Skill-empty start date",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"valid date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Start Date Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.start_date[0]).to.include(\"valid date\");\r",
									"});"
								],
								"id": "d2d39be6-256b-42a3-baea-5a80b5008f89"
							}
						}
					],
					"_postman_id": "05f264c3-4de5-4f71-9acc-c7e876b03489",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"skill_id\" : 9,\n    \"skill_level_id\": 2,\n    \"is_primary\": true,\n    \"is_secondary\": false,\n    \"start_date\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/skills"
					},
					"response": []
				},
				{
					"name": "Add Skill-wrong date format",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"valid date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Start Date Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.start_date[0]).to.include(\"valid date\");\r",
									"});"
								],
								"id": "3d3bcd09-ba4a-4144-89b2-bfc63eafa5e5"
							}
						}
					],
					"_postman_id": "662300fa-15f3-4b9e-9bc6-a6d7beb6ba14",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"skill_id\" : 9,\n    \"skill_level_id\": 2,\n    \"is_primary\": true,\n    \"is_secondary\": false,\n    \"start_date\": \"yyyy-mm-dd\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/skills"
					},
					"response": []
				},
				{
					"name": "Delete Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"id": "18634582-6571-4d05-9971-a398dae0876d"
							}
						}
					],
					"_postman_id": "9d1f7c1c-29bc-4eca-8827-1c736f4dbb48",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/skills/:skill_id",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"skills",
								":skill_id"
							],
							"query": [
								{
									"key": "key",
									"value": "INTEGER",
									"description": "0-based index of entrty to delete from cached resumes",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "6296b8d7-8685-4fe5-831d-822fd3c43019",
									"key": "skill_id",
									"value": "{{skillsid}}",
									"description": "Primary key of talent skill of interest",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"pm.environment.set('skillsid',jsonData.data[0,1].id)\r",
									"pm.environment.set('skillsenabled',jsonData.data[0,1].enabled)\r",
									"pm.environment.set('skillsskillid',jsonData.data[0,1].skill_id)\r",
									"pm.environment.set('skillsskill',jsonData.data[0,1].skill)\r",
									"pm.environment.set('skillsprimaryid',jsonData.data[0,1].is_primary)\r",
									"pm.environment.set('skillssecondaryid',jsonData.data[0,1].is_secondary)\r",
									"pm.environment.set('skilllevelid',jsonData.data[0,1].skill_level_id)\r",
									"pm.environment.set('skillslevel',jsonData.data[0,1].skill_level)\r",
									"pm.environment.set('skillsstartdate',jsonData.data[0,1].start_date)\r",
									"pm.environment.set('skillsyearsexperience',jsonData.data[0,1].years_experience)\r",
									"\r",
									"pm.test(\"The get the user skills id\", function () {\r",
									"    pm.expect(jsonData.data[0,1].id).to.eql(pm.environment.get(\"skillsid\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills enabled\", function () {\r",
									"    pm.expect(jsonData.data[0,1].enabled).to.eql(pm.environment.get(\"skillsenabled\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills skill id\", function () {\r",
									"    pm.expect(jsonData.data[0,1].skill_id).to.eql(pm.environment.get(\"skillsskillid\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills skill\", function () {\r",
									"    pm.expect(jsonData.data[0,1].skill).to.eql(pm.environment.get(\"skillsskill\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills primary id\", function () {\r",
									"    pm.expect(jsonData.data[0,1].is_primary).to.eql(pm.environment.get(\"skillsprimaryid\"));\r",
									"    });\r",
									"pm.test(\"The get the user skills secondary id\", function () {\r",
									"    pm.expect(jsonData.data[0,1].is_secondary).to.eql(pm.environment.get(\"skillssecondaryid\"));\r",
									"    });\r",
									"pm.test(\"The get the user skills level id\", function () {\r",
									"    pm.expect(jsonData.data[0,1].skill_level_id).to.eql(pm.environment.get(\"skilllevelid\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills level\", function () {\r",
									"    pm.expect(jsonData.data[0,1].skill_level).to.eql(pm.environment.get(\"skillslevel\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user start date\", function () {\r",
									"    pm.expect(jsonData.data[0,1].start_date).to.eql(pm.environment.get(\"skillsstartdate\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills years experience\", function () {\r",
									"    pm.expect(jsonData.data[0,1].years_experience).to.eql(pm.environment.get(\"skillsyearsexperience\"));\r",
									"    });"
								],
								"id": "e2265dd8-3216-4ab6-85b1-bcedfd2bb956"
							}
						}
					],
					"_postman_id": "7034c29d-7d07-4a83-a1ad-ae8328af7610",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{borderless_service_url}}/api/v1/talents/skills"
					},
					"response": []
				}
			],
			"_postman_id": "c49c9184-30af-4b25-961c-10ec081f7315"
		},
		{
			"name": "Culture Fit",
			"item": [
				{
					"name": "Add/Update Culture Fit",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('culturefitdata',jsonData.data)\r",
									"\r",
									"pm.test(\"data\", function () {\r",
									"    pm.expect(jsonData.data).to.eql(pm.environment.get(\"culturefitdata\"));\r",
									"});"
								],
								"id": "210fcbe4-73eb-4dca-aeaa-92269a462e8a"
							}
						}
					],
					"_postman_id": "e1da88c5-e3c7-4080-b535-f03fd9fafe2d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\" : [\n        1, 2, 24\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/culture-fit",
						"description": "Adds/Updates a talent's culture fit selection.\n\n**Payload**\n\n*   `data` \\[array\\] = An array of ids indicating the selected culture fit items"
					},
					"response": []
				},
				{
					"name": "List Culture Fit",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set('culturefitdata',jsonData.data)",
									"",
									"pm.test(\"data\", function () {",
									"    pm.expect(jsonData.data).to.eql(pm.environment.get(\"culturefitdata\"));",
									"});"
								],
								"id": "c4e9b464-bf8c-416d-a5df-b47ed7e8350c"
							}
						}
					],
					"_postman_id": "245bd3e2-cb12-46b9-a620-36e0f430a8c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{borderless_service_url}}/api/v1/talents/culture-fit"
					},
					"response": []
				}
			],
			"_postman_id": "6c11c119-0f2a-40c3-9d34-6ce25563129d"
		},
		{
			"name": "Languages",
			"item": [
				{
					"name": "Update Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('languserid',jsonData.data.id)\r",
									"pm.environment.set('userlanguageid',jsonData.data.language_id)\r",
									"pm.environment.set('userlanguage',jsonData.data.language)\r",
									"pm.environment.set('userlanguagelevelid',jsonData.data.language_level_id)\r",
									"pm.environment.set('userlanguagelevel',jsonData.data.language_level)\r",
									"\r",
									"\r",
									"pm.test(\"To get the lang user id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"languserid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"User Language id\", function () {\r",
									"    pm.expect(jsonData.data.language_id).to.eql(pm.environment.get(\"userlanguageid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language\", function () {\r",
									"    pm.expect(jsonData.data.language).to.eql(pm.environment.get(\"userlanguage\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get the language level id\", function () {\r",
									"    pm.expect(jsonData.data.language_level_id).to.eql(pm.environment.get(\"userlanguagelevelid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language level\", function () {\r",
									"    pm.expect(jsonData.data.language_level).to.eql(pm.environment.get(\"userlanguagelevel\"));\r",
									"});\r",
									"\r",
									""
								],
								"id": "74440d69-a89f-419f-b1fe-3a22edc8f429"
							}
						}
					],
					"_postman_id": "2b883b6f-4d5b-4cf8-926c-91385501c6c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language_id\": \"ES\",\n    \"language_level_id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/languages/:talent_language_id",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"languages",
								":talent_language_id"
							],
							"variable": [
								{
									"id": "4225d195-2992-4e11-93d9-47301665a704",
									"key": "talent_language_id",
									"value": "{{languserid}}",
									"description": "Primary key of talent language of interest",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Language-English",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('languserid',jsonData.data.id)\r",
									"pm.environment.set('userlanguageid',jsonData.data.language_id)\r",
									"pm.environment.set('userlanguage',jsonData.data.language)\r",
									"pm.environment.set('userlanguagelevelid',jsonData.data.language_level_id)\r",
									"pm.environment.set('userlanguagelevel',jsonData.data.language_level)\r",
									"\r",
									"\r",
									"pm.test(\"To get the lang user id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"languserid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"User Language id\", function () {\r",
									"    pm.expect(jsonData.data.language_id).to.eql(pm.environment.get(\"userlanguageid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language\", function () {\r",
									"    pm.expect(jsonData.data.language).to.eql(pm.environment.get(\"userlanguage\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get the language level id\", function () {\r",
									"    pm.expect(jsonData.data.language_level_id).to.eql(pm.environment.get(\"userlanguagelevelid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language level\", function () {\r",
									"    pm.expect(jsonData.data.language_level).to.eql(pm.environment.get(\"userlanguagelevel\"));\r",
									"});\r",
									"\r",
									""
								],
								"id": "161ffd30-bf56-4323-b09c-05030ddb48dd"
							}
						}
					],
					"_postman_id": "76ea5538-2a8f-40d4-a8f8-bf9c70f760da",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language_id\": \"EN\",\n    \"language_level_id\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/languages"
					},
					"response": []
				},
				{
					"name": "Add Language-Chinese",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('languserid',jsonData.data.id)\r",
									"pm.environment.set('userlanguageid',jsonData.data.language_id)\r",
									"pm.environment.set('userlanguage',jsonData.data.language)\r",
									"pm.environment.set('userlanguagelevelid',jsonData.data.language_level_id)\r",
									"pm.environment.set('userlanguagelevel',jsonData.data.language_level)\r",
									"\r",
									"\r",
									"pm.test(\"To get the lang user id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"languserid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"User Language id\", function () {\r",
									"    pm.expect(jsonData.data.language_id).to.eql(pm.environment.get(\"userlanguageid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language\", function () {\r",
									"    pm.expect(jsonData.data.language).to.eql(pm.environment.get(\"userlanguage\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get the language level id\", function () {\r",
									"    pm.expect(jsonData.data.language_level_id).to.eql(pm.environment.get(\"userlanguagelevelid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language level\", function () {\r",
									"    pm.expect(jsonData.data.language_level).to.eql(pm.environment.get(\"userlanguagelevel\"));\r",
									"});\r",
									"\r",
									""
								],
								"id": "55566b59-5175-4143-92d3-e1c84da66e9b"
							}
						}
					],
					"_postman_id": "54a902e1-9139-403a-9c60-d41754e42016",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language_id\": \"ZH\",\n    \"language_level_id\": 4\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/languages"
					},
					"response": []
				},
				{
					"name": "Add Language-Dutch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('languserid',jsonData.data.id)\r",
									"pm.environment.set('userlanguageid',jsonData.data.language_id)\r",
									"pm.environment.set('userlanguage',jsonData.data.language)\r",
									"pm.environment.set('userlanguagelevelid',jsonData.data.language_level_id)\r",
									"pm.environment.set('userlanguagelevel',jsonData.data.language_level)\r",
									"\r",
									"\r",
									"pm.test(\"To get the lang user id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"languserid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"User Language id\", function () {\r",
									"    pm.expect(jsonData.data.language_id).to.eql(pm.environment.get(\"userlanguageid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language\", function () {\r",
									"    pm.expect(jsonData.data.language).to.eql(pm.environment.get(\"userlanguage\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get the language level id\", function () {\r",
									"    pm.expect(jsonData.data.language_level_id).to.eql(pm.environment.get(\"userlanguagelevelid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language level\", function () {\r",
									"    pm.expect(jsonData.data.language_level).to.eql(pm.environment.get(\"userlanguagelevel\"));\r",
									"});\r",
									"\r",
									""
								],
								"id": "d9671174-b443-4628-b8c1-3d80f5903c36"
							}
						}
					],
					"_postman_id": "37ee1720-6922-4e07-addd-fa6f1000b7b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language_id\": \"NL\",\n    \"language_level_id\": 3\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/languages"
					},
					"response": []
				},
				{
					"name": "Add Language-French",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('languserid',jsonData.data.id)\r",
									"pm.environment.set('userlanguageid',jsonData.data.language_id)\r",
									"pm.environment.set('userlanguage',jsonData.data.language)\r",
									"pm.environment.set('userlanguagelevelid',jsonData.data.language_level_id)\r",
									"pm.environment.set('userlanguagelevel',jsonData.data.language_level)\r",
									"\r",
									"\r",
									"pm.test(\"To get the lang user id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"languserid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"User Language id\", function () {\r",
									"    pm.expect(jsonData.data.language_id).to.eql(pm.environment.get(\"userlanguageid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language\", function () {\r",
									"    pm.expect(jsonData.data.language).to.eql(pm.environment.get(\"userlanguage\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get the language level id\", function () {\r",
									"    pm.expect(jsonData.data.language_level_id).to.eql(pm.environment.get(\"userlanguagelevelid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language level\", function () {\r",
									"    pm.expect(jsonData.data.language_level).to.eql(pm.environment.get(\"userlanguagelevel\"));\r",
									"});\r",
									"\r",
									""
								],
								"id": "57c412a2-d01a-4bbc-9c05-0f1abe47d457"
							}
						}
					],
					"_postman_id": "c1c491c3-50b1-434f-9fe1-e2544144dc52",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language_id\": \"FR\",\n    \"language_level_id\": 1\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/languages"
					},
					"response": []
				},
				{
					"name": "Add Language-German",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('languserid',jsonData.data.id)\r",
									"pm.environment.set('userlanguageid',jsonData.data.language_id)\r",
									"pm.environment.set('userlanguage',jsonData.data.language)\r",
									"pm.environment.set('userlanguagelevelid',jsonData.data.language_level_id)\r",
									"pm.environment.set('userlanguagelevel',jsonData.data.language_level)\r",
									"\r",
									"\r",
									"pm.test(\"To get the lang user id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"languserid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"User Language id\", function () {\r",
									"    pm.expect(jsonData.data.language_id).to.eql(pm.environment.get(\"userlanguageid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language\", function () {\r",
									"    pm.expect(jsonData.data.language).to.eql(pm.environment.get(\"userlanguage\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get the language level id\", function () {\r",
									"    pm.expect(jsonData.data.language_level_id).to.eql(pm.environment.get(\"userlanguagelevelid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language level\", function () {\r",
									"    pm.expect(jsonData.data.language_level).to.eql(pm.environment.get(\"userlanguagelevel\"));\r",
									"});\r",
									"\r",
									""
								],
								"id": "8eaa41d4-a901-4c19-87c1-b1411154f134"
							}
						}
					],
					"_postman_id": "852f0d79-d78e-4845-979c-58fd260c1996",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language_id\": \"DE\",\n    \"language_level_id\": 3\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/languages"
					},
					"response": []
				},
				{
					"name": "Add Language-Greek",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('languserid',jsonData.data.id)\r",
									"pm.environment.set('userlanguageid',jsonData.data.language_id)\r",
									"pm.environment.set('userlanguage',jsonData.data.language)\r",
									"pm.environment.set('userlanguagelevelid',jsonData.data.language_level_id)\r",
									"pm.environment.set('userlanguagelevel',jsonData.data.language_level)\r",
									"\r",
									"\r",
									"pm.test(\"To get the lang user id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"languserid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"User Language id\", function () {\r",
									"    pm.expect(jsonData.data.language_id).to.eql(pm.environment.get(\"userlanguageid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language\", function () {\r",
									"    pm.expect(jsonData.data.language).to.eql(pm.environment.get(\"userlanguage\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get the language level id\", function () {\r",
									"    pm.expect(jsonData.data.language_level_id).to.eql(pm.environment.get(\"userlanguagelevelid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language level\", function () {\r",
									"    pm.expect(jsonData.data.language_level).to.eql(pm.environment.get(\"userlanguagelevel\"));\r",
									"});\r",
									"\r",
									""
								],
								"id": "57a11377-87c3-420d-a02e-c7b283bc6d8a"
							}
						}
					],
					"_postman_id": "9fb1a7fc-eda4-40bd-9ac1-2eb5be521f65",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language_id\": \"EL\",\n    \"language_level_id\": 4\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/languages"
					},
					"response": []
				},
				{
					"name": "Add Language-Hindi",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('languserid',jsonData.data.id)\r",
									"pm.environment.set('userlanguageid',jsonData.data.language_id)\r",
									"pm.environment.set('userlanguage',jsonData.data.language)\r",
									"pm.environment.set('userlanguagelevelid',jsonData.data.language_level_id)\r",
									"pm.environment.set('userlanguagelevel',jsonData.data.language_level)\r",
									"\r",
									"\r",
									"pm.test(\"To get the lang user id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"languserid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"User Language id\", function () {\r",
									"    pm.expect(jsonData.data.language_id).to.eql(pm.environment.get(\"userlanguageid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language\", function () {\r",
									"    pm.expect(jsonData.data.language).to.eql(pm.environment.get(\"userlanguage\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get the language level id\", function () {\r",
									"    pm.expect(jsonData.data.language_level_id).to.eql(pm.environment.get(\"userlanguagelevelid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language level\", function () {\r",
									"    pm.expect(jsonData.data.language_level).to.eql(pm.environment.get(\"userlanguagelevel\"));\r",
									"});\r",
									"\r",
									""
								],
								"id": "fb140b84-fae0-4154-a020-bd69223a0952"
							}
						}
					],
					"_postman_id": "a5858e7d-861c-4c88-8429-b4bdbde5b038",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language_id\": \"HI\",\n    \"language_level_id\": 2\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/languages"
					},
					"response": []
				},
				{
					"name": "Add Language-Italian",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('languserid',jsonData.data.id)\r",
									"pm.environment.set('userlanguageid',jsonData.data.language_id)\r",
									"pm.environment.set('userlanguage',jsonData.data.language)\r",
									"pm.environment.set('userlanguagelevelid',jsonData.data.language_level_id)\r",
									"pm.environment.set('userlanguagelevel',jsonData.data.language_level)\r",
									"\r",
									"\r",
									"pm.test(\"To get the lang user id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"languserid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"User Language id\", function () {\r",
									"    pm.expect(jsonData.data.language_id).to.eql(pm.environment.get(\"userlanguageid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language\", function () {\r",
									"    pm.expect(jsonData.data.language).to.eql(pm.environment.get(\"userlanguage\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get the language level id\", function () {\r",
									"    pm.expect(jsonData.data.language_level_id).to.eql(pm.environment.get(\"userlanguagelevelid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language level\", function () {\r",
									"    pm.expect(jsonData.data.language_level).to.eql(pm.environment.get(\"userlanguagelevel\"));\r",
									"});\r",
									"\r",
									""
								],
								"id": "4584eff0-33ed-4f7c-ac56-6a5edf6cc0cf"
							}
						}
					],
					"_postman_id": "6ef353c2-f8c1-407f-b087-38f64e3f56e0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language_id\": \"IT\",\n    \"language_level_id\": 3\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/languages"
					},
					"response": []
				},
				{
					"name": "Add Language-Japanese",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('languserid',jsonData.data.id)\r",
									"pm.environment.set('userlanguageid',jsonData.data.language_id)\r",
									"pm.environment.set('userlanguage',jsonData.data.language)\r",
									"pm.environment.set('userlanguagelevelid',jsonData.data.language_level_id)\r",
									"pm.environment.set('userlanguagelevel',jsonData.data.language_level)\r",
									"\r",
									"\r",
									"pm.test(\"To get the lang user id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"languserid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"User Language id\", function () {\r",
									"    pm.expect(jsonData.data.language_id).to.eql(pm.environment.get(\"userlanguageid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language\", function () {\r",
									"    pm.expect(jsonData.data.language).to.eql(pm.environment.get(\"userlanguage\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get the language level id\", function () {\r",
									"    pm.expect(jsonData.data.language_level_id).to.eql(pm.environment.get(\"userlanguagelevelid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language level\", function () {\r",
									"    pm.expect(jsonData.data.language_level).to.eql(pm.environment.get(\"userlanguagelevel\"));\r",
									"});\r",
									"\r",
									""
								],
								"id": "46356cb6-c28b-4909-bab7-82b2f48475bf"
							}
						}
					],
					"_postman_id": "b4d7ff62-f457-4431-97e0-3d592e659dfc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language_id\": \"JA\",\n    \"language_level_id\": 2\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/languages"
					},
					"response": []
				},
				{
					"name": "Add Language-Portugese",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('languserid',jsonData.data.id)\r",
									"pm.environment.set('userlanguageid',jsonData.data.language_id)\r",
									"pm.environment.set('userlanguage',jsonData.data.language)\r",
									"pm.environment.set('userlanguagelevelid',jsonData.data.language_level_id)\r",
									"pm.environment.set('userlanguagelevel',jsonData.data.language_level)\r",
									"\r",
									"\r",
									"pm.test(\"To get the lang user id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"languserid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"User Language id\", function () {\r",
									"    pm.expect(jsonData.data.language_id).to.eql(pm.environment.get(\"userlanguageid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language\", function () {\r",
									"    pm.expect(jsonData.data.language).to.eql(pm.environment.get(\"userlanguage\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get the language level id\", function () {\r",
									"    pm.expect(jsonData.data.language_level_id).to.eql(pm.environment.get(\"userlanguagelevelid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language level\", function () {\r",
									"    pm.expect(jsonData.data.language_level).to.eql(pm.environment.get(\"userlanguagelevel\"));\r",
									"});\r",
									"\r",
									""
								],
								"id": "e839d042-922e-45e2-88c4-c0ca18480631"
							}
						}
					],
					"_postman_id": "569c05a7-8393-4a77-bcc1-96a0651529ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language_id\": \"PT\",\n    \"language_level_id\": 4\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/languages"
					},
					"response": []
				},
				{
					"name": "Add Language-Russian",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('languserid',jsonData.data.id)\r",
									"pm.environment.set('userlanguageid',jsonData.data.language_id)\r",
									"pm.environment.set('userlanguage',jsonData.data.language)\r",
									"pm.environment.set('userlanguagelevelid',jsonData.data.language_level_id)\r",
									"pm.environment.set('userlanguagelevel',jsonData.data.language_level)\r",
									"\r",
									"\r",
									"pm.test(\"To get the lang user id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"languserid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"User Language id\", function () {\r",
									"    pm.expect(jsonData.data.language_id).to.eql(pm.environment.get(\"userlanguageid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language\", function () {\r",
									"    pm.expect(jsonData.data.language).to.eql(pm.environment.get(\"userlanguage\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get the language level id\", function () {\r",
									"    pm.expect(jsonData.data.language_level_id).to.eql(pm.environment.get(\"userlanguagelevelid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language level\", function () {\r",
									"    pm.expect(jsonData.data.language_level).to.eql(pm.environment.get(\"userlanguagelevel\"));\r",
									"});\r",
									"\r",
									""
								],
								"id": "927a1336-456f-43ac-ae00-ab27048c6926"
							}
						}
					],
					"_postman_id": "45656ae9-8215-410e-95ea-09bc59c01efd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language_id\": \"RU\",\n    \"language_level_id\": 2\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/languages"
					},
					"response": []
				},
				{
					"name": "Add Language-Spanish",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('languserid',jsonData.data.id)\r",
									"pm.environment.set('userlanguageid',jsonData.data.language_id)\r",
									"pm.environment.set('userlanguage',jsonData.data.language)\r",
									"pm.environment.set('userlanguagelevelid',jsonData.data.language_level_id)\r",
									"pm.environment.set('userlanguagelevel',jsonData.data.language_level)\r",
									"\r",
									"\r",
									"pm.test(\"To get the lang user id\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"languserid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"User Language id\", function () {\r",
									"    pm.expect(jsonData.data.language_id).to.eql(pm.environment.get(\"userlanguageid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language\", function () {\r",
									"    pm.expect(jsonData.data.language).to.eql(pm.environment.get(\"userlanguage\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get the language level id\", function () {\r",
									"    pm.expect(jsonData.data.language_level_id).to.eql(pm.environment.get(\"userlanguagelevelid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language level\", function () {\r",
									"    pm.expect(jsonData.data.language_level).to.eql(pm.environment.get(\"userlanguagelevel\"));\r",
									"});\r",
									"\r",
									""
								],
								"id": "8a17c0dd-bdae-411e-acb1-625f1d036302"
							}
						}
					],
					"_postman_id": "0e26d1ab-f34e-4145-9ac2-87e3f032ec90",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language_id\": \"ES\",\n    \"language_level_id\": 4\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/languages"
					},
					"response": []
				},
				{
					"name": "Add Language-wrong lang id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.environment.get(\"variable_key\");\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"invalid\");\r",
									"});\r",
									"\r",
									"pm.test(\"Language id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.language_id[0]).to.include(\"invalid\");\r",
									"});\r",
									"\r",
									""
								],
								"id": "708217d0-af68-4470-bc89-841d94c0f1f3"
							}
						}
					],
					"_postman_id": "40711e74-dd64-4f73-8f97-75230a2779df",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language_id\": \"IY\",\n    \"language_level_id\": 3\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/languages"
					},
					"response": []
				},
				{
					"name": "Add Language-empty lang id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Language id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.language_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									""
								],
								"id": "e1afc9fe-0c16-4922-abc8-cbd14c4e5997"
							}
						}
					],
					"_postman_id": "aedc2a54-4476-4e16-8fb9-619d9877b452",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language_id\": \"\",\n    \"language_level_id\": 3\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/languages"
					},
					"response": []
				},
				{
					"name": "Add Language-Maximum lang level",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"invalid\");\r",
									"});\r",
									"\r",
									"pm.test(\"Language id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.language_level_id[0]).to.include(\"invalid\");\r",
									"});\r",
									"\r",
									""
								],
								"id": "fcbbc0fc-50d6-4a54-a10e-ca61cb8713d7"
							}
						}
					],
					"_postman_id": "877b3c7e-0d06-4e32-924f-6cd31ef0b3fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language_id\": \"IT\",\n    \"language_level_id\": 5\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/languages"
					},
					"response": []
				},
				{
					"name": "Add Language-null lang level",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"invalid\");\r",
									"});\r",
									"\r",
									"pm.test(\"Language id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.language_level_id[0]).to.include(\"invalid\");\r",
									"});\r",
									"\r",
									""
								],
								"id": "339c1fcf-2c75-4279-97c6-85ec5962cb68"
							}
						}
					],
					"_postman_id": "87c1d26c-ea85-4889-b166-21ce21a95aba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language_id\": \"IT\",\n    \"language_level_id\": 0\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/languages"
					},
					"response": []
				},
				{
					"name": "Add Language-empty lang level",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Language id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.language_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Language Level id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.language_level_id[0]).to.include(\"required\");\r",
									"});"
								],
								"id": "fffa9224-2949-41d0-9505-0634c17f36a6"
							}
						}
					],
					"_postman_id": "ca70a7f1-fec9-4412-bd1c-637d9c4588cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language_id\": \"IT\",\n    \"language_level_id\": \n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/languages"
					},
					"response": []
				},
				{
					"name": "Delete Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"id": "946845ae-965f-4482-a45f-a13008c0fd49"
							}
						}
					],
					"_postman_id": "2211dd08-2ba4-4b27-93b8-d63f64b06f4e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/languages/:skill_id",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"languages",
								":skill_id"
							],
							"variable": [
								{
									"id": "666c2730-83f0-408a-b4a4-d6b0a9b81a0c",
									"key": "skill_id",
									"value": "{{languserid}}",
									"description": "Primary key of skill of interest",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Languages",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('languserid',jsonData.data[0,1,2,3,4,5,6,7,8,9].id)\r",
									"pm.environment.set('userlanguageid',jsonData.data[0,1,2,3,4,5,6,7,8,9].language_id)\r",
									"pm.environment.set('userlanguage',jsonData.data[0,1,2,3,4,5,6,7,8,9].language)\r",
									"pm.environment.set('userlanguagelevelid',jsonData.data[0,1,2,3,4,5,6,7,8,9].language_level_id)\r",
									"pm.environment.set('userlanguagelevel',jsonData.data[0,1,2,3,4,5,6,7,8,9].language_level)\r",
									"\r",
									"\r",
									"pm.test(\"To get the lang user id\", function () {\r",
									"    pm.expect(jsonData.data[0,1,2,3,4,5,6,7,8,9].id).to.eql(pm.environment.get(\"languserid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"User Language id\", function () {\r",
									"    pm.expect(jsonData.data[0,1,2,3,4,5,6,7,8,9].language_id).to.eql(pm.environment.get(\"userlanguageid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language\", function () {\r",
									"    pm.expect(jsonData.data[0,1,2,3,4,5,6,7,8,9].language).to.eql(pm.environment.get(\"userlanguage\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get the language level id\", function () {\r",
									"    pm.expect(jsonData.data[0,1,2,3,4,5,6,7,8,9].language_level_id).to.eql(pm.environment.get(\"userlanguagelevelid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"To get language level\", function () {\r",
									"    pm.expect(jsonData.data[0,1,2,3,4,5,6,7,8,9].language_level).to.eql(pm.environment.get(\"userlanguagelevel\"));\r",
									"});\r",
									"\r",
									""
								],
								"id": "c5610e35-b471-42fd-a46f-e90a57da5ec9"
							}
						}
					],
					"_postman_id": "33f3dd26-759c-4a9a-ac4f-1a5312a6e1bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{borderless_service_url}}/api/v1/talents/languages"
					},
					"response": []
				}
			],
			"_postman_id": "0f83b32a-44f2-46f0-81ba-81e2a6d0cf30"
		},
		{
			"name": "Experiences",
			"item": [
				{
					"name": "Update Experience",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									" var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('exid',jsonData.data.id)\r",
									"pm.environment.set('exenabled',jsonData.data.enabled)\r",
									"pm.environment.set('excompanyname',jsonData.data.company_name)\r",
									"pm.environment.set('excountryid',jsonData.data.country_id)\r",
									"pm.environment.set('exstateid',jsonData.data.state_id) \r",
									"pm.environment.set('exseniorityid',jsonData.data.seniority_id)\r",
									"pm.environment.set('extitleid',jsonData.data.title_id)\r",
									"pm.environment.set('exdescription',jsonData.data.description)\r",
									"pm.environment.set('exindustryid',jsonData.data.industry_id)\r",
									"pm.environment.set('exstartdate',jsonData.data.start_date)\r",
									"pm.environment.set('exenddate',jsonData.data.end_date)\r",
									"\r",
									"pm.test(\"The get the experience info\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"exid\"));\r",
									"    pm.expect(jsonData.data.enabled).to.eql(pm.environment.get(\"exenabled\"));\r",
									"    pm.expect(jsonData.data.company_name).to.eql(pm.environment.get(\"excompanyname\"));\r",
									"    pm.expect(jsonData.data.country_id).to.eql(pm.environment.get(\"excountryid\"));\r",
									"    pm.expect(jsonData.data.state_id).to.eql(pm.environment.get(\"exstateid\"));\r",
									"    pm.expect(jsonData.data.seniority_id).to.eql(pm.environment.get(\"exseniorityid\"));\r",
									"     pm.expect(jsonData.data.title_id).to.eql(pm.environment.get(\"extitleid\"));\r",
									"     pm.expect(jsonData.data.description).to.eql(pm.environment.get(\"exdescription\"));\r",
									"     pm.expect(jsonData.data.industry_id).to.eql(pm.environment.get(\"exindustryid\"));\r",
									"     });"
								],
								"id": "17794eff-7c21-4548-b029-a3b99b2671e8"
							}
						}
					],
					"_postman_id": "1a4d6152-844d-4822-bd79-6588d06df4ef",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{talent_access_token}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enabled\": 1,\n    \"company_name\": \"Aja Okuta\",\n    \"description\": \"backend Engineer\",\n    \"seniority_id\": 3,\n    \"title_id\": 9,\n    \"industry_id\": 19,\n    \"start_date\": \"2019-11-01\",\n    \"end_date\": null,\n    \"state_id\": 3,\n    \"country_id\": \"CA\",\n    \"skills\": [1,8,5]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/experiences/:experience_id",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"experiences",
								":experience_id"
							],
							"variable": [
								{
									"id": "5b055ce5-2f22-434f-900c-5c9a8027e95f",
									"key": "experience_id",
									"value": "{{experiencesid0}}",
									"description": "Primary key of experience of interest",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Experience-Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.environment.set('degreeid',jsonData.data.degree_id)\r",
									"pm.environment.set('educationtitle',jsonData.data.title)\r",
									"pm.environment.set('educationinstitution',jsonData.data.institution)\r",
									"pm.environment.set('educationstartdate',jsonData.data.start_date)\r",
									"pm.environment.set('educationtalentid',jsonData.data.talent_id)\r",
									"pm.environment.set('educationdataid',jsonData.data.id)\r",
									"pm.environment.set('talentid',jsonData.data.talent.id)\r",
									"pm.environment.set('talentemail',jsonData.data.talent.email)\r",
									"pm.environment.set('talentavatar',jsonData.data.talent.avatar)\r",
									"pm.environment.set('jobstatusid',jsonData.data.talent.job_status_id)\r",
									"pm.environment.set('remotetypeid',jsonData.data.talent.remote_type_id)\r",
									"pm.environment.set('getnotifications',jsonData.data.talent.get_notifications)\r",
									"pm.environment.set('getmatches',jsonData.data.talent.get_matches)\r",
									"pm.environment.set('talentactive',jsonData.data.talent.active)\r",
									"pm.environment.set('salarycurrencyid',jsonData.data.talent.salary_currency_id)\r",
									"\r",
									"pm.environment.set('resumesid0',jsonData.data.talent.resumes[0].id)\r",
									"pm.environment.set('resumestalentid0',jsonData.data.talent.resumes[0].talent_id)\r",
									"pm.environment.set('resumesname0',jsonData.data.talent.resumes[0].name)\r",
									"pm.environment.set('resumesfilename0',jsonData.data.talent.resumes[0].file_name)\r",
									"\r",
									"pm.environment.set('skillsid0',jsonData.data.talent.skills[0].id)\r",
									"pm.environment.set('skillstalentid0',jsonData.data.talent.skills[0].talent_id)\r",
									"pm.environment.set('skillsskillid0',jsonData.data.talent.skills[0].skill_id)\r",
									"pm.environment.set('skillsprimaryid0',jsonData.data.talent.skills[0].is_primary)\r",
									"pm.environment.set('skillssecondaryid0',jsonData.data.talent.skills[0].is_secondary)\r",
									"pm.environment.set('skilllevelid0',jsonData.data.talent.skills[0].skill_level_id)\r",
									"\r",
									"pm.environment.set('experiencesid0',jsonData.data.talent.experiences[0].id)\r",
									"pm.environment.set('experiencestalentid0',jsonData.data.talent.experiences[0].talent_id)\r",
									"pm.environment.set('experiencescompanyname0',jsonData.data.talent.experiences[0].company_name)\r",
									"pm.environment.set('experiencesstateid0',jsonData.data.talent.experiences[0].state_id)\r",
									"pm.environment.set('experiencescountryid0',jsonData.data.talent.experiences[0].country_id)\r",
									"pm.environment.set('experiencesseniorityid0',jsonData.data.talent.experiences[0].seniority_id)\r",
									"pm.environment.set('experiencestitleid0',jsonData.data.talent.experiences[0].title_id)\r",
									"pm.environment.set('experiencesdescription0',jsonData.data.talent.experiences[0].description)\r",
									"pm.environment.set('experiencesindustryid0',jsonData.data.talent.experiences[0].industry_id)\r",
									"\r",
									"\r",
									"pm.environment.set('educationid0',jsonData.data.talent.educations[0].id)\r",
									"pm.environment.set('educationtalentid0',jsonData.data.talent.educations[0].talent_id)\r",
									"pm.environment.set('educationdegreeid0',jsonData.data.talent.educations[0].degree_id)\r",
									"pm.environment.set('educationid1',jsonData.data.talent.educations[1,2,3,4,5].id)\r",
									"pm.environment.set('educationtalentid1',jsonData.data.talent.educations[1,2,3,4,5].talent_id)\r",
									"pm.environment.set('educationdegreeid1',jsonData.data.talent.educations[1,2,3,4,5].degree_id)\r",
									"\r",
									"\r",
									"pm.test(\"The get the Degree id\", function () {\r",
									"    pm.expect(jsonData.data.degree_id).to.eql(pm.environment.get(\"degreeid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The get User's title\", function () {\r",
									"    pm.expect(jsonData.data.title).to.eql(pm.environment.get(\"educationtitle\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The get User's institution\", function () {\r",
									"    pm.expect(jsonData.data.institution).to.eql(pm.environment.get(\"educationinstitution\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The get the Start Date\", function () {\r",
									"    pm.expect(jsonData.data.start_date).to.eql(pm.environment.get(\"educationstartdate\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The get the Talent id\", function () {\r",
									"    pm.expect(jsonData.data.talent_id).to.eql(pm.environment.get(\"educationtalentid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The get the id\", function () {\r",
									"   pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"educationdataid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The get the id under talent\", function () {\r",
									"    pm.expect(jsonData.data.talent.id).to.eql(pm.environment.get(\"talentid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The get the user email\", function () {\r",
									"    pm.expect(jsonData.data.talent.email).to.eql(pm.environment.get(\"talentemail\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The get the user avatar\", function () {\r",
									"    pm.expect(jsonData.data.talent.avatar).to.eql(pm.environment.get(\"talentavatar\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The get the user job status id\", function () {\r",
									"    pm.expect(jsonData.data.talent.job_status_id).to.eql(pm.environment.get(\"jobstatusid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The get the user remote type id\", function () {\r",
									"    pm.expect(jsonData.data.talent.remote_type_id).to.eql(pm.environment.get(\"remotetypeid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The get the user gets notifications\", function () {\r",
									"    pm.expect(jsonData.data.talent.get_notifications).to.eql(pm.environment.get(\"getnotifications\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The get the user gets matches\", function () {\r",
									"    pm.expect(jsonData.data.talent.get_matches).to.eql(pm.environment.get(\"getmatches\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The get the user active\", function () {\r",
									"    pm.expect(jsonData.data.talent.active).to.eql(pm.environment.get(\"talentactive\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"The get the user salary currency id\", function () {\r",
									"    pm.expect(jsonData.data.talent.salary_currency_id).to.eql(pm.environment.get(\"salarycurrencyid\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The get the user resumes id\", function () {\r",
									"    pm.expect(jsonData.data.talent.resumes[0].id).to.eql(pm.environment.get(\"resumesid0\"));\r",
									"    });\r",
									"pm.test(\"The get the user resumes talent id\", function () {\r",
									"    pm.expect(jsonData.data.talent.resumes[0].talent_id).to.eql(pm.environment.get(\"resumestalentid0\"));\r",
									"    });\r",
									"pm.test(\"The get the user resumes name\", function () {\r",
									"    pm.expect(jsonData.data.talent.resumes[0].name).to.eql(pm.environment.get(\"resumesname0\"));\r",
									"    });\r",
									"pm.test(\"The get the user resumes talent id\", function () {\r",
									"    pm.expect(jsonData.data.talent.resumes[0].file_name).to.eql(pm.environment.get(\"resumesfilename0\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user skills id\", function () {\r",
									"    pm.expect(jsonData.data.talent.skills[0].id).to.eql(pm.environment.get(\"skillsid0\"));\r",
									"    });\r",
									"pm.test(\"The get the user skills talent id\", function () {\r",
									"    pm.expect(jsonData.data.talent.skills[0].talent_id).to.eql(pm.environment.get(\"skillstalentid0\"));\r",
									"    });\r",
									"pm.test(\"The get the user skills skill id\", function () {\r",
									"    pm.expect(jsonData.data.talent.skills[0].skill_id).to.eql(pm.environment.get(\"skillsskillid0\"));\r",
									"    });\r",
									"pm.test(\"The get the user skills primary id\", function () {\r",
									"    pm.expect(jsonData.data.talent.skills[0].is_primary).to.eql(pm.environment.get(\"skillsprimaryid0\"));\r",
									"    });\r",
									"pm.test(\"The get the user skills secondary id\", function () {\r",
									"    pm.expect(jsonData.data.talent.skills[0].is_secondary).to.eql(pm.environment.get(\"skillssecondaryid0\"));\r",
									"    });\r",
									"pm.test(\"The get the user skills level id\", function () {\r",
									"    pm.expect(jsonData.data.talent.skills[0].skill_level_id).to.eql(pm.environment.get(\"skilllevelid0\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user experience id\", function () {\r",
									"    pm.expect(jsonData.data.talent.experiences[0].id).to.eql(pm.environment.get(\"experiencesid0\"));\r",
									"    });\r",
									"pm.test(\"The get the user experience talent id\", function () {\r",
									"    pm.expect(jsonData.data.talent.experiences[0].talent_id).to.eql(pm.environment.get(\"experiencestalentid0\"));\r",
									"    });\r",
									"pm.test(\"The get the user experience company name id\", function () {\r",
									"    pm.expect(jsonData.data.talent.experiences[0].company_name).to.eql(pm.environment.get(\"experiencescompanyname0\"));\r",
									"    });\r",
									"pm.test(\"The get the user experience state id\", function () {\r",
									"    pm.expect(jsonData.data.talent.experiences[0].state_id).to.eql(pm.environment.get(\"experiencesstateid0\"));\r",
									"    });\r",
									"pm.test(\"The get the user experience country id\", function () {\r",
									"    pm.expect(jsonData.data.talent.experiences[0].country_id).to.eql(pm.environment.get(\"experiencescountryid0\"));\r",
									"    });\r",
									"pm.test(\"The get the user experience seniority id\", function () {\r",
									"    pm.expect(jsonData.data.talent.experiences[0].seniority_id).to.eql(pm.environment.get(\"experiencesseniorityid0\"));\r",
									"    });\r",
									"pm.test(\"The get the user experience title id\", function () {\r",
									"    pm.expect(jsonData.data.talent.experiences[0].title_id).to.eql(pm.environment.get(\"experiencestitleid0\"));\r",
									"    });\r",
									"pm.test(\"The get the user experience description id\", function () {\r",
									"    pm.expect(jsonData.data.talent.experiences[0].description).to.eql(pm.environment.get(\"experiencesdescription0\"));\r",
									"    });\r",
									"pm.test(\"The get the user experience industry id\", function () {\r",
									"    pm.expect(jsonData.data.talent.experiences[0].industry_id).to.eql(pm.environment.get(\"experiencesindustryid0\"));\r",
									"    });\r",
									"\r",
									"pm.test(\"The get the user educations id\", function () {\r",
									"    pm.expect(jsonData.data.talent.educations[0].id).to.eql(pm.environment.get(\"educationid0\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The get the user educations talent id\", function () {\r",
									"    pm.expect(jsonData.data.talent.educations[0].talent_id).to.eql(pm.environment.get(\"educationtalentid0\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The get the user educations degree id\", function () {\r",
									"    pm.expect(jsonData.data.talent.educations[0].degree_id).to.eql(pm.environment.get(\"educationdegreeid0\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"The get the user educations id 1 - 9\", function () {\r",
									"    pm.expect(jsonData.data.talent.educations[1,2,3,4,5].id).to.eql(pm.environment.get(\"educationid1\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The get the user educations talent id 1-9\", function () {\r",
									"    pm.expect(jsonData.data.talent.educations[1,2,3,4,5].talent_id).to.eql(pm.environment.get(\"educationtalentid1\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The get the user educations degree id\", function () {\r",
									"    pm.expect(jsonData.data.talent.educations[1,2,3,4,5].degree_id).to.eql(pm.environment.get(\"educationdegreeid1\"));\r",
									"});"
								],
								"id": "2b0ae7d3-6077-4876-8fb1-7845a11ee67a"
							}
						}
					],
					"_postman_id": "cbe0b313-369f-4d05-87a3-0e0d713c444a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{talent_access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enabled\": 1,\n    \"company_name\": \"Borderless HR\",\n    \"description\": \"Fullstack Engineer\",\n    \"seniority_id\": 3,\n    \"title_id\": 13,\n    \"industry_id\": 18,\n    \"start_date\": \"2020-05-01\",\n    \"end_date\": null,\n    \"state_id\": 8,\n    \"country_id\": \"CA\",\n    \"skills\": [1,5,6] \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/experiences"
					},
					"response": []
				},
				{
					"name": "Add Experience-empty company name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Company name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.company_name[0]).to.include(\"required\");\r",
									"});"
								],
								"id": "5076e6fc-ab43-4da0-ba35-ee828278c43f"
							}
						}
					],
					"_postman_id": "2cf98d16-ec6f-43a5-8864-c2c6b841caab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{talent_access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enabled\": 1,\n    \"company_name\": \"\",\n    \"description\": \"Fullstack Engineer\",\n    \"seniority_id\": 3,\n    \"title_id\": 13,\n    \"industry_id\": 18,\n    \"start_date\": \"2020-05-01\",\n    \"end_date\": null,\n    \"state_id\": 8,\n    \"country_id\": \"CA\",\n    \"skills\": [1,5,6] \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/experiences"
					},
					"response": []
				},
				{
					"name": "Add Experience-empty description",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Description\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.description[0]).to.include(\"required\");\r",
									"});"
								],
								"id": "ee5d8fb5-b8f9-4d79-aa63-3f1a5506ffc0"
							}
						}
					],
					"_postman_id": "12fde5e2-abd8-4e28-b32e-b7e36d974a5f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{talent_access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enabled\": 1,\n    \"company_name\": \"Borderless HR\",\n    \"description\": \"\",\n    \"seniority_id\": 3,\n    \"title_id\": 13,\n    \"industry_id\": 18,\n    \"start_date\": \"2020-05-01\",\n    \"end_date\": null,\n    \"state_id\": 8,\n    \"country_id\": \"CA\",\n    \"skills\": [1,5,6] \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/experiences"
					},
					"response": []
				},
				{
					"name": "Add Experience-empty seniority id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Seniority id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.seniority_id[0]).to.include(\"required\");\r",
									"});"
								],
								"id": "4c89f377-4d44-409d-b9c0-3e63a8fca0f6"
							}
						}
					],
					"_postman_id": "4bf09b63-556e-40fe-9109-58978e0184bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{talent_access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enabled\": 1,\n    \"company_name\": \"Borderless HR\",\n    \"description\": \"Fullstack Engineer\",\n    \"seniority_id\": ,\n    \"title_id\": 13,\n    \"industry_id\": 18,\n    \"start_date\": \"2020-05-01\",\n    \"end_date\": null,\n    \"state_id\": 8,\n    \"country_id\": \"CA\",\n    \"skills\": [1,5,6] \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/experiences"
					},
					"response": []
				},
				{
					"name": "Add Experience-empty title id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for title id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.title_id[0]).to.include(\"required\");\r",
									"});"
								],
								"id": "4621b47a-5e02-4904-8124-257a4da7ff9c"
							}
						}
					],
					"_postman_id": "4ef1a787-b765-4fad-b14f-d296b02ac64a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{talent_access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enabled\": 1,\n    \"company_name\": \"Borderless HR\",\n    \"description\": \"Fullstack Engineer\",\n    \"seniority_id\": 3,\n    \"title_id\": ,\n    \"industry_id\": 18,\n    \"start_date\": \"2020-05-01\",\n    \"end_date\": null,\n    \"state_id\": 8,\n    \"country_id\": \"CA\",\n    \"skills\": [1,5,6] \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/experiences"
					},
					"response": []
				},
				{
					"name": "Add Experience-empty industry id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Company Name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.company_name[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Description\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.description[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error Message for Seniority id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.seniority_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Title id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.title_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error Message for Industry id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.industry_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for State id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.state_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error Message for Country id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.country_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Start Date\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.start_date[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Skills\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.skills[0]).to.include(\"required\");\r",
									"});"
								],
								"id": "23e6e91d-e9cf-4129-b768-67685f3fc84d"
							}
						}
					],
					"_postman_id": "1ab63f92-5064-456f-8626-4937befae8d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{talent_access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enabled\": 1,\n    \"company_name\": \"Borderless HR\",\n    \"description\": \"Fullstack Engineer\",\n    \"seniority_id\": 3,\n    \"title_id\": 13,\n    \"industry_id\": ,\n    \"start_date\": \"2020-05-01\",\n    \"end_date\": null,\n    \"state_id\": 8,\n    \"country_id\": \"CA\",\n    \"skills\": [1,5,6] \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/experiences"
					},
					"response": []
				},
				{
					"name": "Add Experience-empty start date",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Start Date\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.start_date[0]).to.include(\"required\");\r",
									"});"
								],
								"id": "e433d7d9-3ed3-490b-9cf8-ea48e058dddd"
							}
						}
					],
					"_postman_id": "7697e0b6-c2c9-40e8-8d75-5113f27cd78e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{talent_access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enabled\": 1,\n    \"company_name\": \"Borderless HR\",\n    \"description\": \"Fullstack Engineer\",\n    \"seniority_id\": 3,\n    \"title_id\": 13,\n    \"industry_id\": 18,\n    \"start_date\": \"\",\n    \"end_date\": null,\n    \"state_id\": 8,\n    \"country_id\": \"CA\",\n    \"skills\": [1,5,6] \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/experiences"
					},
					"response": []
				},
				{
					"name": "Add Experience-empty end date",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Company Name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.company_name[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Description\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.description[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error Message for Seniority id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.seniority_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Title id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.title_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error Message for Industry id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.industry_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for State id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.state_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error Message for Country id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.country_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Start Date\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.start_date[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Skills\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.skills[0]).to.include(\"required\");\r",
									"});"
								],
								"id": "3a132485-1e0d-4276-a6c9-9576acb8e43e"
							}
						}
					],
					"_postman_id": "816c8ed5-38e0-448a-bea2-66908b60a6b8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{talent_access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enabled\": 1,\n    \"company_name\": \"Borderless HR\",\n    \"description\": \"Fullstack Engineer\",\n    \"seniority_id\": 3,\n    \"title_id\": 13,\n    \"industry_id\": 18,\n    \"start_date\": \"2020-05-01\",\n    \"end_date\": ,\n    \"state_id\": 8,\n    \"country_id\": \"CA\",\n    \"skills\": [1,5,6] \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/experiences"
					},
					"response": []
				},
				{
					"name": "Add Experience-empty state id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Company Name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.company_name[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Description\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.description[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error Message for Seniority id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.seniority_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Title id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.title_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error Message for Industry id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.industry_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for State id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.state_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error Message for Country id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.country_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Start Date\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.start_date[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Skills\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.skills[0]).to.include(\"required\");\r",
									"});"
								],
								"id": "f4c718b0-42c7-460c-81dc-0e4e9c7bef25"
							}
						}
					],
					"_postman_id": "911d6f1e-7c8a-47d3-9a1b-679bd965d574",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{talent_access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enabled\": 1,\n    \"company_name\": \"Borderless HR\",\n    \"description\": \"Fullstack Engineer\",\n    \"seniority_id\": 3,\n    \"title_id\": 13,\n    \"industry_id\": 18,\n    \"start_date\": \"2020-05-01\",\n    \"end_date\": null,\n    \"state_id\": ,\n    \"country_id\": \"CA\",\n    \"skills\": [1,5,6] \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/experiences"
					},
					"response": []
				},
				{
					"name": "Add Experience-empty country id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Start Date\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.country_id[0]).to.include(\"required\");\r",
									"});"
								],
								"id": "506241ba-c236-427d-a758-5460be6044be"
							}
						}
					],
					"_postman_id": "974c7638-2336-4e21-a333-9d2f2caadc1f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{talent_access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enabled\": 1,\n    \"company_name\": \"Borderless HR\",\n    \"description\": \"Fullstack Engineer\",\n    \"seniority_id\": 3,\n    \"title_id\": 13,\n    \"industry_id\": 18,\n    \"start_date\": \"2020-05-01\",\n    \"end_date\": null,\n    \"state_id\": 8,\n    \"country_id\": \"\",\n    \"skills\": [1,5,6] \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/experiences"
					},
					"response": []
				},
				{
					"name": "Add Experience-empty skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Company Name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.company_name[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Description\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.description[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error Message for Seniority id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.seniority_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Title id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.title_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error Message for Industry id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.industry_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for State id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.state_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error Message for Country id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.country_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Start Date\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.start_date[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Skills\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.skills[0]).to.include(\"required\");\r",
									"});"
								],
								"id": "d63dff97-80d5-438c-864d-94c5a4b52a13"
							}
						}
					],
					"_postman_id": "6608895a-7192-441a-a746-3586c7d80ac8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{talent_access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enabled\": 1,\n    \"company_name\": \"Borderless HR\",\n    \"description\": \"Fullstack Engineer\",\n    \"seniority_id\": 3,\n    \"title_id\": 13,\n    \"industry_id\": 18,\n    \"start_date\": \"2020-05-01\",\n    \"end_date\": null,\n    \"state_id\": 8,\n    \"country_id\": \"CA\",\n    \"skills\":  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/experiences"
					},
					"response": []
				},
				{
					"name": "Add Experience-empty skill unit",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Company Name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.company_name[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Description\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.description[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error Message for Seniority id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.seniority_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Title id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.title_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error Message for Industry id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.industry_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for State id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.state_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error Message for Country id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.country_id[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Start Date\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.start_date[0]).to.include(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message for Skills\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors.skills[0]).to.include(\"required\");\r",
									"});"
								],
								"id": "1f5c7f5b-367a-42b5-8ed3-61464c375ff9"
							}
						}
					],
					"_postman_id": "38f44f4d-a885-4f17-b1e3-16496f9f8d5d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{talent_access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enabled\": 1,\n    \"company_name\": \"Borderless HR\",\n    \"description\": \"Fullstack Engineer\",\n    \"seniority_id\": 3,\n    \"title_id\": 13,\n    \"industry_id\": 18,\n    \"start_date\": \"2020-05-01\",\n    \"end_date\": null,\n    \"state_id\": 8,\n    \"country_id\": \"CA\",\n    \"skills\": [1,5,] \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/experiences"
					},
					"response": []
				},
				{
					"name": "Delete Experience",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"id": "1dfc799d-bf74-43e0-aa2a-7413eb64d2d6"
							}
						}
					],
					"_postman_id": "c717ff97-e49e-45d7-a4e5-d5d8d2d8a7eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/experiences/:experience_id",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"experiences",
								":experience_id"
							],
							"query": [
								{
									"key": "key",
									"value": "INTEGER",
									"description": "0-based index of entrty to delete from cached resumes",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "a8f22165-b5db-49d6-afd7-638a8fa27aad",
									"key": "experience_id",
									"value": "{{experiencesid0}}",
									"description": "Primary key of experience of interest",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Experiences",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('exid',jsonData.data[0,1,2,3].id)\r",
									"pm.environment.set('exenabled',jsonData.data[0,1,2,3].enabled)\r",
									"pm.environment.set('excompanyname',jsonData.data[0,1,2,3].company_name)\r",
									"pm.environment.set('exdescription',jsonData.data[0,1,2,3].description)\r",
									"pm.environment.set('exseniorityid',jsonData.data[0,1,2,3].seniority_id)\r",
									"pm.environment.set('exseniority',jsonData.data[0,1,2,3].seniority)\r",
									"pm.environment.set('extitleid',jsonData.data[0,1,2,3].title_id)\r",
									"pm.environment.set('extitle',jsonData.data[0,1,2,3].title)\r",
									"pm.environment.set('exindustryid',jsonData.data[0,1,2,3].industry_id)\r",
									"pm.environment.set('exindustry',jsonData.data[0,1,2,3].industry)\r",
									"pm.environment.set('exstartdate',jsonData.data[0,1,2,3].start_date)\r",
									"pm.environment.set('exstateid',jsonData.data[0,1,2,3].state_id)\r",
									"pm.environment.set('exstate',jsonData.data[0,1,2,3].state)\r",
									"pm.environment.set('excountryid',jsonData.data[0,1,2,3].country_id)\r",
									"pm.environment.set('excountry',jsonData.data[0,1,2,3].country)\r",
									"\r",
									"pm.environment.set('exskid00',jsonData.data[0].skills[0].id)\r",
									"pm.environment.set('exskname00',jsonData.data[0].skills[0].name)\r",
									"pm.environment.set('exskenabled00',jsonData.data[0].skills[0].enabled)\r",
									"pm.environment.set('exskid01',jsonData.data[0].skills[1].id)\r",
									"pm.environment.set('exskname01',jsonData.data[0].skills[1].name)\r",
									"pm.environment.set('exskenabled01',jsonData.data[0].skills[1].enabled)\r",
									"pm.environment.set('exskid02',jsonData.data[0].skills[2].id)\r",
									"pm.environment.set('exskname02',jsonData.data[0].skills[2].name)\r",
									"pm.environment.set('exskenabled02',jsonData.data[0].skills[2].enabled)\r",
									"\r",
									"pm.environment.set('exskid10',jsonData.data[1].skills[0].id)\r",
									"pm.environment.set('exskname10',jsonData.data[1].skills[0].name)\r",
									"pm.environment.set('exskenabled10',jsonData.data[1].skills[0].enabled)\r",
									"pm.environment.set('exskid11',jsonData.data[1].skills[1].id)\r",
									"pm.environment.set('exskname11',jsonData.data[1].skills[1].name)\r",
									"pm.environment.set('exskenabled11',jsonData.data[1].skills[1].enabled)\r",
									"pm.environment.set('exskid12',jsonData.data[1].skills[2].id)\r",
									"pm.environment.set('exskname12',jsonData.data[1].skills[2].name)\r",
									"pm.environment.set('exskenabled12',jsonData.data[1].skills[2].enabled)\r",
									"\r",
									"pm.environment.set('exskid20',jsonData.data[2].skills[0].id)\r",
									"pm.environment.set('exskname20',jsonData.data[2].skills[0].name)\r",
									"pm.environment.set('exskenabled20',jsonData.data[2].skills[0].enabled)\r",
									"pm.environment.set('exskid21',jsonData.data[2].skills[1].id)\r",
									"pm.environment.set('exskname21',jsonData.data[2].skills[1].name)\r",
									"pm.environment.set('exskenabled21',jsonData.data[2].skills[1].enabled)\r",
									"pm.environment.set('exskid22',jsonData.data[2].skills[2].id)\r",
									"pm.environment.set('exskname22',jsonData.data[2].skills[2].name)\r",
									"pm.environment.set('exskenabled22',jsonData.data[2].skills[2].enabled)\r",
									"\r",
									"pm.environment.set('exskid30',jsonData.data[3].skills[0].id)\r",
									"pm.environment.set('exskname30',jsonData.data[3].skills[0].name)\r",
									"pm.environment.set('exskenabled30',jsonData.data[3].skills[0].enabled)\r",
									"pm.environment.set('exskid31',jsonData.data[3].skills[1].id)\r",
									"pm.environment.set('exskname31',jsonData.data[3].skills[1].name)\r",
									"pm.environment.set('exskenabled31',jsonData.data[3].skills[1].enabled)\r",
									"pm.environment.set('exskid32',jsonData.data[3].skills[2].id)\r",
									"pm.environment.set('exskname32',jsonData.data[3].skills[2].name)\r",
									"pm.environment.set('exskenabled32',jsonData.data[3].skills[2].enabled)\r",
									"\r",
									"pm.test(\"User details\", function () {\r",
									"    pm.expect(jsonData.data[0,1,2,3].id).to.eql(pm.environment.get(\"exid\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3].enabled).to.eql(pm.environment.get(\"exenabled\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3].company_name).to.eql(pm.environment.get(\"excompanyname\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3].description).to.eql(pm.environment.get(\"exdescription\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3].seniority_id).to.eql(pm.environment.get(\"exseniorityid\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3].seniority).to.eql(pm.environment.get(\"exseniority\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3].title_id).to.eql(pm.environment.get(\"extitleid\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3].title).to.eql(pm.environment.get(\"extitle\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3].industry_id).to.eql(pm.environment.get(\"exindustryid\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3].industry).to.eql(pm.environment.get(\"exindustry\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3].start_date).to.eql(pm.environment.get(\"exstartdate\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3].state_id).to.eql(pm.environment.get(\"exstateid\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3].state).to.eql(pm.environment.get(\"exstate\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3].country_id).to.eql(pm.environment.get(\"excountryid\"));\r",
									"    pm.expect(jsonData.data[0,1,2,3].country).to.eql(pm.environment.get(\"excountry\"));\r",
									"    pm.expect(jsonData.data[0].skills[0].id).to.eql(pm.environment.get(\"exskid00\"));\r",
									"    pm.expect(jsonData.data[0].skills[0].name).to.eql(pm.environment.get(\"exskname00\"));\r",
									"    pm.expect(jsonData.data[0].skills[0].enabled).to.eql(pm.environment.get(\"exskenabled00\"));\r",
									"    pm.expect(jsonData.data[0].skills[1].id).to.eql(pm.environment.get(\"exskid01\"));\r",
									"    pm.expect(jsonData.data[0].skills[1].name).to.eql(pm.environment.get(\"exskname01\"));\r",
									"    pm.expect(jsonData.data[0].skills[1].enabled).to.eql(pm.environment.get(\"exskenabled01\"));\r",
									"    pm.expect(jsonData.data[0].skills[2].id).to.eql(pm.environment.get(\"exskid02\"));\r",
									"    pm.expect(jsonData.data[0].skills[2].name).to.eql(pm.environment.get(\"exskname02\"));\r",
									"    pm.expect(jsonData.data[0].skills[2].enabled).to.eql(pm.environment.get(\"exskenabled02\"));\r",
									"\r",
									"    pm.expect(jsonData.data[1].skills[0].id).to.eql(pm.environment.get(\"exskid10\"));\r",
									"    pm.expect(jsonData.data[1].skills[0].name).to.eql(pm.environment.get(\"exskname10\"));\r",
									"    pm.expect(jsonData.data[1].skills[0].enabled).to.eql(pm.environment.get(\"exskenabled10\"));\r",
									"    pm.expect(jsonData.data[1].skills[1].id).to.eql(pm.environment.get(\"exskid11\"));\r",
									"    pm.expect(jsonData.data[1].skills[1].name).to.eql(pm.environment.get(\"exskname11\"));\r",
									"    pm.expect(jsonData.data[1].skills[1].enabled).to.eql(pm.environment.get(\"exskenabled11\"));\r",
									"    pm.expect(jsonData.data[1].skills[2].id).to.eql(pm.environment.get(\"exskid12\"));\r",
									"    pm.expect(jsonData.data[1].skills[2].name).to.eql(pm.environment.get(\"exskname12\"));\r",
									"    pm.expect(jsonData.data[1].skills[2].enabled).to.eql(pm.environment.get(\"exskenabled12\"));\r",
									"\r",
									"    pm.expect(jsonData.data[2].skills[0].id).to.eql(pm.environment.get(\"exskid20\"));\r",
									"    pm.expect(jsonData.data[2].skills[0].name).to.eql(pm.environment.get(\"exskname20\"));\r",
									"    pm.expect(jsonData.data[2].skills[0].enabled).to.eql(pm.environment.get(\"exskenabled20\"));\r",
									"    pm.expect(jsonData.data[2].skills[1].id).to.eql(pm.environment.get(\"exskid21\"));\r",
									"    pm.expect(jsonData.data[2].skills[1].name).to.eql(pm.environment.get(\"exskname21\"));\r",
									"    pm.expect(jsonData.data[2].skills[1].enabled).to.eql(pm.environment.get(\"exskenabled21\"));\r",
									"    pm.expect(jsonData.data[2].skills[2].id).to.eql(pm.environment.get(\"exskid22\"));\r",
									"    pm.expect(jsonData.data[2].skills[2].name).to.eql(pm.environment.get(\"exskname22\"));\r",
									"    pm.expect(jsonData.data[2].skills[2].enabled).to.eql(pm.environment.get(\"exskenabled22\"));\r",
									"\r",
									"    pm.expect(jsonData.data[3].skills[0].id).to.eql(pm.environment.get(\"exskid30\"));\r",
									"    pm.expect(jsonData.data[3].skills[0].name).to.eql(pm.environment.get(\"exskname30\"));\r",
									"    pm.expect(jsonData.data[3].skills[0].enabled).to.eql(pm.environment.get(\"exskenabled30\"));\r",
									"    pm.expect(jsonData.data[3].skills[1].id).to.eql(pm.environment.get(\"exskid31\"));\r",
									"    pm.expect(jsonData.data[3].skills[1].name).to.eql(pm.environment.get(\"exskname31\"));\r",
									"    pm.expect(jsonData.data[3].skills[1].enabled).to.eql(pm.environment.get(\"exskenabled31\"));\r",
									"    pm.expect(jsonData.data[3].skills[2].id).to.eql(pm.environment.get(\"exskid32\"));\r",
									"    pm.expect(jsonData.data[3].skills[2].name).to.eql(pm.environment.get(\"exskname32\"));\r",
									"    pm.expect(jsonData.data[3].skills[2].enabled).to.eql(pm.environment.get(\"exskenabled32\"));\r",
									"});"
								],
								"id": "3df7984f-e9c6-48ea-b34e-1558a2a67deb"
							}
						}
					],
					"_postman_id": "2e487937-6af3-49fb-bacc-d4b254238920",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{talent_access_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{borderless_service_url}}/api/v1/talents/experiences"
					},
					"response": []
				},
				{
					"name": "Get Experience",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('exid',jsonData.data.id)\r",
									"pm.environment.set('exenabled',jsonData.data.enabled)\r",
									"pm.environment.set('excompanyname',jsonData.data.company_name)\r",
									"pm.environment.set('exdescription',jsonData.data.description)\r",
									"pm.environment.set('exseniorityid',jsonData.data.seniority_id)\r",
									"pm.environment.set('exseniority',jsonData.data.seniority)\r",
									"pm.environment.set('extitleid',jsonData.data.title_id)\r",
									"pm.environment.set('extitle',jsonData.data.title)\r",
									"pm.environment.set('exindustryid',jsonData.data.industry_id)\r",
									"pm.environment.set('exindustry',jsonData.data.industry)\r",
									"pm.environment.set('exstartdate',jsonData.data.start_date)\r",
									"pm.environment.set('exstateid',jsonData.data.state_id)\r",
									"pm.environment.set('exstate',jsonData.data.state)\r",
									"pm.environment.set('excountryid',jsonData.data.country_id)\r",
									"pm.environment.set('excountry',jsonData.data.country)\r",
									"\r",
									"pm.environment.set('exskid00',jsonData.data.skills[0].id)\r",
									"pm.environment.set('exskname00',jsonData.data.skills[0].name)\r",
									"pm.environment.set('exskenabled00',jsonData.data.skills[0].enabled)\r",
									"pm.environment.set('exskid01',jsonData.data.skills[1].id)\r",
									"pm.environment.set('exskname01',jsonData.data.skills[1].name)\r",
									"pm.environment.set('exskenabled01',jsonData.data.skills[1].enabled)\r",
									"pm.environment.set('exskid02',jsonData.data.skills[2].id)\r",
									"pm.environment.set('exskname02',jsonData.data.skills[2].name)\r",
									"pm.environment.set('exskenabled02',jsonData.data.skills[2].enabled)\r",
									"\r",
									"\r",
									"pm.test(\"User details\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"exid\"));\r",
									"    pm.expect(jsonData.data.enabled).to.eql(pm.environment.get(\"exenabled\"));\r",
									"    pm.expect(jsonData.data.company_name).to.eql(pm.environment.get(\"excompanyname\"));\r",
									"    pm.expect(jsonData.data.description).to.eql(pm.environment.get(\"exdescription\"));\r",
									"    pm.expect(jsonData.data.seniority_id).to.eql(pm.environment.get(\"exseniorityid\"));\r",
									"    pm.expect(jsonData.data.seniority).to.eql(pm.environment.get(\"exseniority\"));\r",
									"    pm.expect(jsonData.data.title_id).to.eql(pm.environment.get(\"extitleid\"));\r",
									"    pm.expect(jsonData.data.title).to.eql(pm.environment.get(\"extitle\"));\r",
									"    pm.expect(jsonData.data.industry_id).to.eql(pm.environment.get(\"exindustryid\"));\r",
									"    pm.expect(jsonData.data.industry).to.eql(pm.environment.get(\"exindustry\"));\r",
									"    pm.expect(jsonData.data.start_date).to.eql(pm.environment.get(\"exstartdate\"));\r",
									"    pm.expect(jsonData.data.state_id).to.eql(pm.environment.get(\"exstateid\"));\r",
									"    pm.expect(jsonData.data.state).to.eql(pm.environment.get(\"exstate\"));\r",
									"    pm.expect(jsonData.data.country_id).to.eql(pm.environment.get(\"excountryid\"));\r",
									"    pm.expect(jsonData.data.country).to.eql(pm.environment.get(\"excountry\"));\r",
									"    pm.expect(jsonData.data.skills[0].id).to.eql(pm.environment.get(\"exskid00\"));\r",
									"    pm.expect(jsonData.data.skills[0].name).to.eql(pm.environment.get(\"exskname00\"));\r",
									"    pm.expect(jsonData.data.skills[0].enabled).to.eql(pm.environment.get(\"exskenabled00\"));\r",
									"    pm.expect(jsonData.data.skills[1].id).to.eql(pm.environment.get(\"exskid01\"));\r",
									"    pm.expect(jsonData.data.skills[1].name).to.eql(pm.environment.get(\"exskname01\"));\r",
									"    pm.expect(jsonData.data.skills[1].enabled).to.eql(pm.environment.get(\"exskenabled01\"));\r",
									"    pm.expect(jsonData.data.skills[2].id).to.eql(pm.environment.get(\"exskid02\"));\r",
									"    pm.expect(jsonData.data.skills[2].name).to.eql(pm.environment.get(\"exskname02\"));\r",
									"    pm.expect(jsonData.data.skills[2].enabled).to.eql(pm.environment.get(\"exskenabled02\"));\r",
									"});"
								],
								"id": "acc17e44-39e2-4857-b9d7-fd3fe039683f"
							}
						}
					],
					"_postman_id": "28eae29f-b557-4451-bf70-e38fa0a6c8f3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/experiences/:experience_id?cached=false",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"experiences",
								":experience_id"
							],
							"query": [
								{
									"key": "cached",
									"value": "false"
								}
							],
							"variable": [
								{
									"id": "296fdbaa-45d3-4021-9859-ebedcbf5e32d",
									"key": "experience_id",
									"value": "{{experiencesid0}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cached Experience",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"id": "c2475944-6911-4416-aace-a3a18d00b384"
							}
						}
					],
					"_postman_id": "2d66bbd7-a66c-4c41-bded-77fa54c2705b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/experiences/:index/cached",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"experiences",
								":index",
								"cached"
							],
							"variable": [
								{
									"id": "59640b08-9087-4ccc-a837-4d20a1e7fe67",
									"key": "index",
									"value": "{{experiencesid0}}",
									"description": "0 based index key of cached item of interest",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "457c1695-c157-4f29-be4d-e5f3bb34dee6"
		},
		{
			"name": "Avatar",
			"item": [
				{
					"name": "Get Avatar",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Error Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Unauthenticated.\");\r",
									"});"
								],
								"id": "87c4bd49-66b2-4d62-b13e-7338864140e0"
							}
						}
					],
					"_postman_id": "349c6477-075b-44e5-a960-54baff15c04b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{borderless_service_url}}/api/v1/talents/avatar"
					},
					"response": []
				},
				{
					"name": "Delete Avatar",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"id": "54ad3981-4162-4555-b787-f367627f2a1c"
							}
						}
					],
					"_postman_id": "b2326f66-a7a1-49f7-84f1-65e8e0a6c61a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{borderless_service_url}}/api/v1/talents/avatar"
					},
					"response": []
				},
				{
					"name": "Update Avatar",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"id": "2e02a663-00b3-42f3-a4c3-e89b2e0179a0"
							}
						}
					],
					"_postman_id": "4c2bcbeb-c6a2-4898-987a-613f2631b29b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/User/Pictures/Michael Adinebo - passport photo.jpg"
								},
								{
									"key": "_method",
									"value": "patch",
									"description": "Required for form-data using PATCH on Postman",
									"type": "text"
								}
							],
							"options": {}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/avatar"
					},
					"response": []
				}
			],
			"_postman_id": "0dae4978-9937-4b93-845b-439a34eb6b53"
		},
		{
			"name": "Settings",
			"item": [
				{
					"name": "Get Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set('setemail',jsonData.data.email)",
									"pm.environment.set('setactive',jsonData.data.active)",
									"pm.environment.set('setgetmatches',jsonData.data.get_matches)",
									"pm.environment.set('setgetnotifications',jsonData.data.get_notifications)",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(true);",
									"});",
									"",
									"pm.test(\"email message\", function () {",
									"    pm.expect(jsonData.data.email).to.eql(pm.environment.get(\"setemail\"));",
									"});",
									"",
									"pm.test(\"active message\", function () {",
									"    pm.expect(jsonData.data.active).to.eql(pm.environment.get(\"setactive\"));",
									"});",
									"",
									"pm.test(\"get matches message\", function () {",
									"    pm.expect(jsonData.data.get_matches).to.eql(pm.environment.get(\"setgetmatches\"));",
									"});",
									"",
									"",
									"pm.test(\"get notifications message\", function () {",
									"    pm.expect(jsonData.data.get_notifications).to.eql(pm.environment.get(\"setgetnotifications\"));",
									"});"
								],
								"id": "df1b71ae-c5d6-4986-b5c4-f5b84b6eaf5f"
							}
						}
					],
					"_postman_id": "2add79bd-bbea-4cce-8a41-09b8a7fadd89",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{borderless_service_url}}/api/v1/talents/settings"
					},
					"response": []
				},
				{
					"name": "Update Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('setemail',jsonData.data.email)\r",
									"pm.environment.set('setactive',jsonData.data.active)\r",
									"pm.environment.set('setgetmatches',jsonData.data.get_matches)\r",
									"pm.environment.set('setgetnotifications',jsonData.data.get_notifications)\r",
									"\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(true);\r",
									"});\r",
									"\r",
									"pm.test(\"email message\", function () {\r",
									"    pm.expect(jsonData.data.email).to.eql(pm.environment.get(\"setemail\"));\r",
									"});\r",
									"\r",
									"pm.test(\"active message\", function () {\r",
									"    pm.expect(jsonData.data.active).to.eql(pm.environment.get(\"setactive\"));\r",
									"});\r",
									"\r",
									"pm.test(\"get matches message\", function () {\r",
									"    pm.expect(jsonData.data.get_matches).to.eql(pm.environment.get(\"setgetmatches\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"get notifications message\", function () {\r",
									"    pm.expect(jsonData.data.get_notifications).to.eql(pm.environment.get(\"setgetnotifications\"));\r",
									"});"
								],
								"id": "25ebf7ae-39e2-4f9a-9fe1-ec9f924d22ce"
							}
						}
					],
					"_postman_id": "3154f655-cee2-4c54-be2f-8106b4bb0fbd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"active\": true,\n    \"get_matches\": true,\n    \"get_notifications\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/settings"
					},
					"response": []
				},
				{
					"name": "Update Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('setemail',jsonData.data.email)\r",
									"pm.environment.set('setactive',jsonData.data.active)\r",
									"pm.environment.set('setgetmatches',jsonData.data.get_matches)\r",
									"pm.environment.set('setgetnotifications',jsonData.data.get_notifications)\r",
									"\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(true);\r",
									"});\r",
									"\r",
									"pm.test(\"email message\", function () {\r",
									"    pm.expect(jsonData.data.email).to.eql(pm.environment.get(\"setemail\"));\r",
									"});\r",
									"\r",
									"pm.test(\"active message\", function () {\r",
									"    pm.expect(jsonData.data.active).to.eql(pm.environment.get(\"setactive\"));\r",
									"});\r",
									"\r",
									"pm.test(\"get matches message\", function () {\r",
									"    pm.expect(jsonData.data.get_matches).to.eql(pm.environment.get(\"setgetmatches\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"get notifications message\", function () {\r",
									"    pm.expect(jsonData.data.get_notifications).to.eql(pm.environment.get(\"setgetnotifications\"));\r",
									"});"
								],
								"id": "ee83422f-4462-45ff-81e5-64bc5a3e2811"
							}
						}
					],
					"_postman_id": "1b54fa39-2780-4a4f-ac79-d1dc849898b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"current_password\": \"Password123@\",\n    \"password\" : \"Password123@\",\n    \"password_confirmation\" : \"Password123@\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/settings"
					},
					"response": []
				},
				{
					"name": "Update Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"var value = pm.environment.get(\"var\");\r",
									"\r",
									"pm.environment.set(\"var\", value+1);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('setemail',jsonData.data.email)\r",
									"pm.environment.set('setactive',jsonData.data.active)\r",
									"pm.environment.set('setgetmatches',jsonData.data.get_matches)\r",
									"pm.environment.set('setgetnotifications',jsonData.data.get_notifications)\r",
									"\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(true);\r",
									"});\r",
									"\r",
									"pm.test(\"email message\", function () {\r",
									"    pm.expect(jsonData.data.email).to.eql(pm.environment.get(\"setemail\"));\r",
									"});\r",
									"\r",
									"pm.test(\"active message\", function () {\r",
									"    pm.expect(jsonData.data.active).to.eql(pm.environment.get(\"setactive\"));\r",
									"});\r",
									"\r",
									"pm.test(\"get matches message\", function () {\r",
									"    pm.expect(jsonData.data.get_matches).to.eql(pm.environment.get(\"setgetmatches\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"get notifications message\", function () {\r",
									"    pm.expect(jsonData.data.get_notifications).to.eql(pm.environment.get(\"setgetnotifications\"));\r",
									"});"
								],
								"id": "5ba3207b-b5e3-497c-9ccc-67ecbe74e88d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var value = pm.environment.get(\"var\");\r",
									"\r",
									"if( !value) {\r",
									"    pm.environment.set(\"var\", 1);\r",
									"}"
								],
								"id": "4eb2c611-5b11-4d12-ae4c-dde85c808704"
							}
						}
					],
					"_postman_id": "c8544869-f844-4829-8b19-0f4d17791a19",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"testing{{value}}@example.com\",\n    \"email_confirmation\" : \"testing{{value}}@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/settings"
					},
					"response": []
				}
			],
			"_postman_id": "bc5ba4df-3084-46dc-a9ab-458f6b2d3d92"
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "Get Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set('proid',jsonData.data.id)",
									"pm.environment.set('proenabled',jsonData.data.enabled)",
									"pm.environment.set('proemail',jsonData.data.email)",
									"pm.environment.set('proavatar',jsonData.data.avatar)",
									"pm.environment.set('proyears',jsonData.data.years_experience)",
									"pm.environment.set('procurrencyid',jsonData.data.salary_currency_id)",
									"pm.environment.set('procurrency',jsonData.data.salary_currency)",
									"pm.environment.set('procomplete',jsonData.data.completeness)",
									"pm.environment.set('proremoteid',jsonData.data.remote_type_id)",
									"pm.environment.set('proremote',jsonData.data.remote_type)",
									"pm.environment.set('projobid',jsonData.data.job_status_id)",
									"pm.environment.set('projob',jsonData.data.job_status)",
									"",
									"",
									"pm.test(\"To get profile details\", function () {",
									"pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"proid\"));",
									"",
									"pm.expect(jsonData.data.enabled).to.eql(pm.environment.get(\"proenabled\"));",
									"",
									"pm.expect(jsonData.data.email).to.eql(pm.environment.get(\"proemail\"));",
									"",
									"pm.expect(jsonData.data.avatar).to.eql(pm.environment.get(\"proavatar\"));",
									"",
									"pm.expect(jsonData.data.years_experience).to.eql(pm.environment.get(\"proyears\"));",
									"",
									"pm.expect(jsonData.data.salary_currency_id).to.eql(pm.environment.get(\"procurrencyid\"));",
									"pm.expect(jsonData.data.salary_currency).to.eql(pm.environment.get(\"procurrency\"));",
									"",
									"pm.expect(jsonData.data.completeness).to.eql(pm.environment.get(\"procomplete\"));",
									"",
									"pm.expect(jsonData.data.remote_type_id).to.eql(pm.environment.get(\"proremoteid\"));",
									"pm.expect(jsonData.data.remote_type).to.eql(pm.environment.get(\"proremote\"));",
									"",
									"pm.expect(jsonData.data.job_status_id).to.eql(pm.environment.get(\"projobid\"));",
									"",
									"pm.expect(jsonData.data.job_status).to.eql(pm.environment.get(\"projob\"));",
									"});"
								],
								"id": "1f556e4d-c1e7-48ae-8f1d-7e555de7e39f"
							}
						}
					],
					"_postman_id": "5d70b9c3-2abb-4194-a008-687069618c31",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{borderless_service_url}}/api/v1/talents"
					},
					"response": []
				},
				{
					"name": "Profile Completeness",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"   var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('procom',jsonData.data)\r",
									"\r",
									"pm.test(\"To get data\", function () {\r",
									"    pm.expect(jsonData.data).to.eql(pm.environment.get(\"procom\"));\r",
									"});"
								],
								"id": "37d51385-9e3e-4092-860e-0389872da679"
							}
						}
					],
					"_postman_id": "67647d46-903d-4601-b30e-eb7f31060942",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{borderless_service_url}}/api/v1/talents/completeness"
					},
					"response": []
				},
				{
					"name": "Profile Section Completeness",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set('personalcomplete',jsonData.data.personal.complete)\r",
									"pm.environment.set('personalmissing',jsonData.data.personal.missing)\r",
									"\r",
									"pm.test(\"To get Personal Completeness\", function () {\r",
									"    pm.expect(jsonData.data.personal.complete).to.eql(pm.environment.get(\"personalcomplete\"));\r",
									"    pm.expect(jsonData.data.personal.missing).to.eql(pm.environment.get(\"personalmissing\"));\r",
									"});\r",
									"\r",
									"pm.environment.set('experiencescomplete',jsonData.data.experiences.complete)\r",
									"pm.environment.set('experiencesmissing',jsonData.data.experiences.missing)\r",
									"\r",
									"pm.test(\"To get experiences Completeness\", function () {\r",
									"    pm.expect(jsonData.data.experiences.complete).to.eql(pm.environment.get(\"experiencescomplete\"));\r",
									"    pm.expect(jsonData.data.experiences.missing).to.eql(pm.environment.get(\"experiencesmissing\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.environment.set('educationscomplete',jsonData.data.educations.complete)\r",
									"pm.environment.set('educationsmissing',jsonData.data.educations.missing)\r",
									"\r",
									"pm.test(\"To get educations Completeness\", function () {\r",
									"    pm.expect(jsonData.data.educations.complete).to.eql(pm.environment.get(\"educationscomplete\"));\r",
									"    pm.expect(jsonData.data.educations.missing).to.eql(pm.environment.get(\"educationsmissing\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.environment.set('linkscomplete',jsonData.data.links.complete)\r",
									"pm.environment.set('linksmissing',jsonData.data.links.missing)\r",
									"\r",
									"pm.test(\"To get links Completeness\", function () {\r",
									"    pm.expect(jsonData.data.links.complete).to.eql(pm.environment.get(\"linkscomplete\"));\r",
									"    pm.expect(jsonData.data.links.missing).to.eql(pm.environment.get(\"linksmissing\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.environment.set('skillscomplete',jsonData.data.skills.complete)\r",
									"pm.environment.set('skillsmissing',jsonData.data.skills.missing)\r",
									"\r",
									"pm.test(\"To get skills Completeness\", function () {\r",
									"    pm.expect(jsonData.data.skills.complete).to.eql(pm.environment.get(\"skillscomplete\"));\r",
									"    pm.expect(jsonData.data.skills.missing).to.eql(pm.environment.get(\"skillsmissing\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.environment.set('cultureFitcomplete',jsonData.data.cultureFit.complete)\r",
									"pm.environment.set('cultureFitmissing',jsonData.data.cultureFit.missing)\r",
									"\r",
									"pm.test(\"To get cultureFit Completeness\", function () {\r",
									"    pm.expect(jsonData.data.cultureFit.complete).to.eql(pm.environment.get(\"cultureFitcomplete\"));\r",
									"    pm.expect(jsonData.data.cultureFit.missing).to.eql(pm.environment.get(\"cultureFitmissing\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.environment.set('languagescomplete',jsonData.data.languages.complete)\r",
									"pm.environment.set('languagesmissing',jsonData.data.languages.missing)\r",
									"\r",
									"pm.test(\"To get languages Completeness\", function () {\r",
									"    pm.expect(jsonData.data.languages.complete).to.eql(pm.environment.get(\"languagescomplete\"));\r",
									"    pm.expect(jsonData.data.languages.missing).to.eql(pm.environment.get(\"languagesmissing\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.environment.set('preferencescomplete',jsonData.data.preferences.complete)\r",
									"pm.environment.set('preferencesmissing',jsonData.data.preferences.missing)\r",
									"\r",
									"pm.test(\"To get preferences Completeness\", function () {\r",
									"    pm.expect(jsonData.data.preferences.complete).to.eql(pm.environment.get(\"preferencescomplete\"));\r",
									"    pm.expect(jsonData.data.preferences.missing).to.eql(pm.environment.get(\"preferencesmissing\"));\r",
									"});\r",
									""
								],
								"id": "5a205fba-70ff-4d7d-af9c-e37d1c1bc90d"
							}
						}
					],
					"_postman_id": "f9c88877-0948-4d5e-8089-9b72ef0d6f99",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{borderless_service_url}}/api/v1/talents/section-completeness"
					},
					"response": []
				},
				{
					"name": "Update Personal Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"id": "501b032c-0057-4ce4-8415-1c4f565d3101"
							}
						}
					],
					"_postman_id": "38d10ccb-75fc-4889-a07b-00d1640d3b1d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\" : \"Password123@\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/profile?=&={{proid}}",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"profile"
							],
							"query": [
								{
									"key": "",
									"value": ""
								},
								{
									"key": "",
									"value": "{{proid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Preferences",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"id": "0e94278e-8627-474d-97e1-c0716aa278c4"
							}
						}
					],
					"_postman_id": "c55312e3-f249-4713-8af3-52f448c67115",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\" : \"Password123@\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/preferences"
					},
					"response": []
				},
				{
					"name": "Update Profile (Depriciated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"id": "6c0e8c2d-bf2a-4540-b329-001ab2e34e15"
							}
						}
					],
					"_postman_id": "86ddb0ea-508d-4dc6-9d00-49b07f19f62b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\" : \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/:talent_id",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								":talent_id"
							],
							"variable": [
								{
									"id": "77df632c-7d30-41c1-b61f-352cef408c2c",
									"key": "talent_id",
									"value": "{{talentid}}",
									"description": "Primary key of talent of interest",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "7662d86f-f383-4df0-b768-37fdd2018491"
		},
		{
			"name": "Links",
			"item": [
				{
					"name": "Get Links",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(true);\r",
									"});\r",
									"\r",
									"pm.environment.set('linkedinlink',jsonData.data.linkedin)\r",
									"pm.environment.set('githublink',jsonData.data.github)\r",
									"pm.environment.set('twitterlink',jsonData.data.twitter)\r",
									"pm.environment.set('websitelink',jsonData.data.website)\r",
									"\r",
									"\r",
									"pm.test(\"Linkedin\", function () {\r",
									"    pm.expect(jsonData.data.linkedin).to.eql(pm.environment.get(\"linkedinlink\"));\r",
									"});\r",
									"\r",
									"pm.test(\"github\", function () {\r",
									"    pm.expect(jsonData.data.github).to.eql(pm.environment.get(\"githublink\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"twitter\", function () {\r",
									"    pm.expect(jsonData.data.twitter).to.eql(pm.environment.get(\"twitterlink\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"website\", function () {\r",
									"    pm.expect(jsonData.data.website).to.eql(pm.environment.get(\"websitelink\"));\r",
									"});"
								],
								"id": "473b23d8-dce4-49ec-8de0-3484973833f5"
							}
						}
					],
					"_postman_id": "952189b2-2cf6-4a3e-a470-9e0e3fe8cbfd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{borderless_service_url}}/api/v1/talents/links"
					},
					"response": []
				},
				{
					"name": "Update Links",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(true);\r",
									"});\r",
									"\r",
									"pm.environment.set('linkedinlink',jsonData.data.linkedin)\r",
									"pm.environment.set('githublink',jsonData.data.github)\r",
									"pm.environment.set('twitterlink',jsonData.data.twitter)\r",
									"pm.environment.set('websitelink',jsonData.data.website)\r",
									"\r",
									"\r",
									"pm.test(\"Linkedin\", function () {\r",
									"    pm.expect(jsonData.data.linkedin).to.eql(pm.environment.get(\"linkedinlink\"));\r",
									"});\r",
									"\r",
									"pm.test(\"github\", function () {\r",
									"    pm.expect(jsonData.data.github).to.eql(pm.environment.get(\"githublink\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"twitter\", function () {\r",
									"    pm.expect(jsonData.data.twitter).to.eql(pm.environment.get(\"twitterlink\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"website\", function () {\r",
									"    pm.expect(jsonData.data.website).to.eql(pm.environment.get(\"websitelink\"));\r",
									"});"
								],
								"id": "c1b942f7-efa9-4a0a-b989-ae93be9c5807"
							}
						}
					],
					"_postman_id": "d165f173-e2e2-4bda-8383-8ce15a4039ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"linkedin\": \"https://www.linkedin.com/in/kheme/\",\n    \"github\": \"https://github.com/kheme\",\n    \"twitter\": \"https://twitter.com/kheme\",\n    \"website\": \"https://medium.com/@kheme\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/links"
					},
					"response": []
				}
			],
			"_postman_id": "80b794aa-ed08-4bad-8ff3-6e5139ae9554"
		},
		{
			"name": "Email",
			"item": [
				{
					"name": "Request Email Change",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"id": "bc08a0b8-fba5-4b65-98b3-4c1159ee58d5"
							}
						}
					],
					"_postman_id": "3051f118-a2f1-4b3f-a33e-68eb0ea754a0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{talent_access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"tester{{value}}@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/email",
						"description": "Request email change and send verification email to the new email"
					},
					"response": []
				},
				{
					"name": "Finalize Email Change",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "294cbeee-bd60-41f4-b5be-e984bdab23da",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "a1f1c570-873b-45b9-840d-06c5f1e52498",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:8000/api/v1/talents/email/verify/A97IJdfB3Y",
						"description": "Verify new email\r\n-Does not require authentication"
					},
					"response": []
				}
			],
			"_postman_id": "781f8df9-f4dd-448c-8077-5d2f665a6619"
		},
		{
			"name": "Tools",
			"item": [
				{
					"name": "List Tools",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"id": "683e07ab-4113-4dd8-ac4a-9a11ae8596a6"
							}
						}
					],
					"_postman_id": "b695e467-bcfe-4b11-a300-4c224a3c9359",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{borderless_service_url}}/api/v1/talents/tools",
						"description": "Get authenticated talent's tools"
					},
					"response": []
				},
				{
					"name": "Update Tools",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"id": "447e5a9f-e6b5-49c9-9c82-6a41fab23147"
							}
						}
					],
					"_postman_id": "0354c55a-419d-4f64-b914-340eb4e886d4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tools\" : [15, 8, 13]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/talents/tools",
						"description": "Update talent tools"
					},
					"response": []
				}
			],
			"_postman_id": "d37c1840-1686-41ea-aa4a-14555f13fb36"
		},
		{
			"name": "Assessments",
			"item": [
				{
					"name": "List Assessments",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set('assid',jsonData.data[0].id)",
									"pm.environment.set('asstitle',jsonData.data[0].title)",
									"pm.environment.set('assurl',jsonData.data[0].url)",
									"pm.environment.set('assscore',jsonData.data[0].score)",
									"",
									"",
									"pm.test(\"Assessment id\", function () {",
									"    pm.expect(jsonData.data[0].id).to.eql(pm.environment.get(\"assid\"));",
									"});",
									"",
									"pm.test(\"Assessment title\", function () {",
									"    pm.expect(jsonData.data[0].title).to.eql(pm.environment.get(\"asstitle\"));",
									"});",
									"",
									"",
									"pm.test(\"Assessment url\", function () {",
									"    pm.expect(jsonData.data[0].url).to.eql(pm.environment.get(\"assurl\"));",
									"});",
									"",
									"",
									"pm.test(\"Assessment score\", function () {",
									"    pm.expect(jsonData.data[0].score).to.eql(pm.environment.get(\"assscore\"));",
									"});",
									"",
									""
								],
								"id": "11083006-05a8-49a2-b56a-23f0cc49eed1"
							}
						}
					],
					"_postman_id": "2bd2a54f-9f83-4445-a293-069e1b042232",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{borderless_service_url}}/api/v1/talents/assessments",
						"description": "Get authenticated talent's tools"
					},
					"response": []
				}
			],
			"_postman_id": "0976cc5d-f88f-402d-8726-2d33444772c6"
		},
		{
			"name": "Jobs/Vacancies",
			"item": [
				{
					"name": "Applied",
					"item": [
						{
							"name": "List Applied Jobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responseJson = pm.response.json();",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set('vacid',jsonData.data[0].id)",
											"pm.environment.set('vactitle',jsonData.data[0].title)",
											"pm.environment.set('vacdescription',jsonData.data[0].description)",
											"pm.environment.set('vaccountry',jsonData.data[0].country)",
											"pm.environment.set('vacremotetype',jsonData.data[0].remote_type)",
											"pm.environment.set('vacsalary',jsonData.data[0].salary)",
											"pm.environment.set('vacjobtype',jsonData.data[0].job_type)",
											"pm.environment.set('vacissaved',jsonData.data[0].is_saved)",
											"pm.environment.set('vacappstage',jsonData.data[0].application_stage)",
											"pm.environment.set('vacappstageid',jsonData.data[0].application_stage_id)",
											"",
											"",
											"",
											"pm.test(\"Vacancy Details\", function () {",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.environment.get(\"vacid\"));",
											"    pm.expect(jsonData.data[0].title).to.eql(pm.environment.get(\"vactitle\"));",
											"    pm.expect(jsonData.data[0].description).to.eql(pm.environment.get(\"vacdescription\"));",
											"    pm.expect(jsonData.data[0].country).to.eql(pm.environment.get(\"vaccountry\"));",
											"    pm.expect(jsonData.data[0].remote_type).to.eql(pm.environment.get(\"vacremotetype\"));",
											"    pm.expect(jsonData.data[0].salary).to.eql(pm.environment.get(\"vacsalary\"));",
											"    pm.expect(jsonData.data[0].job_type).to.eql(pm.environment.get(\"vacjobtype\"));",
											"    pm.expect(jsonData.data[0].is_saved).to.eql(pm.environment.get(\"vacissaved\"));",
											"    pm.expect(jsonData.data[0].application_stage).to.eql(pm.environment.get(\"vacappstage\"));",
											"    pm.expect(jsonData.data[0].application_stage_id).to.eql(pm.environment.get(\"vacappstageid\"));",
											"});",
											"",
											""
										],
										"id": "d4a0dc12-6fe2-4a2b-bc53-512fd6b70dac"
									}
								}
							],
							"_postman_id": "7a6770ca-8565-4829-b103-4d719251afa3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/talents/jobs/applied?truncated=true",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"talents",
										"jobs",
										"applied"
									],
									"query": [
										{
											"key": "truncated",
											"value": "true",
											"description": "Shall we truncate the description?"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Apply to Vacancy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set('vacid',jsonData.data[0].id)\r",
											"pm.environment.set('vactitle',jsonData.data[0].title)\r",
											"pm.environment.set('vacdescription',jsonData.data[0].description)\r",
											"pm.environment.set('vaccountry',jsonData.data[0].country)\r",
											"pm.environment.set('vacremotetype',jsonData.data[0].remote_type)\r",
											"pm.environment.set('vacsalary',jsonData.data[0].salary)\r",
											"pm.environment.set('vacjobtype',jsonData.data[0].job_type)\r",
											"pm.environment.set('vacissaved',jsonData.data[0].is_saved)\r",
											"pm.environment.set('vacappstage',jsonData.data[0].application_stage)\r",
											"pm.environment.set('vacappstageid',jsonData.data[0].application_stage_id)\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Vacancy Details\", function () {\r",
											"    pm.expect(jsonData.data[0].id).to.eql(pm.environment.get(\"vacid\"));\r",
											"    pm.expect(jsonData.data[0].title).to.eql(pm.environment.get(\"vactitle\"));\r",
											"    pm.expect(jsonData.data[0].description).to.eql(pm.environment.get(\"vacdescription\"));\r",
											"    pm.expect(jsonData.data[0].country).to.eql(pm.environment.get(\"vaccountry\"));\r",
											"    pm.expect(jsonData.data[0].remote_type).to.eql(pm.environment.get(\"vacremotetype\"));\r",
											"    pm.expect(jsonData.data[0].salary).to.eql(pm.environment.get(\"vacsalary\"));\r",
											"    pm.expect(jsonData.data[0].job_type).to.eql(pm.environment.get(\"vacjobtype\"));\r",
											"    pm.expect(jsonData.data[0].is_saved).to.eql(pm.environment.get(\"vacissaved\"));\r",
											"    pm.expect(jsonData.data[0].application_stage).to.eql(pm.environment.get(\"vacappstage\"));\r",
											"    pm.expect(jsonData.data[0].application_stage_id).to.eql(pm.environment.get(\"vacappstageid\"));\r",
											"});\r",
											"\r",
											""
										],
										"id": "47c7db74-d9fd-45cd-a5c5-61647cb5da10"
									}
								}
							],
							"_postman_id": "1a1d50da-a7cb-43ae-a0f5-68f189ac0f1b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/talents/jobs/:vacancy_id/applied?truncated=true",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"talents",
										"jobs",
										":vacancy_id",
										"applied"
									],
									"query": [
										{
											"key": "truncated",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "7a038252-9e7c-4c62-9865-f311c45f439d",
											"key": "vacancy_id",
											"value": "{{vacancyid}}",
											"description": "Primary key of vacancy of interest",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Withdraw Application to Vacancy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											""
										],
										"id": "c46c84b9-d147-4880-98d5-9757f732e287"
									}
								}
							],
							"_postman_id": "c37378f5-0f33-4bd7-a2b8-78296738221d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/talents/jobs/:vacancy_id/applied?truncated=true",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"talents",
										"jobs",
										":vacancy_id",
										"applied"
									],
									"query": [
										{
											"key": "truncated",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "96f87a18-7892-4902-9156-8c3c035db0b3",
											"key": "vacancy_id",
											"value": "{{vacancyid}}",
											"description": "Primary key of vacancy of interest",
											"type": "string"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_id": "e8b5f73d-de32-4736-ada8-fff6c3d1d638",
					"_postman_isSubFolder": true
				},
				{
					"name": "Saved",
					"item": [
						{
							"name": "List Saved Vacancies",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set('saveid',jsonData.data[0,1].id)\r",
											"pm.environment.set('savetitle',jsonData.data[0,1].title)\r",
											"pm.environment.set('savedescription',jsonData.data[0,1].description)\r",
											"pm.environment.set('savecountry',jsonData.data[0,1].country)\r",
											"pm.environment.set('saveremotetype',jsonData.data[0,1].remote_type)\r",
											"pm.environment.set('savesalary',jsonData.data[0,1].salary)\r",
											"pm.environment.set('savejobtype',jsonData.data[0,1].job_type)\r",
											"pm.environment.set('saveissaved',jsonData.data[0,1].is_saved)\r",
											"pm.environment.set('saveappstage',jsonData.data[0,1].application_stage)\r",
											"pm.environment.set('saveappstageid',jsonData.data[0,1].application_stage_id)\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\" save Vacancy Details\", function () {\r",
											"    pm.expect(jsonData.data[0,1].id).to.eql(pm.environment.get(\"saveid\"));\r",
											"    pm.expect(jsonData.data[0,1].title).to.eql(pm.environment.get(\"savetitle\"));\r",
											"    pm.expect(jsonData.data[0,1].description).to.eql(pm.environment.get(\"savedescription\"));\r",
											"    pm.expect(jsonData.data[0,1].country).to.eql(pm.environment.get(\"savecountry\"));\r",
											"    pm.expect(jsonData.data[0,1].remote_type).to.eql(pm.environment.get(\"saveremotetype\"));\r",
											"    pm.expect(jsonData.data[0,1].salary).to.eql(pm.environment.get(\"savesalary\"));\r",
											"    pm.expect(jsonData.data[0,1].job_type).to.eql(pm.environment.get(\"savejobtype\"));\r",
											"    pm.expect(jsonData.data[0,1].is_saved).to.eql(pm.environment.get(\"saveissaved\"));\r",
											"    pm.expect(jsonData.data[0,1].application_stage).to.eql(pm.environment.get(\"saveappstage\"));\r",
											"    pm.expect(jsonData.data[0,1].application_stage_id).to.eql(pm.environment.get(\"saveappstageid\"));\r",
											"});\r",
											"\r",
											""
										],
										"id": "04093447-a7b1-40e0-93cc-0d273208db15"
									}
								}
							],
							"_postman_id": "a9af4f71-47b7-49cf-a356-b6307b73faab",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/talents/jobs/saved?truncated=true",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"talents",
										"jobs",
										"saved"
									],
									"query": [
										{
											"key": "truncated",
											"value": "true",
											"description": "Shall we truncate the description?"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Save Vacancy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseJson = pm.response.json();\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set('saveid',jsonData.data.id)\r",
											"pm.environment.set('savetitle',jsonData.data.title)\r",
											"pm.environment.set('savedescription',jsonData.data.description)\r",
											"pm.environment.set('savecountry',jsonData.data.country)\r",
											"pm.environment.set('saveremotetype',jsonData.data.remote_type)\r",
											"pm.environment.set('savesalary',jsonData.data.salary)\r",
											"pm.environment.set('savejobtype',jsonData.data.job_type)\r",
											"pm.environment.set('saveissaved',jsonData.data.is_saved)\r",
											"pm.environment.set('saveappstage',jsonData.data.application_stage)\r",
											"pm.environment.set('saveappstageid',jsonData.data.application_stage_id)\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\" save Vacancy Details\", function () {\r",
											"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"saveid\"));\r",
											"    pm.expect(jsonData.data.title).to.eql(pm.environment.get(\"savetitle\"));\r",
											"    pm.expect(jsonData.data.description).to.eql(pm.environment.get(\"savedescription\"));\r",
											"    pm.expect(jsonData.data.country).to.eql(pm.environment.get(\"savecountry\"));\r",
											"    pm.expect(jsonData.data.remote_type).to.eql(pm.environment.get(\"saveremotetype\"));\r",
											"    pm.expect(jsonData.data.salary).to.eql(pm.environment.get(\"savesalary\"));\r",
											"    pm.expect(jsonData.data.job_type).to.eql(pm.environment.get(\"savejobtype\"));\r",
											"    pm.expect(jsonData.data.is_saved).to.eql(pm.environment.get(\"saveissaved\"));\r",
											"    pm.expect(jsonData.data.application_stage).to.eql(pm.environment.get(\"saveappstage\"));\r",
											"    pm.expect(jsonData.data.application_stage_id).to.eql(pm.environment.get(\"saveappstageid\"));\r",
											"});\r",
											"\r",
											""
										],
										"id": "dbdec1f6-a390-4c43-bd16-18e70f289a9b"
									}
								}
							],
							"_postman_id": "d427479b-94e1-44b1-8891-2367dbbf8fa1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"vacancy_id\" : {{vacancyid}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{borderless_service_url}}/api/v1/talents/jobs/saved"
							},
							"response": []
						},
						{
							"name": "Unsave Vacancy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"id": "38c71e2d-6db9-4ffc-9e7b-45ce2bf6523c"
									}
								}
							],
							"_postman_id": "2472a714-4724-4b20-a6b4-1b12aa499d3a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"vacancy_id\" : {{vacancyid}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{borderless_service_url}}/api/v1/talents/jobs/saved"
							},
							"response": []
						}
					],
					"_postman_id": "a3488ea0-46ca-48b2-af47-b53b6ada5959",
					"_postman_isSubFolder": true
				},
				{
					"name": "Offers",
					"item": [
						{
							"name": "List Offered Jobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"id": "bd299d2e-677e-459e-abd2-685ee4f2dfb3"
									}
								}
							],
							"_postman_id": "d009796a-85a2-4885-a54e-d36afed78828",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/talents/jobs/offers?truncated=true",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"talents",
										"jobs",
										"offers"
									],
									"query": [
										{
											"key": "truncated",
											"value": "true",
											"description": "Shall we truncate the description?"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Accept Offer",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"id": "1f2ddc30-8d7d-4fb2-871c-5af92c44a98a"
									}
								}
							],
							"_postman_id": "50eb68cd-e81b-4405-818d-05ae88e6050b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/talents/jobs/offers/:vacancy_id?truncated=true",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"talents",
										"jobs",
										"offers",
										":vacancy_id"
									],
									"query": [
										{
											"key": "truncated",
											"value": "true",
											"description": "Shall we truncate the description?"
										}
									],
									"variable": [
										{
											"id": "16c4743a-7a81-449f-a293-dd17f9e28e67",
											"key": "vacancy_id",
											"value": "{{vacancyid}}",
											"description": "Primary key of vacancy of interest",
											"type": "string"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_id": "2be35fa3-6eeb-4cdd-b9ab-e7e74830f8f3",
					"_postman_isSubFolder": true
				},
				{
					"name": "Show Vacancy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set('saveid',jsonData.data.id)\r",
									"pm.environment.set('savetitle',jsonData.data.title)\r",
									"pm.environment.set('savedescription',jsonData.data.description)\r",
									"pm.environment.set('savecountry',jsonData.data.country)\r",
									"pm.environment.set('saveremotetype',jsonData.data.remote_type)\r",
									"pm.environment.set('savesalary',jsonData.data.salary)\r",
									"pm.environment.set('savejobtype',jsonData.data.job_type)\r",
									"pm.environment.set('saveissaved',jsonData.data.is_saved)\r",
									"pm.environment.set('saveappstage',jsonData.data.application_stage)\r",
									"pm.environment.set('saveappstageid',jsonData.data.application_stage_id)\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\" save Vacancy Details\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"saveid\"));\r",
									"    pm.expect(jsonData.data.title).to.eql(pm.environment.get(\"savetitle\"));\r",
									"    pm.expect(jsonData.data.description).to.eql(pm.environment.get(\"savedescription\"));\r",
									"    pm.expect(jsonData.data.country).to.eql(pm.environment.get(\"savecountry\"));\r",
									"    pm.expect(jsonData.data.remote_type).to.eql(pm.environment.get(\"saveremotetype\"));\r",
									"    pm.expect(jsonData.data.salary).to.eql(pm.environment.get(\"savesalary\"));\r",
									"    pm.expect(jsonData.data.job_type).to.eql(pm.environment.get(\"savejobtype\"));\r",
									"    pm.expect(jsonData.data.is_saved).to.eql(pm.environment.get(\"saveissaved\"));\r",
									"    pm.expect(jsonData.data.application_stage).to.eql(pm.environment.get(\"saveappstage\"));\r",
									"    pm.expect(jsonData.data.application_stage_id).to.eql(pm.environment.get(\"saveappstageid\"));\r",
									"});\r",
									"\r",
									""
								],
								"id": "f3c9540e-6870-4a2c-bcf3-c5d76c3046c8"
							}
						}
					],
					"_postman_id": "7caf798c-0c3c-4042-9efc-bef7a7a023d8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{talent_access_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/jobs/:vacancy_id?truncated=false",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"jobs",
								":vacancy_id"
							],
							"query": [
								{
									"key": "truncated",
									"value": "false",
									"description": "Shall we truncate the description?"
								}
							],
							"variable": [
								{
									"id": "9b4610c3-8fb9-489a-8e32-175018c3b0e5",
									"key": "vacancy_id",
									"value": "{{vacancyid}}",
									"description": "Primary key of vacancy of interest",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Recommended Jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set('saveid',jsonData.data[0].id)\r",
									"pm.environment.set('savetitle',jsonData.data[0].title)\r",
									"pm.environment.set('savedescription',jsonData.data[0].description)\r",
									"pm.environment.set('savecountry',jsonData.data[0].country)\r",
									"pm.environment.set('saveremotetype',jsonData.data[0].remote_type)\r",
									"pm.environment.set('savesalary',jsonData.data[0].salary)\r",
									"pm.environment.set('savejobtype',jsonData.data[0].job_type)\r",
									"pm.environment.set('saveissaved',jsonData.data[0].is_saved)\r",
									"pm.environment.set('saveappstage',jsonData.data[0].application_stage)\r",
									"pm.environment.set('saveappstageid',jsonData.data[0].application_stage_id)\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\" save Vacancy Details\", function () {\r",
									"    pm.expect(jsonData.data[0].id).to.eql(pm.environment.get(\"saveid\"));\r",
									"    pm.expect(jsonData.data[0].title).to.eql(pm.environment.get(\"savetitle\"));\r",
									"    pm.expect(jsonData.data[0].description).to.eql(pm.environment.get(\"savedescription\"));\r",
									"    pm.expect(jsonData.data[0].country).to.eql(pm.environment.get(\"savecountry\"));\r",
									"    pm.expect(jsonData.data[0].remote_type).to.eql(pm.environment.get(\"saveremotetype\"));\r",
									"    pm.expect(jsonData.data[0].salary).to.eql(pm.environment.get(\"savesalary\"));\r",
									"    pm.expect(jsonData.data[0].job_type).to.eql(pm.environment.get(\"savejobtype\"));\r",
									"    pm.expect(jsonData.data[0].is_saved).to.eql(pm.environment.get(\"saveissaved\"));\r",
									"    pm.expect(jsonData.data[0].application_stage).to.eql(pm.environment.get(\"saveappstage\"));\r",
									"    pm.expect(jsonData.data[0].application_stage_id).to.eql(pm.environment.get(\"saveappstageid\"));\r",
									"});\r",
									"\r",
									""
								],
								"id": "aff5d566-795c-4d5b-abf1-795abefa81d6"
							}
						}
					],
					"_postman_id": "fca077a3-e0a0-4f4e-94be-40a9e9880ee2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/talents/jobs/recommended?truncated=true",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"talents",
								"jobs",
								"recommended"
							],
							"query": [
								{
									"key": "truncated",
									"value": "true",
									"description": "Shall we truncate the description?"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "42860699-8b72-451a-8394-ea9b1b21b4ca"
		},
		{
			"name": "Signup",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const responseJson = pm.response.json();",
							"",
							"var token = responseJson.data.token;",
							"",
							"var jsonData = pm.response.json();",
							"",
							"var id = pm.environment.get(\"var\");",
							"",
							"pm.environment.set(\"var\", id+1);",
							"",
							"",
							"pm.environment.set(\"talent_access_token\", token)",
							"",
							"pm.test(\"Access Token Generated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.token).to.not.be.null;",
							"    pm.expect(pm.response.text()).to.include(\"token\");",
							"});",
							"",
							"pm.environment.set('signupemail',jsonData.data.email)",
							"pm.environment.set('signupid',jsonData.data.id)",
							"pm.environment.set('signupcode',jsonData.data.referral_code)",
							"",
							"",
							"pm.test(\"To get Sign Up Email\", function () {",
							"    pm.expect(jsonData.data.email).to.eql(pm.environment.get(\"signupemail\"));",
							"});",
							"",
							"pm.test(\"To get Sign Up id\", function () {",
							"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"signupid\"));",
							"});",
							"",
							"pm.test(\"To get Sign Up Code\", function () {",
							"    pm.expect(jsonData.data.referral_code).to.eql(pm.environment.get(\"signupcode\"));",
							"});",
							"",
							""
						],
						"id": "8eb4c859-0d12-4aef-a846-7f1aea56a53e"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var id = pm.environment.get(\"var\");\r",
							"\r",
							"if( !id) {\r",
							"    pm.environment.set(\"var\", 1);\r",
							"}"
						],
						"id": "1a58491c-6781-4a6c-8ea4-7c28a53f03e4"
					}
				}
			],
			"_postman_id": "b80765e7-a20e-4ded-b1d7-9c3b64510885",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\":\"test{{id}}@example.com\",\n    \"password\":\"Password123@\",\n    \"password_confirmation\":\"Password123@\"\n}",
					"options": {}
				},
				"url": "{{borderless_service_url}}/api/v1/talents"
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{talent_access_token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0011ded5-0c73-49c6-8d46-244013d0f821",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "a4c3a3d9-ebb1-4945-a3ec-04d157b567eb",
				"type": "text/javascript",
				"exec": [
					"const responseJson = pm.response.json();",
					"",
					"",
					"pm.test(\"The get the success info\", function () {",
					"    var jsonData = pm.response.json();",
					"    pm.expect(jsonData.success).to.be.oneOf([true,false]);",
					"});"
				]
			}
		}
	]
}