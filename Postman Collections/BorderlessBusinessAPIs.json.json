{
	"info": {
		"_postman_id": "bd15162d-2290-4465-9668-2c00ce15a1fd",
		"name": "TEST - BHR 2.0 - Businesses",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"  var jsonData = pm.response.json();\r",
									"\r",
									"var token = responseJson.data.token;\r",
									"\r",
									"pm.environment.set(\"business_access_token\", token)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Access Token Generated\", function () {\r",
									"    pm.expect(jsonData.data.token).to.not.be.null;\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"});\r",
									"\r",
									"pm.environment.set('businessid',jsonData.data.business.id)\r",
									"pm.environment.set('businessname',jsonData.data.business.name)\r",
									"pm.environment.set('userid',jsonData.data.user.id)\r",
									"pm.environment.set('username',jsonData.data.user.name)\r",
									"pm.environment.set('useremail',jsonData.data.user.email)\r",
									"\r",
									"\r",
									"pm.test(\"Business\", function () {\r",
									"    pm.expect(jsonData.data.business.id).to.eql(pm.environment.get(\"businessid\"));\r",
									"    pm.expect(jsonData.data.business.name).to.eql(pm.environment.get(\"businessname\"));\r",
									"});\r",
									"\r",
									"pm.test(\"User\", function () {\r",
									"    pm.expect(jsonData.data.user.id).to.eql(pm.environment.get(\"userid\"));\r",
									"    pm.expect(jsonData.data.user.name).to.eql(pm.environment.get(\"username\"));\r",
									"    pm.expect(jsonData.data.user.email).to.eql(pm.environment.get(\"useremail\"));\r",
									"});\r",
									"\r",
									""
								],
								"id": "69a0b85e-5ae9-4523-bb25-43221c6a022a"
							}
						}
					],
					"_postman_id": "d5a2eb05-0162-4712-8746-7f0a5ace9f68",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"callie37@weimann.net\",\n    \"password\" : \"callie37@weimann.net\"\n}",
							"options": {}
						},
						"url": "{{borderless_service_url}}/api/v1/businesses/auth"
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"id": "31f9e1f6-f2b8-4a3f-a60c-3c48d3c6ba6b"
							}
						}
					],
					"_postman_id": "4bc37b23-5992-470c-b6c0-9ab79c65176d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \" habernathy@huel.com\"\n}",
							"options": {}
						},
						"url": "{{borderless_service_url}}/api/v1/businesses/auth"
					},
					"response": []
				}
			],
			"_postman_id": "20e94df4-dd87-42ec-8343-914b74c776c7"
		},
		{
			"name": "Create/Edit Vacancy Flow",
			"item": [
				{
					"name": "Description",
					"item": [
						{
							"name": "Get Vacancy Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"id": "314d2076-4dbb-473c-becd-dea451215e31"
									}
								}
							],
							"_postman_id": "497f435c-1922-42b4-b3c0-577563e24dea",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id/description",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"businesses",
										"vacancies",
										":vacancy_id",
										"description"
									],
									"variable": [
										{
											"id": "96315537-2040-4ec0-a370-a180580fdca1",
											"key": "vacancy_id",
											"value": "20",
											"description": "Primary key of vacancy of interest",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Vacancy Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set('vacancydescription',jsonData.data.description)\r",
											"pm.environment.set('vacancyrequirements',jsonData.requirements)\r",
											"pm.environment.set('vacancybenefits',jsonData.benefits)\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Update Vacancy Description\", function () {\r",
											"    pm.expect(jsonData.data.description).to.eql(pm.environment.get(\"vacancydescription\"));\r",
											"    pm.expect(jsonData.requirements).to.eql(pm.environment.get(\"vacancyrequirements\"));\r",
											"    pm.expect(jsonData.benefits).to.eql(pm.environment.get(\"vacancybenefits\"));\r",
											"   });"
										],
										"id": "98dde035-62b3-4bf5-bf12-786a1bcf431b"
									}
								}
							],
							"_postman_id": "2b005be7-0b46-4440-bf7f-92ac1b5aabeb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\" : \"<p>We are looking for a qualified Community Coordinator to join our team. If you are a tech-savvy professional, experienced in social media, PR, promotional events and not camera-shy, we would like to meet you. Our ideal candidate has exceptional oral and written communication skills and is able to develop as well as implement engaging content. You should be a ‘people person’ with great customer service skills and the ability to moderate online and offline conversations with our community.</p><p>Ultimately, you should be able to act as the face and voice of our brand and manage all community communications.</p><h3>Community Coordinator Responsibilities:</h3><ul><li>Develop content plan.</li><li>Set and implement social media, communication campaigns and community events to align with marketing strategies</li><li>Provide engaging text, image and video content for social media accounts and events promotions</li><li>Respond to comments and queries in a timely manner</li><li>Monitor and report on feedback and online reviews</li><li>Liaising and negotiating with vendors and partners</li><li>Organize and participate in events to build community and boost brand awareness</li><li>Coordinate with Marketing, PR and Communications teams to ensure brand consistency</li><li>Liaise with Development and Sales departments to stay updated on new products and features</li><li>Build relationships with users, potential users, industry professionals and journalists</li><li>Stay up-to-date with digital technology trends</li></ul><h3>Community Coordinator Requirements:</h3><ul><li>Relevant Degree.</li><li>Previous experience in Community and/or Events Management</li><li>Communication and marketing skills.</li><li>Project management experience.</li><li>Good leadership skills.</li><li>Knowledge of KPIs and marketing techniques for event management</li><li>Outstanding communication and negotiation ability</li><li>Excellent organizational skills</li><li>Good time management.</li><li>Proficiency in various event software.</li><li>Expert interpersonal skills.</li><li>Risk management experience.</li></ul><p><br></p>\",\n    \"requirements\" : \"Nothing required!\",\n    \"benefits\" : \"Lots of benefits!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id/description",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"businesses",
										"vacancies",
										":vacancy_id",
										"description"
									],
									"variable": [
										{
											"id": "9242c84f-5dc4-4421-9f68-548474c10547",
											"key": "vacancy_id",
											"value": "99",
											"description": "Primary key of vacancy of interest",
											"type": "string"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_id": "2b37bcc0-d02f-40c0-964d-d23c924b0842",
					"_postman_isSubFolder": true
				},
				{
					"name": "Priority",
					"item": [
						{
							"name": "Get Vacancy Priorities",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"id": "cc96775b-4f6f-4f6a-b981-b7b028442e5a"
									}
								}
							],
							"_postman_id": "52c95e06-b40b-4bf9-a42f-967bbd92e096",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id/priorities",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"businesses",
										"vacancies",
										":vacancy_id",
										"priorities"
									],
									"variable": [
										{
											"id": "bc0c4b17-dffa-4225-9d7b-4fb077708f5c",
											"key": "vacancy_id",
											"value": "20",
											"description": "Primary key of vacancy of interest",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Vacancy Priorities",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"id": "ae387fa5-0332-46b6-8426-88c05c007d1c"
									}
								}
							],
							"_postman_id": "6b3f944b-76e3-481f-81bb-b293f6c971ea",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"priorities\" : [\n        {\n            \"priority_id\" : 1,\n            \"value\" : 1\n        },\n        {\n            \"priority_id\" : 2,\n            \"value\" : 1\n        },\n        {\n            \"priority_id\" : 3,\n            \"value\" : 1\n        },\n        {\n            \"priority_id\" : 4,\n            \"value\" : 1\n        },\n        {\n            \"priority_id\" : 5,\n            \"value\" : 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id/priorities",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"businesses",
										"vacancies",
										":vacancy_id",
										"priorities"
									],
									"variable": [
										{
											"id": "df3b5a0e-4411-49e9-8e33-7cca082b1cdc",
											"key": "vacancy_id",
											"value": "20",
											"description": "Primary key of vacancy of interest",
											"type": "string"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_id": "7f199d8b-b833-483b-909b-8b6c21ef3518",
					"_postman_isSubFolder": true
				},
				{
					"name": "Skills",
					"item": [
						{
							"name": "Get Vacancy Skills",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"id": "8fc63573-73e8-4efb-b89e-958f587b1e0e"
									}
								}
							],
							"_postman_id": "2c11bce9-a4b9-41b0-b9dc-b94067315537",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id/skills",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"businesses",
										"vacancies",
										":vacancy_id",
										"skills"
									],
									"variable": [
										{
											"id": "35505e80-810d-4706-b5e3-b11aae2ebaf7",
											"key": "vacancy_id",
											"value": "20",
											"description": "Primary key of vacancy of interest",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Vacancy Skills",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"id": "a4eefeda-c1db-4381-89cb-0d9dd4a75143"
									}
								}
							],
							"_postman_id": "15ab156e-1dd2-4e5d-98cb-103db78070de",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"skills\": [\r\n        {\r\n            \"skill_id\": 1,\r\n            \"must_have\": true\r\n        },\r\n        {\r\n            \"skill_id\": 5,\r\n            \"must_have\": false,\r\n            \"min_years\": 3\r\n        },\r\n        {\r\n            \"skill_id\": 15,\r\n            \"must_have\": true,\r\n            \"min_years\": 5\r\n\r\n        }\r\n    ],\r\n    \"priority_id\" : 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id/skills",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"businesses",
										"vacancies",
										":vacancy_id",
										"skills"
									],
									"variable": [
										{
											"id": "b793fd79-db51-4026-8d78-ffee4418b481",
											"key": "vacancy_id",
											"value": "20",
											"description": "Primary key of vacancy of interest",
											"type": "string"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_id": "c95f3950-f400-44e5-9f1c-847d94b1c6b1",
					"_postman_isSubFolder": true
				},
				{
					"name": "Culture Fit",
					"item": [
						{
							"name": "Get  Culture Fit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set('cultureid',jsonData.data.culture_fit[0].id)\r",
											"pm.environment.set('culturename',jsonData.data.culture_fit[0].name)\r",
											"pm.environment.set('culturescore',jsonData.data.culture_fit[0].score)\r",
											"pm.environment.set('cultureid1',jsonData.data.culture_fit[1].id)\r",
											"pm.environment.set('culturename1',jsonData.data.culture_fit[1].name)\r",
											"pm.environment.set('culturescore1',jsonData.data.culture_fit[1].score)\r",
											"pm.environment.set('languagelevelid',jsonData.data.language_level_id)\r",
											"pm.environment.set('languagelevel',jsonData.data.language_level)\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Culture Fit [0]\", function () {\r",
											"    pm.expect(jsonData.data.culture_fit[0].id).to.eql(pm.environment.get(\"cultureid\"));\r",
											"    pm.expect(jsonData.data.culture_fit[0].name).to.eql(pm.environment.get(\"culturename\"));\r",
											"    pm.expect(jsonData.data.culture_fit[0].score).to.eql(pm.environment.get(\"culturescore\"));\r",
											"   });\r",
											"\r",
											"\r",
											"   pm.test(\"Culture Fit [1]\", function () {\r",
											"    pm.expect(jsonData.data.culture_fit[1].id).to.eql(pm.environment.get(\"cultureid1\"));\r",
											"    pm.expect(jsonData.data.culture_fit[1].name).to.eql(pm.environment.get(\"culturename1\"));\r",
											"    pm.expect(jsonData.data.culture_fit[1].score).to.eql(pm.environment.get(\"culturescore1\"));\r",
											"   });\r",
											"\r",
											"   pm.test(\"Language Level\", function () {\r",
											"    pm.expect(jsonData.data.language_level_id).to.eql(pm.environment.get(\"languagelevelid\"));\r",
											"    pm.expect(jsonData.data.language_level).to.eql(pm.environment.get(\"languagelevel\"));\r",
											"   });"
										],
										"id": "de0d31e3-aa2c-4976-956a-e8674558b8fa"
									}
								}
							],
							"_postman_id": "f4541883-012b-4100-9f62-d66dabb6d7bb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id/culture-fit",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"businesses",
										"vacancies",
										":vacancy_id",
										"culture-fit"
									],
									"variable": [
										{
											"id": "07f928b7-661c-40b3-8771-6ce695281206",
											"key": "vacancy_id",
											"value": "99",
											"description": "Primary key of vacancy of interest",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Culture Fit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set('cultureid',jsonData.data.culture_fit[0].id)\r",
											"pm.environment.set('culturename',jsonData.data.culture_fit[0].name)\r",
											"pm.environment.set('culturescore',jsonData.data.culture_fit[0].score)\r",
											"pm.environment.set('cultureid1',jsonData.data.culture_fit[1].id)\r",
											"pm.environment.set('culturename1',jsonData.data.culture_fit[1].name)\r",
											"pm.environment.set('culturescore1',jsonData.data.culture_fit[1].score)\r",
											"pm.environment.set('languagelevelid',jsonData.data.language_level_id)\r",
											"pm.environment.set('languagelevel',jsonData.data.language_level)\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Culture Fit [0]\", function () {\r",
											"    pm.expect(jsonData.data.culture_fit[0].id).to.eql(pm.environment.get(\"cultureid\"));\r",
											"    pm.expect(jsonData.data.culture_fit[0].name).to.eql(pm.environment.get(\"culturename\"));\r",
											"    pm.expect(jsonData.data.culture_fit[0].score).to.eql(pm.environment.get(\"culturescore\"));\r",
											"   });\r",
											"\r",
											"\r",
											"   pm.test(\"Culture Fit [1]\", function () {\r",
											"    pm.expect(jsonData.data.culture_fit[1].id).to.eql(pm.environment.get(\"cultureid1\"));\r",
											"    pm.expect(jsonData.data.culture_fit[1].name).to.eql(pm.environment.get(\"culturename1\"));\r",
											"    pm.expect(jsonData.data.culture_fit[1].score).to.eql(pm.environment.get(\"culturescore1\"));\r",
											"   });\r",
											"\r",
											"   pm.test(\"Language Level\", function () {\r",
											"    pm.expect(jsonData.data.language_level_id).to.eql(pm.environment.get(\"languagelevelid\"));\r",
											"    pm.expect(jsonData.data.language_level).to.eql(pm.environment.get(\"languagelevel\"));\r",
											"   });"
										],
										"id": "872ad03d-4dfc-47eb-8842-fb408b8c6583"
									}
								}
							],
							"_postman_id": "9466f14c-99e9-4d64-94e6-e3ff9f6e6b43",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"culture_fit\": [\r\n        {\r\n            \"culture_fit_id\": 1,\r\n            \"score\": 1\r\n        },\r\n        {\r\n            \"culture_fit_id\": 2,\r\n            \"score\": 3\r\n        }\r\n    ],\r\n    \"language_level_id\" : 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id/culture-fit",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"businesses",
										"vacancies",
										":vacancy_id",
										"culture-fit"
									],
									"variable": [
										{
											"id": "3ad3ca8b-5552-43fd-a508-44935fb553a1",
											"key": "vacancy_id",
											"value": "99",
											"description": "Primary key of vacancy of interest",
											"type": "string"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_id": "df376031-e655-475e-91f1-fa6f2724d1a2",
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Vacancy (QA Engineer)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set('jobtitle',jsonData.data.title)\r",
									"pm.environment.set('jobtypeid',jsonData.data.job_type_id)\r",
									"pm.environment.set('seniorityid',jsonData.data.seniority_id)\r",
									"pm.environment.set('remotetypeid',jsonData.data.remote_type_id)\r",
									"pm.environment.set('degreeid',jsonData.data.degree_id)\r",
									"pm.environment.set('minsalary',jsonData.data.min_salary)\r",
									"pm.environment.set('industryid',jsonData.data.industry_id)\r",
									"pm.environment.set('currencyid',jsonData.data.currency_id)\r",
									"pm.environment.set('businessid',jsonData.data.business_id)\r",
									"pm.environment.set('jobid',jsonData.data.id)\r",
									"\r",
									"\r",
									"pm.test(\"Job Title\", function () {\r",
									"    pm.expect(jsonData.data.title).to.eql(pm.environment.get(\"jobtitle\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"QA Engineer\", function () {\r",
									"    pm.expect(jsonData.data.job_type_id).to.eql(pm.environment.get(\"jobtypeid\"));\r",
									"    pm.expect(jsonData.data.seniority_id).to.eql(pm.environment.get(\"seniorityid\"));\r",
									"    pm.expect(jsonData.data.remote_type_id).to.eql(pm.environment.get(\"remotetypeid\"));\r",
									"    pm.expect(jsonData.data.degree_id).to.eql(pm.environment.get(\"degreeid\"));\r",
									"    pm.expect(jsonData.data.min_salary).to.eql(pm.environment.get(\"minsalary\"));\r",
									"    pm.expect(jsonData.data.industry_id).to.eql(pm.environment.get(\"industryid\"));\r",
									"    pm.expect(jsonData.data.currency_id).to.eql(pm.environment.get(\"currencyid\"));\r",
									"    pm.expect(jsonData.data.business_id).to.eql(pm.environment.get(\"businessid\"));\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"jobid\"));\r",
									"\r",
									"});"
								],
								"id": "30c5f509-7bd6-4f59-9a2f-077114bf5890"
							}
						}
					],
					"_postman_id": "efc0fb5a-346a-4acd-9d34-e76ab8f26e11",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"QA Engineer\",\r\n    \"job_type_id\": 1,\r\n    \"seniority_id\": 3,\r\n    \"currency_id\": \"USD\",\r\n    \"remote_type_id\": 2,\r\n    \"degree_id\": 1,\r\n    \"min_salary\": 5000,\r\n    \"positions\": 2,\r\n    \"industry_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/businesses/vacancies"
					},
					"response": []
				},
				{
					"name": "Create Vacancy (Web Developer)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set('jobtitle',jsonData.data.title)\r",
									"pm.environment.set('jobtypeid',jsonData.data.job_type_id)\r",
									"pm.environment.set('seniorityid',jsonData.data.seniority_id)\r",
									"pm.environment.set('remotetypeid',jsonData.data.remote_type_id)\r",
									"pm.environment.set('degreeid',jsonData.data.degree_id)\r",
									"pm.environment.set('minsalary',jsonData.data.min_salary)\r",
									"pm.environment.set('industryid',jsonData.data.industry_id)\r",
									"pm.environment.set('currencyid',jsonData.data.currency_id)\r",
									"pm.environment.set('businessid',jsonData.data.business_id)\r",
									"pm.environment.set('jobid',jsonData.data.id)\r",
									"\r",
									"\r",
									"pm.test(\"Job Title\", function () {\r",
									"    pm.expect(jsonData.data.title).to.eql(pm.environment.get(\"jobtitle\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Web Developer\", function () {\r",
									"    pm.expect(jsonData.data.job_type_id).to.eql(pm.environment.get(\"jobtypeid\"));\r",
									"    pm.expect(jsonData.data.seniority_id).to.eql(pm.environment.get(\"seniorityid\"));\r",
									"    pm.expect(jsonData.data.remote_type_id).to.eql(pm.environment.get(\"remotetypeid\"));\r",
									"    pm.expect(jsonData.data.degree_id).to.eql(pm.environment.get(\"degreeid\"));\r",
									"    pm.expect(jsonData.data.min_salary).to.eql(pm.environment.get(\"minsalary\"));\r",
									"    pm.expect(jsonData.data.industry_id).to.eql(pm.environment.get(\"industryid\"));\r",
									"    pm.expect(jsonData.data.currency_id).to.eql(pm.environment.get(\"currencyid\"));\r",
									"    pm.expect(jsonData.data.business_id).to.eql(pm.environment.get(\"businessid\"));\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"jobid\"));\r",
									"\r",
									"});"
								],
								"id": "f78534fb-69df-43a1-98a4-075502d0cb60"
							}
						}
					],
					"_postman_id": "e6f0f616-8b37-4902-a456-da12ae6037ad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Web Developer\",\r\n    \"job_type_id\": 1,\r\n    \"seniority_id\": 3,\r\n    \"currency_id\": \"EUR\",\r\n    \"remote_type_id\": 2,\r\n    \"degree_id\": 1,\r\n    \"min_salary\": 6000,\r\n    \"positions\": 2,\r\n    \"industry_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/businesses/vacancies"
					},
					"response": []
				},
				{
					"name": "Create Vacancy (NG Cur)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"QA Engineer\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.title).to.eql(\"Web Developer\");\r",
									"    pm.expect(jsonData.data.job_type_id).to.eql(1);\r",
									"    pm.expect(jsonData.data.seniority_id).to.eql(3);\r",
									"    pm.expect(jsonData.data.remote_type_id).to.eql(2);\r",
									"    pm.expect(jsonData.data.degree_id).to.eql(1);\r",
									"    pm.expect(jsonData.data.min_salary).to.eql(6000);\r",
									"    pm.expect(jsonData.data.industry_id).to.eql(2);\r",
									"    pm.expect(jsonData.data.currency_id).to.eql(\"NG\");\r",
									"    pm.expect(jsonData.data.business_id).to.eql(66);\r",
									"    pm.expect(jsonData.data.id).to.be.a(\"number\");\r",
									"\r",
									"});"
								],
								"id": "4117b027-01a3-4b22-bb61-42b79510d2c0"
							}
						}
					],
					"_postman_id": "0112d1a5-1aeb-4d5b-b6f8-41b7378dc1db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Web Developer\",\r\n    \"job_type_id\": 1,\r\n    \"seniority_id\": 3,\r\n    \"currency_id\": \"NG\",\r\n    \"remote_type_id\": 2,\r\n    \"degree_id\": 1,\r\n    \"min_salary\": 6000,\r\n    \"positions\": 2,\r\n    \"industry_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/businesses/vacancies"
					},
					"response": []
				},
				{
					"name": "Create Vacancy (Empty title)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									""
								],
								"id": "754f85a4-e664-45e8-a500-c719eff89f86"
							}
						}
					],
					"_postman_id": "86a21837-4e37-44df-b9e4-cc7cdfffecaf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"\",\r\n    \"job_type_id\": 1,\r\n    \"seniority_id\": 3,\r\n    \"currency_id\": \"NG\",\r\n    \"remote_type_id\": 2,\r\n    \"degree_id\": 1,\r\n    \"min_salary\": 6000,\r\n    \"positions\": 2,\r\n    \"industry_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/businesses/vacancies"
					},
					"response": []
				},
				{
					"name": "Create Vacancy (Empty currency)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									""
								],
								"id": "094bcc0d-4c91-4654-a5ee-ce42bbdee08c"
							}
						}
					],
					"_postman_id": "083b3ba4-0c43-4a08-93da-37c0a4975d6d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Web Developer\",\r\n    \"job_type_id\": 1,\r\n    \"seniority_id\": 3,\r\n    \"currency_id\": \"\",\r\n    \"remote_type_id\": 2,\r\n    \"degree_id\": 1,\r\n    \"min_salary\": 6000,\r\n    \"positions\": 2,\r\n    \"industry_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/businesses/vacancies"
					},
					"response": []
				},
				{
					"name": "Create Vacancy (Empty Remote id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									""
								],
								"id": "28a1ec5f-3f5d-42c0-aebf-9717238797ad"
							}
						}
					],
					"_postman_id": "601f84fa-1756-4df5-a37a-7b915a48a401",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Web Developer\",\r\n    \"job_type_id\": 1,\r\n    \"seniority_id\": 3,\r\n    \"currency_id\": \"USD\",\r\n    \"remote_type_id\": ,\r\n    \"degree_id\": 1,\r\n    \"min_salary\": 6000,\r\n    \"positions\": 2,\r\n    \"industry_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/businesses/vacancies"
					},
					"response": []
				},
				{
					"name": "Create Vacancy (Empty Min salary)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									""
								],
								"id": "6222305e-de5e-49c6-8ba3-96fb20f4ddee"
							}
						}
					],
					"_postman_id": "3da2e518-1415-4e15-a08a-08b36dc5a105",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Web Developer\",\r\n    \"job_type_id\": 1,\r\n    \"seniority_id\": 3,\r\n    \"currency_id\": \"USD\",\r\n    \"remote_type_id\": 2,\r\n    \"degree_id\": 1,\r\n    \"min_salary\": ,\r\n    \"positions\": 2,\r\n    \"industry_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/businesses/vacancies"
					},
					"response": []
				},
				{
					"name": "Publish Vacancy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set('jobid',jsonData.data.id)\r",
									"pm.environment.set('enablestatus',jsonData.data.enabled)\r",
									"pm.environment.set('jobtitle',jsonData.data.title.title)\r",
									"pm.environment.set('jobindustry',jsonData.data.title.industry)\r",
									"pm.environment.set('jobseniority',jsonData.data.title.seniority)\r",
									"pm.environment.set('jobseniorityid',jsonData.data.title.seniority_id)\r",
									"pm.environment.set('jobtype',jsonData.data.title.job_type)\r",
									"pm.environment.set('jobtypeid',jsonData.data.title.job_type_id)\r",
									"pm.environment.set('remotetype',jsonData.data.title.remote_type)\r",
									"pm.environment.set('remotetypeid',jsonData.data.title.remote_type_id)\r",
									"pm.environment.set('jobdegree',jsonData.data.title.degree)\r",
									"pm.environment.set('jobdegreeid',jsonData.data.title.degree_id)\r",
									"pm.environment.set('minsalary',jsonData.data.title.min_salary)\r",
									"pm.environment.set('jobpositions',jsonData.data.title.positions)\r",
									"pm.environment.set('jobdescription',jsonData.data.description.description)\r",
									"pm.environment.set('jobrequirements',jsonData.data.description.requirements)\r",
									"pm.environment.set('jobbenefits',jsonData.data.description.benefits)\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Publish Vacancy\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"jobid\"));\r",
									"    pm.expect(jsonData.data.enabled).to.eql(pm.environment.get(\"enablestatus\"));\r",
									"    pm.expect(jsonData.data.title.title).to.eql(pm.environment.get(\"jobtitle\"));\r",
									"    pm.expect(jsonData.data.title.industry).to.eql(pm.environment.get(\"jobindustry\"));\r",
									"    pm.expect(jsonData.data.title.seniority).to.eql(pm.environment.get(\"jobseniority\"));\r",
									"    pm.expect(jsonData.data.title.seniority_id).to.eql(pm.environment.get(\"jobseniorityid\"));\r",
									"    pm.expect(jsonData.data.title.job_type).to.eql(pm.environment.get(\"jobtype\"));\r",
									"    pm.expect(jsonData.data.title.job_type_id).to.eql(pm.environment.get(\"jobtypeid\"));\r",
									"    pm.expect(jsonData.data.title.remote_type).to.eql(pm.environment.get(\"remotetype\"));\r",
									"    pm.expect(jsonData.data.title.remote_type_id).to.eql(pm.environment.get(\"remotetypeid\"));\r",
									"     pm.expect(jsonData.data.title.degree).to.eql(pm.environment.get(\"jobdegree\"));\r",
									"     pm.expect(jsonData.data.title.degree_id).to.eql(pm.environment.get(\"jobdegreeid\"));\r",
									"     pm.expect(jsonData.data.title.min_salary).to.eql(pm.environment.get(\"minsalary\"));\r",
									"     pm.expect(jsonData.data.title.positions).to.eql(pm.environment.get(\"jobpositions\"));\r",
									"     pm.expect(jsonData.data.description.description).to.eql(pm.environment.get(\"jobdescription\"));\r",
									"    pm.expect(jsonData.data.description.requirements).to.eql(pm.environment.get(\"jobrequirements\"));\r",
									"    pm.expect(jsonData.data.description.benefits).to.eql(pm.environment.get(\"jobbenefits\"));\r",
									"});\r",
									""
								],
								"id": "c629ecf2-062b-4805-9658-f470ddf8e39f"
							}
						}
					],
					"_postman_id": "f0091f01-1364-47a0-bf6b-c0da59d6d79e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id/published",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"businesses",
								"vacancies",
								":vacancy_id",
								"published"
							],
							"variable": [
								{
									"id": "720a05df-95ee-4bed-8fc2-e704cd427bf7",
									"key": "vacancy_id",
									"value": "99",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Unpublish Vacancy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set('jobid',jsonData.data.id)\r",
									"pm.environment.set('enablestatus',jsonData.data.enabled)\r",
									"pm.environment.set('jobtitle',jsonData.data.title.title)\r",
									"pm.environment.set('jobindustry',jsonData.data.title.industry)\r",
									"pm.environment.set('jobseniority',jsonData.data.title.seniority)\r",
									"pm.environment.set('jobseniorityid',jsonData.data.title.seniority_id)\r",
									"pm.environment.set('jobtype',jsonData.data.title.job_type)\r",
									"pm.environment.set('jobtypeid',jsonData.data.title.job_type_id)\r",
									"pm.environment.set('remotetype',jsonData.data.title.remote_type)\r",
									"pm.environment.set('remotetypeid',jsonData.data.title.remote_type_id)\r",
									"pm.environment.set('jobdegree',jsonData.data.title.degree)\r",
									"pm.environment.set('jobdegreeid',jsonData.data.title.degree_id)\r",
									"pm.environment.set('minsalary',jsonData.data.title.min_salary)\r",
									"pm.environment.set('jobpositions',jsonData.data.title.positions)\r",
									"pm.environment.set('jobdescription',jsonData.data.description.description)\r",
									"pm.environment.set('jobrequirements',jsonData.data.description.requirements)\r",
									"pm.environment.set('jobbenefits',jsonData.data.description.benefits)\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Unpublish Vacancy\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"jobid\"));\r",
									"    pm.expect(jsonData.data.enabled).to.eql(pm.environment.get(\"enablestatus\"));\r",
									"    pm.expect(jsonData.data.title.title).to.eql(pm.environment.get(\"jobtitle\"));\r",
									"    pm.expect(jsonData.data.title.industry).to.eql(pm.environment.get(\"jobindustry\"));\r",
									"    pm.expect(jsonData.data.title.seniority).to.eql(pm.environment.get(\"jobseniority\"));\r",
									"    pm.expect(jsonData.data.title.seniority_id).to.eql(pm.environment.get(\"jobseniorityid\"));\r",
									"    pm.expect(jsonData.data.title.job_type).to.eql(pm.environment.get(\"jobtype\"));\r",
									"    pm.expect(jsonData.data.title.job_type_id).to.eql(pm.environment.get(\"jobtypeid\"));\r",
									"    pm.expect(jsonData.data.title.remote_type).to.eql(pm.environment.get(\"remotetype\"));\r",
									"    pm.expect(jsonData.data.title.remote_type_id).to.eql(pm.environment.get(\"remotetypeid\"));\r",
									"     pm.expect(jsonData.data.title.degree).to.eql(pm.environment.get(\"jobdegree\"));\r",
									"     pm.expect(jsonData.data.title.degree_id).to.eql(pm.environment.get(\"jobdegreeid\"));\r",
									"     pm.expect(jsonData.data.title.min_salary).to.eql(pm.environment.get(\"minsalary\"));\r",
									"     pm.expect(jsonData.data.title.positions).to.eql(pm.environment.get(\"jobpositions\"));\r",
									"     pm.expect(jsonData.data.description.description).to.eql(pm.environment.get(\"jobdescription\"));\r",
									"    pm.expect(jsonData.data.description.requirements).to.eql(pm.environment.get(\"jobrequirements\"));\r",
									"    pm.expect(jsonData.data.description.benefits).to.eql(pm.environment.get(\"jobbenefits\"));\r",
									"});\r",
									""
								],
								"id": "6d1bf821-22a5-40c7-895e-1510555b3309"
							}
						}
					],
					"_postman_id": "786e8a6f-08a9-4e0f-a241-9d16c59bd1e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id/published",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"businesses",
								"vacancies",
								":vacancy_id",
								"published"
							],
							"variable": [
								{
									"id": "f20e11d7-5dda-4d03-af68-58ebff8924f6",
									"key": "vacancy_id",
									"value": "98",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "bddf2b9f-2fde-4e13-96c7-4da6659fc5c9"
		},
		{
			"name": "Vacancies",
			"item": [
				{
					"name": "Offer",
					"item": [
						{
							"name": "Send Offer to Talent (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"id": "8038591d-cb12-4b84-9349-83bfac3543ea"
									}
								}
							],
							"_postman_id": "9ffc1ef1-d8b7-4927-b397-8887dd7253bf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"vacancy_id\" : 20,\n    \"talent_id\"  : 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{borderless_service_url}}/api/v1/businesses/vacancies/offers"
							},
							"response": []
						},
						{
							"name": "Send Offer to Talent(empty vacancy id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.include(\"The vacancy id field is required.\");\r",
											"});"
										],
										"id": "c586d467-d925-4dca-8186-c516ae213633"
									}
								}
							],
							"_postman_id": "7c2d9c5e-98bc-4e30-9239-facdaf3ec5c9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"vacancy_id\" : ,\n    \"talent_id\"  : 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{borderless_service_url}}/api/v1/businesses/vacancies/offers"
							},
							"response": []
						},
						{
							"name": "Send Offer to Talent (empty talent id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Error Message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.include(\"The vacancy id field is required.\");\r",
											"});"
										],
										"id": "a6bb4f75-ebae-45c7-8e31-d900f6a8be4a"
									}
								}
							],
							"_postman_id": "30679917-3b9d-4c65-b2a8-1c3696f8c0f3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"vacancy_id\" : 20,\n    \"talent_id\"  : \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{borderless_service_url}}/api/v1/businesses/vacancies/offers"
							},
							"response": []
						},
						{
							"name": "Unsend Offer to Talent",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"id": "9554e61a-336d-40f8-bd02-3fd0e8a1ce5e"
									}
								}
							],
							"_postman_id": "2b4f7da8-6221-4273-a1ab-5b442d8f0c58",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"vacancy_id\" : 20,\n    \"talent_id\"  : 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{borderless_service_url}}/api/v1/businesses/vacancies/offers"
							},
							"response": []
						}
					],
					"_postman_id": "dde5bf88-20e6-4be0-9f9c-a6d7fdfa9adc",
					"_postman_isSubFolder": true
				},
				{
					"name": "Comments",
					"item": [
						{
							"name": "Create Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set('talentid',jsonData.data.talent_id)\r",
											"pm.environment.set('talentcomment',jsonData.data.comment)\r",
											"pm.environment.set('replyto',jsonData.data.reply_to)\r",
											"pm.environment.set('businessuserid',jsonData.data.business_user_id)\r",
											"pm.environment.set('vacancyid',jsonData.data.vacancy_id)\r",
											"pm.environment.set('updatedat',jsonData.data.updated_at)\r",
											"pm.environment.set('createdat',jsonData.data.created_at)\r",
											"pm.environment.set('talentid2',jsonData.data.id)\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Create Comments\", function () {\r",
											"    pm.expect(jsonData.data.talent_id).to.eql(pm.environment.get(\"talentid\"));\r",
											"    pm.expect(jsonData.data.comment).to.eql(pm.environment.get(\"talentcomment\"));\r",
											"    pm.expect(jsonData.data.reply_to).to.eql(pm.environment.get(\"replyto\"));\r",
											"    pm.expect(jsonData.data.business_user_id).to.eql(pm.environment.get(\"businessuserid\"));\r",
											"    pm.expect(jsonData.data.vacancy_id).to.eql(pm.environment.get(\"vacancyid\"));\r",
											"    pm.expect(jsonData.data.updated_at).to.eql(pm.environment.get(\"updatedat\"));\r",
											"    pm.expect(jsonData.data.created_at).to.eql(pm.environment.get(\"createdat\"));\r",
											"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"talentid2\"));\r",
											"    \r",
											"});"
										],
										"id": "227366fa-6fa8-4320-8806-7b80f1a259b7"
									}
								}
							],
							"_postman_id": "a62b270e-3b03-4811-b495-4857d8db896c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{business_access_token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"talent_id\": 10,\r\n    \"comment\" : \"This is a reply\",\r\n    \"reply_to\": 9\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id/comments",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"businesses",
										"vacancies",
										":vacancy_id",
										"comments"
									],
									"variable": [
										{
											"id": "fc218d65-0da6-45c8-8857-7a3e1f3e2725",
											"key": "vacancy_id",
											"value": "99",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"id": "dac96131-6e19-48ca-ae35-69b8bd60f00d"
									}
								}
							],
							"_postman_id": "37b46086-2ab6-4a18-89c8-4e9525e95862",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{business_access_token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id/comments",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"businesses",
										"vacancies",
										":vacancy_id",
										"comments"
									],
									"variable": [
										{
											"id": "f2782ca6-e3c2-4533-8e27-0f5ed19b373d",
											"key": "vacancy_id",
											"value": "99",
											"type": "string"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_id": "6c898536-f131-416b-b3cc-8d4e59ea4fcf",
					"_postman_isSubFolder": true
				},
				{
					"name": "Talents",
					"item": [
						{
							"name": "List Applied Talents (Sorted)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"id": "bca0dc05-cf01-4383-8f76-0be6d3942141"
									}
								}
							],
							"_postman_id": "58c2ec25-ad04-4552-bd02-3c55bcd6bde3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id/talents",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"businesses",
										"vacancies",
										":vacancy_id",
										"talents"
									],
									"variable": [
										{
											"id": "ed17c1ac-d235-4997-860a-ccf3b3055241",
											"key": "vacancy_id",
											"value": "99",
											"description": "Primary key of vacancy of interest",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Matching Talents",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set('firstlink',jsonData.links.first)\r",
											"pm.environment.set('lastlink',jsonData.links.last)\r",
											"pm.environment.set('prevlink',jsonData.links.prev)\r",
											"pm.environment.set('nextlink',jsonData.links.next)\r",
											"pm.environment.set('currentpage',jsonData.meta.current_page)\r",
											"pm.environment.set('metafrom',jsonData.meta.from)\r",
											"pm.environment.set('lastpage',jsonData.meta.last_page)\r",
											"pm.environment.set('linksurl',jsonData.meta.links[0].url)\r",
											"pm.environment.set('linkslabel',jsonData.meta.links[0].label)\r",
											"pm.environment.set('linksactive',jsonData.meta.links[0].active)\r",
											"pm.environment.set('linksurl1',jsonData.meta.links[1].url)\r",
											"pm.environment.set('linkslabel1',jsonData.meta.links[1].label)\r",
											"pm.environment.set('linksactive1',jsonData.meta.links[1].active)\r",
											"pm.environment.set('linksurl2',jsonData.meta.links[2].url)\r",
											"pm.environment.set('linkslabel2',jsonData.meta.links[2].label)\r",
											"pm.environment.set('linksactive2',jsonData.meta.links[2].active)\r",
											"pm.environment.set('metapath',jsonData.meta.path)\r",
											"pm.environment.set('metaperpage',jsonData.meta.per_page)\r",
											"pm.environment.set('metato',jsonData.meta.to)\r",
											"pm.environment.set('metatotal',jsonData.meta.total)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Matching Talents\", function () {\r",
											"    pm.expect(jsonData.links.first).to.eql(pm.environment.get(\"firstlink\"));\r",
											"    pm.expect(jsonData.links.last).to.eql(pm.environment.get(\"lastlink\"));\r",
											"    pm.expect(jsonData.links.prev).to.eql(pm.environment.get(\"prevlink\"));\r",
											"    pm.expect(jsonData.links.next).to.eql(pm.environment.get(\"nextlink\"));\r",
											"    pm.expect(jsonData.meta.current_page).to.eql(pm.environment.get(\"currentpage\"));\r",
											"    pm.expect(jsonData.meta.from).to.eql(pm.environment.get(\"metafrom\"));\r",
											"    pm.expect(jsonData.meta.last_page).to.eql(pm.environment.get(\"lastpage\"));\r",
											"    pm.expect(jsonData.meta.links[0].url).to.eql(pm.environment.get(\"linksurl\"));\r",
											"    pm.expect(jsonData.meta.links[0].label).to.eql(pm.environment.get(\"linkslabel\"));\r",
											"     pm.expect(jsonData.meta.links[0].active).to.eql(pm.environment.get(\"linksactive\"));\r",
											"     pm.expect(jsonData.meta.links[1].url).to.eql(pm.environment.get(\"linksurl1\"));\r",
											"     pm.expect(jsonData.meta.links[1].label).to.eql(pm.environment.get(\"linkslabel1\"));\r",
											"      pm.expect(jsonData.meta.links[1].active).to.eql(pm.environment.get(\"linksactive1\"));\r",
											"      pm.expect(jsonData.meta.links[2].url).to.eql(pm.environment.get(\"linksurl2\"));\r",
											"      pm.expect(jsonData.meta.links[2].label).to.eql(pm.environment.get(\"linkslabel2\"));\r",
											"      pm.expect(jsonData.meta.links[2].active).to.eql(pm.environment.get(\"linksactive2\"));\r",
											"      pm.expect(jsonData.meta.path).to.eql(pm.environment.get(\"metapath\"));\r",
											"      pm.expect(jsonData.meta.per_page).to.eql(pm.environment.get(\"metaperpage\"));\r",
											"      pm.expect(jsonData.meta.to).to.eql(pm.environment.get(\"metato\"));\r",
											"      pm.expect(jsonData.meta.total).to.eql(pm.environment.get(\"metatotal\"));    \r",
											"});"
										],
										"id": "ab5d1147-5787-4a71-a7d6-ed973a78492b"
									}
								}
							],
							"_postman_id": "21049228-abfc-46db-8db1-e8853df8c290",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id/matches",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"businesses",
										"vacancies",
										":vacancy_id",
										"matches"
									],
									"variable": [
										{
											"id": "f049d910-7bd6-4d89-bf45-34270b60e9cd",
											"key": "vacancy_id",
											"value": "99",
											"description": "Primary key of vacancy of interest",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Talent",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"id": "d818d6b0-3148-4c71-b7f3-3b4800951bea"
									}
								}
							],
							"_postman_id": "0553e1c3-258c-42e1-aac9-bfe20c45a5b6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id/talents/:talent_id",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"businesses",
										"vacancies",
										":vacancy_id",
										"talents",
										":talent_id"
									],
									"variable": [
										{
											"id": "bcdf9dc2-19e3-49f4-a96f-3af8ae5529b9",
											"key": "vacancy_id",
											"value": "112",
											"description": "Primary key of vacancy of interest",
											"type": "string"
										},
										{
											"id": "de479e40-b74b-454d-89f3-15158b50dd3f",
											"key": "talent_id",
											"value": "10",
											"description": "Primary key of talent of interest",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Shortlist Talent for Vacancy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"id": "b4230689-d6dc-421f-a28a-60b8cbfb97a9"
									}
								}
							],
							"_postman_id": "2e33015a-048d-4077-8733-9b07d899eb56",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id/talents/:talent_id/shortlist",
									"host": [
										"{{borderless_service_url}}"
									],
									"path": [
										"api",
										"v1",
										"businesses",
										"vacancies",
										":vacancy_id",
										"talents",
										":talent_id",
										"shortlist"
									],
									"variable": [
										{
											"id": "343f3cd1-46e1-48f7-bd93-7a0793d67926",
											"key": "vacancy_id",
											"value": "99",
											"description": "Primary key of vacancy of interest",
											"type": "string"
										},
										{
											"id": "6ca039ae-02a4-4d83-8beb-56a40d915edc",
											"key": "talent_id",
											"value": "10",
											"description": "Primary key of talent of interest",
											"type": "string"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_id": "c6055a95-a38a-4d64-9f65-a85a9e874eba",
					"auth": {
						"type": "bearer",
						"bearer": {
							"token": "{{business_access_token}}"
						}
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "42a45afe-a76f-4d8f-8211-8b5ba595d41d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b5cece99-aa24-4ea0-bdac-709a83b1627b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "List Vacancies",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set('jobid',jsonData.data[0].id)\r",
									"pm.environment.set('jobtitle',jsonData.data[0].title)\r",
									"pm.environment.set('jobyears',jsonData.data[0].years)\r",
									"pm.environment.set('jobid1',jsonData.data[1].id)\r",
									"pm.environment.set('jobtitle1',jsonData.data[1].title)\r",
									"pm.environment.set('jobyears1',jsonData.data[1].years)\r",
									"pm.environment.set('firstlink',jsonData.links.first)\r",
									"pm.environment.set('lastlink',jsonData.links.last)\r",
									"pm.environment.set('prevlink',jsonData.links.prev)\r",
									"pm.environment.set('nextlink',jsonData.links.next)\r",
									"pm.environment.set('currentpage',jsonData.meta.current_page)\r",
									"pm.environment.set('metafrom',jsonData.meta.from)\r",
									"pm.environment.set('lastpage',jsonData.meta.last_page)\r",
									"pm.environment.set('linksurl',jsonData.meta.links[0].url)\r",
									"pm.environment.set('linkslabel',jsonData.meta.links[0].label)\r",
									"pm.environment.set('linksactive',jsonData.meta.links[0].active)\r",
									"pm.environment.set('linksurl1',jsonData.meta.links[1].url)\r",
									"pm.environment.set('linkslabel1',jsonData.meta.links[1].label)\r",
									"pm.environment.set('linksactive1',jsonData.meta.links[1].active)\r",
									"pm.environment.set('linksurl2',jsonData.meta.links[2].url)\r",
									"pm.environment.set('linkslabel2',jsonData.meta.links[2].label)\r",
									"pm.environment.set('linksactive2',jsonData.meta.links[2].active)\r",
									"pm.environment.set('metapath',jsonData.meta.path)\r",
									"pm.environment.set('metaperpage',jsonData.meta.per_page)\r",
									"pm.environment.set('metato',jsonData.meta.to)\r",
									"pm.environment.set('metatotal',jsonData.meta.total)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"List Vacancies\", function () {\r",
									"    pm.expect(jsonData.data[0].id).to.eql(pm.environment.get(\"jobid\"));\r",
									"    pm.expect(jsonData.data[0].title).to.eql(pm.environment.get(\"jobtitle\"));\r",
									"    pm.expect(jsonData.data[0].years).to.eql(pm.environment.get(\"jobyears\"));\r",
									"    pm.expect(jsonData.data[1].id).to.eql(pm.environment.get(\"jobid1\"));\r",
									"    pm.expect(jsonData.data[1].title).to.eql(pm.environment.get(\"jobtitle1\"));\r",
									"    pm.expect(jsonData.data[1].years).to.eql(pm.environment.get(\"jobyears1\"));\r",
									"    pm.expect(jsonData.links.first).to.eql(pm.environment.get(\"firstlink\"));\r",
									"    pm.expect(jsonData.links.last).to.eql(pm.environment.get(\"lastlink\"));\r",
									"    pm.expect(jsonData.links.prev).to.eql(pm.environment.get(\"prevlink\"));\r",
									"    pm.expect(jsonData.links.next).to.eql(pm.environment.get(\"nextlink\"));\r",
									"    pm.expect(jsonData.meta.current_page).to.eql(pm.environment.get(\"currentpage\"));\r",
									"    pm.expect(jsonData.meta.from).to.eql(pm.environment.get(\"metafrom\"));\r",
									"    pm.expect(jsonData.meta.last_page).to.eql(pm.environment.get(\"lastpage\"));\r",
									"    pm.expect(jsonData.meta.links[0].url).to.eql(pm.environment.get(\"linksurl\"));\r",
									"    pm.expect(jsonData.meta.links[0].label).to.eql(pm.environment.get(\"linkslabel\"));\r",
									"     pm.expect(jsonData.meta.links[0].active).to.eql(pm.environment.get(\"linksactive\"));\r",
									"     pm.expect(jsonData.meta.links[1].url).to.eql(pm.environment.get(\"linksurl1\"));\r",
									"     pm.expect(jsonData.meta.links[1].label).to.eql(pm.environment.get(\"linkslabel1\"));\r",
									"      pm.expect(jsonData.meta.links[1].active).to.eql(pm.environment.get(\"linksactive1\"));\r",
									"      pm.expect(jsonData.meta.links[2].url).to.eql(pm.environment.get(\"linksurl2\"));\r",
									"      pm.expect(jsonData.meta.links[2].label).to.eql(pm.environment.get(\"linkslabel2\"));\r",
									"      pm.expect(jsonData.meta.links[2].active).to.eql(pm.environment.get(\"linksactive2\"));\r",
									"      pm.expect(jsonData.meta.path).to.eql(pm.environment.get(\"metapath\"));\r",
									"      pm.expect(jsonData.meta.per_page).to.eql(pm.environment.get(\"metaperpage\"));\r",
									"      pm.expect(jsonData.meta.to).to.eql(pm.environment.get(\"metato\"));\r",
									"      pm.expect(jsonData.meta.total).to.eql(pm.environment.get(\"metatotal\"));    \r",
									"});"
								],
								"id": "f0655ed6-ae12-4283-88f8-536d2f3a36c9"
							}
						}
					],
					"_postman_id": "196abe54-ea77-4dcc-8a83-ba24c95922a0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{borderless_service_url}}/api/v1/businesses/vacancies"
					},
					"response": []
				},
				{
					"name": "Get Vacancy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set('jobid',jsonData.data.id)\r",
									"pm.environment.set('enablestatus',jsonData.data.enabled)\r",
									"pm.environment.set('jobtitle',jsonData.data.title.title)\r",
									"pm.environment.set('jobindustry',jsonData.data.title.industry)\r",
									"pm.environment.set('jobseniority',jsonData.data.title.seniority)\r",
									"pm.environment.set('jobseniorityid',jsonData.data.title.seniority_id)\r",
									"pm.environment.set('jobtype',jsonData.data.title.job_type)\r",
									"pm.environment.set('jobtypeid',jsonData.data.title.job_type_id)\r",
									"pm.environment.set('remotetype',jsonData.data.title.remote_type)\r",
									"pm.environment.set('remotetypeid',jsonData.data.title.remote_type_id)\r",
									"pm.environment.set('jobdegree',jsonData.data.title.degree)\r",
									"pm.environment.set('jobdegreeid',jsonData.data.title.degree_id)\r",
									"pm.environment.set('minsalary',jsonData.data.title.min_salary)\r",
									"pm.environment.set('jobpositions',jsonData.data.title.positions)\r",
									"pm.environment.set('jobdescription',jsonData.data.description.description)\r",
									"pm.environment.set('jobrequirements',jsonData.data.description.requirements)\r",
									"pm.environment.set('jobbenefits',jsonData.data.description.benefits)\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Get Vacancy\", function () {\r",
									"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"jobid\"));\r",
									"    pm.expect(jsonData.data.enabled).to.eql(pm.environment.get(\"enablestatus\"));\r",
									"    pm.expect(jsonData.data.title.title).to.eql(pm.environment.get(\"jobtitle\"));\r",
									"    pm.expect(jsonData.data.title.industry).to.eql(pm.environment.get(\"jobindustry\"));\r",
									"    pm.expect(jsonData.data.title.seniority).to.eql(pm.environment.get(\"jobseniority\"));\r",
									"    pm.expect(jsonData.data.title.seniority_id).to.eql(pm.environment.get(\"jobseniorityid\"));\r",
									"    pm.expect(jsonData.data.title.job_type).to.eql(pm.environment.get(\"jobtype\"));\r",
									"    pm.expect(jsonData.data.title.job_type_id).to.eql(pm.environment.get(\"jobtypeid\"));\r",
									"    pm.expect(jsonData.data.title.remote_type).to.eql(pm.environment.get(\"remotetype\"));\r",
									"    pm.expect(jsonData.data.title.remote_type_id).to.eql(pm.environment.get(\"remotetypeid\"));\r",
									"     pm.expect(jsonData.data.title.degree).to.eql(pm.environment.get(\"jobdegree\"));\r",
									"     pm.expect(jsonData.data.title.degree_id).to.eql(pm.environment.get(\"jobdegreeid\"));\r",
									"     pm.expect(jsonData.data.title.min_salary).to.eql(pm.environment.get(\"minsalary\"));\r",
									"     pm.expect(jsonData.data.title.positions).to.eql(pm.environment.get(\"jobpositions\"));\r",
									"     pm.expect(jsonData.data.description.description).to.eql(pm.environment.get(\"jobdescription\"));\r",
									"    pm.expect(jsonData.data.description.requirements).to.eql(pm.environment.get(\"jobrequirements\"));\r",
									"    pm.expect(jsonData.data.description.benefits).to.eql(pm.environment.get(\"jobbenefits\"));\r",
									"});\r",
									""
								],
								"id": "8e76e4ec-9a3b-4754-be1d-870882d148ae"
							}
						}
					],
					"_postman_id": "1699800a-5fef-400b-8443-859f1d277363",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"businesses",
								"vacancies",
								":vacancy_id"
							],
							"variable": [
								{
									"id": "a509c61b-eb17-480e-bc39-e55d97b9e96e",
									"key": "vacancy_id",
									"value": "112",
									"description": "Primary key of vacancy of interest",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Vacancy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"id": "26ef5671-c956-4d06-b6c5-3b3963ddd5fe"
							}
						}
					],
					"_postman_id": "d4b36a3e-876d-419b-b0ec-56da81c81ad3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"businesses",
								"vacancies",
								":vacancy_id"
							],
							"variable": [
								{
									"id": "72640023-e118-4d6f-9162-7321f68ba40e",
									"key": "vacancy_id",
									"value": "97",
									"description": "Primary key of vacancy of interest",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "94cfc044-56cc-4c6b-aaef-4d5ec556158e"
		},
		{
			"name": "Password Reset",
			"item": [
				{
					"name": "Request Password Reset",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"id": "06aca8df-21b3-407c-b2ef-4276371e0501"
							}
						}
					],
					"_postman_id": "286519ca-b6ff-4460-aa56-228cd2982eb2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"habernathy@huel.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/businesses/reset-password-request"
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"id": "39a3455e-3969-43aa-8026-dfd220cb7aad"
							}
						}
					],
					"_postman_id": "020f5058-f97f-4114-93e1-247ba8d7d44f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\":\"{{business_access_token}}\",\n    \"email\":\"habernathy@huel.com\",\n    \"password\":\"habernathy@huel.com\",\n    \"password_confirmation\":\"habernathy@huel.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/businesses/reset-password"
					},
					"response": []
				}
			],
			"_postman_id": "5ea902bd-2fc1-4d16-87e0-e7e66ce54107"
		},
		{
			"name": "Application Stages",
			"item": [
				{
					"name": "List Application Stages",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set('appname',jsonData.data[0].name)\r",
									"pm.environment.set('appdescription',jsonData.data[0].description)\r",
									"pm.environment.set('appstage',jsonData.data[0].stage)\r",
									"pm.environment.set('appstagetype',jsonData.data[0].stage_type)\r",
									"pm.environment.set('appstagetypeid',jsonData.data[0].stage_type_id)\r",
									"pm.environment.set('appname1',jsonData.data[1].name)\r",
									"pm.environment.set('appdescription1',jsonData.data[1].description)\r",
									"pm.environment.set('appstage1',jsonData.data[1].stage)\r",
									"pm.environment.set('appstagetype1',jsonData.data[1].stage_type)\r",
									"pm.environment.set('appstagetypeid1',jsonData.data[1].stage_type_id)\r",
									"pm.environment.set('appname2',jsonData.data[2].name)\r",
									"pm.environment.set('appdescription2',jsonData.data[2].description)\r",
									"pm.environment.set('appstage2',jsonData.data[2].stage)\r",
									"pm.environment.set('appstagetype2',jsonData.data[2].stage_type)\r",
									"pm.environment.set('appstagetypeid2',jsonData.data[2].stage_type_id)\r",
									"pm.environment.set('appname3',jsonData.data[3].name)\r",
									"pm.environment.set('appdescription3',jsonData.data[3].description)\r",
									"pm.environment.set('appstage3',jsonData.data[3].stage)\r",
									"pm.environment.set('appstagetype3',jsonData.data[3].stage_type)\r",
									"pm.environment.set('appstagetypeid3',jsonData.data[3].stage_type_id)\r",
									"pm.environment.set('appname4',jsonData.data[4].name)\r",
									"pm.environment.set('appdescription4',jsonData.data[4].description)\r",
									"pm.environment.set('appstage4',jsonData.data[4].stage)\r",
									"pm.environment.set('appstagetype4',jsonData.data[4].stage_type)\r",
									"pm.environment.set('appstagetypeid4',jsonData.data[4].stage_type_id)\r",
									"pm.environment.set('appname5',jsonData.data[5].name)\r",
									"pm.environment.set('appdescription5',jsonData.data[5].description)\r",
									"pm.environment.set('appstage5',jsonData.data[5].stage)\r",
									"pm.environment.set('appstagetype5',jsonData.data[5].stage_type)\r",
									"pm.environment.set('appstagetypeid5',jsonData.data[5].stage_type_id)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Application Stages\", function () {\r",
									"    pm.expect(jsonData.data[0].name).to.eql(pm.environment.get(\"appname\"));\r",
									"    pm.expect(jsonData.data[0].description).to.eql(pm.environment.get(\"appdescription\"));\r",
									"    pm.expect(jsonData.data[0].stage).to.eql(pm.environment.get(\"appstage\"));\r",
									"    pm.expect(jsonData.data[0].stage_type).to.eql(pm.environment.get(\"appstagetype\"));\r",
									"    pm.expect(jsonData.data[0].stage_type_id).to.eql(pm.environment.get(\"appstagetypeid\"));\r",
									"    pm.expect(jsonData.data[1].name).to.eql(pm.environment.get(\"appname1\"));\r",
									"    pm.expect(jsonData.data[1].description).to.eql(pm.environment.get(\"appdescription1\"));\r",
									"    pm.expect(jsonData.data[1].stage).to.eql(pm.environment.get(\"appstage1\"));\r",
									"    pm.expect(jsonData.data[1].stage_type).to.eql(pm.environment.get(\"appstagetype1\"));\r",
									"    pm.expect(jsonData.data[1].stage_type_id).to.eql(pm.environment.get(\"appstagetypeid1\"));\r",
									"    pm.expect(jsonData.data[2].name).to.eql(pm.environment.get(\"appname2\"));\r",
									"    pm.expect(jsonData.data[2].description).to.eql(pm.environment.get(\"appdescription2\"));\r",
									"    pm.expect(jsonData.data[2].stage).to.eql(pm.environment.get(\"appstage2\"));\r",
									"    pm.expect(jsonData.data[2].stage_type).to.eql(pm.environment.get(\"appstagetype2\"));\r",
									"    pm.expect(jsonData.data[2].stage_type_id).to.eql(pm.environment.get(\"appstagetypeid2\"));\r",
									"    pm.expect(jsonData.data[3].name).to.eql(pm.environment.get(\"appname3\"));\r",
									"    pm.expect(jsonData.data[3].description).to.eql(pm.environment.get(\"appdescription3\"));\r",
									"    pm.expect(jsonData.data[3].stage).to.eql(pm.environment.get(\"appstage3\"));\r",
									"    pm.expect(jsonData.data[3].stage_type).to.eql(pm.environment.get(\"appstagetype3\"));\r",
									"    pm.expect(jsonData.data[3].stage_type_id).to.eql(pm.environment.get(\"appstagetypeid3\"));\r",
									"    pm.expect(jsonData.data[4].name).to.eql(pm.environment.get(\"appname4\"));\r",
									"    pm.expect(jsonData.data[4].description).to.eql(pm.environment.get(\"appdescription4\"));\r",
									"    pm.expect(jsonData.data[4].stage).to.eql(pm.environment.get(\"appstage4\"));\r",
									"    pm.expect(jsonData.data[4].stage_type).to.eql(pm.environment.get(\"appstagetype4\"));\r",
									"    pm.expect(jsonData.data[4].stage_type_id).to.eql(pm.environment.get(\"appstagetypeid4\"));\r",
									"    pm.expect(jsonData.data[5].name).to.eql(pm.environment.get(\"appname5\"));\r",
									"    pm.expect(jsonData.data[5].description).to.eql(pm.environment.get(\"appdescription5\"));\r",
									"    pm.expect(jsonData.data[5].stage).to.eql(pm.environment.get(\"appstage5\"));\r",
									"    pm.expect(jsonData.data[5].stage_type).to.eql(pm.environment.get(\"appstagetype5\"));\r",
									"    pm.expect(jsonData.data[5].stage_type_id).to.eql(pm.environment.get(\"appstagetypeid5\"));\r",
									"    \r",
									"});"
								],
								"id": "fbdc7542-591d-42fd-9a36-f79d3ee2c7a6"
							}
						}
					],
					"_postman_id": "b6a180af-fa4d-4940-8980-4ccd896334c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{borderless_service_url}}/api/v1/businesses/application-stages"
					},
					"response": []
				},
				{
					"name": "Add/Update Application Stages",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set('appname',jsonData.data[0].name)\r",
									"pm.environment.set('appdescription',jsonData.data[0].description)\r",
									"pm.environment.set('appstage',jsonData.data[0].stage)\r",
									"pm.environment.set('appstagetype',jsonData.data[0].stage_type)\r",
									"pm.environment.set('appstagetypeid',jsonData.data[0].stage_type_id)\r",
									"pm.environment.set('appname1',jsonData.data[1].name)\r",
									"pm.environment.set('appdescription1',jsonData.data[1].description)\r",
									"pm.environment.set('appstage1',jsonData.data[1].stage)\r",
									"pm.environment.set('appstagetype1',jsonData.data[1].stage_type)\r",
									"pm.environment.set('appstagetypeid1',jsonData.data[1].stage_type_id)\r",
									"pm.environment.set('appname2',jsonData.data[2].name)\r",
									"pm.environment.set('appdescription2',jsonData.data[2].description)\r",
									"pm.environment.set('appstage2',jsonData.data[2].stage)\r",
									"pm.environment.set('appstagetype2',jsonData.data[2].stage_type)\r",
									"pm.environment.set('appstagetypeid2',jsonData.data[2].stage_type_id)\r",
									"pm.environment.set('appname3',jsonData.data[3].name)\r",
									"pm.environment.set('appdescription3',jsonData.data[3].description)\r",
									"pm.environment.set('appstage3',jsonData.data[3].stage)\r",
									"pm.environment.set('appstagetype3',jsonData.data[3].stage_type)\r",
									"pm.environment.set('appstagetypeid3',jsonData.data[3].stage_type_id)\r",
									"pm.environment.set('appname4',jsonData.data[4].name)\r",
									"pm.environment.set('appdescription4',jsonData.data[4].description)\r",
									"pm.environment.set('appstage4',jsonData.data[4].stage)\r",
									"pm.environment.set('appstagetype4',jsonData.data[4].stage_type)\r",
									"pm.environment.set('appstagetypeid4',jsonData.data[4].stage_type_id)\r",
									"pm.environment.set('appname5',jsonData.data[5].name)\r",
									"pm.environment.set('appdescription5',jsonData.data[5].description)\r",
									"pm.environment.set('appstage5',jsonData.data[5].stage)\r",
									"pm.environment.set('appstagetype5',jsonData.data[5].stage_type)\r",
									"pm.environment.set('appstagetypeid5',jsonData.data[5].stage_type_id)\r",
									"pm.environment.set('appname6',jsonData.data[6].name)\r",
									"pm.environment.set('appdescription6',jsonData.data[6].description)\r",
									"pm.environment.set('appstage6',jsonData.data[6].stage)\r",
									"pm.environment.set('appstagetype6',jsonData.data[6].stage_type)\r",
									"pm.environment.set('appstagetypeid6',jsonData.data[6].stage_type_id)\r",
									"pm.environment.set('appname7',jsonData.data[7].name)\r",
									"pm.environment.set('appdescription7',jsonData.data[7].description)\r",
									"pm.environment.set('appstage7',jsonData.data[7].stage)\r",
									"pm.environment.set('appstagetype7',jsonData.data[7].stage_type)\r",
									"pm.environment.set('appstagetypeid7',jsonData.data[7].stage_type_id)\r",
									"pm.environment.set('appname8',jsonData.data[8].name)\r",
									"pm.environment.set('appdescription8',jsonData.data[8].description)\r",
									"pm.environment.set('appstage8',jsonData.data[8].stage)\r",
									"pm.environment.set('appstagetype8',jsonData.data[8].stage_type)\r",
									"pm.environment.set('appstagetypeid8',jsonData.data[8].stage_type_id)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Application Stages\", function () {\r",
									"    pm.expect(jsonData.data[0].name).to.eql(pm.environment.get(\"appname\"));\r",
									"    pm.expect(jsonData.data[0].description).to.eql(pm.environment.get(\"appdescription\"));\r",
									"    pm.expect(jsonData.data[0].stage).to.eql(pm.environment.get(\"appstage\"));\r",
									"    pm.expect(jsonData.data[0].stage_type).to.eql(pm.environment.get(\"appstagetype\"));\r",
									"    pm.expect(jsonData.data[0].stage_type_id).to.eql(pm.environment.get(\"appstagetypeid\"));\r",
									"    pm.expect(jsonData.data[1].name).to.eql(pm.environment.get(\"appname1\"));\r",
									"    pm.expect(jsonData.data[1].description).to.eql(pm.environment.get(\"appdescription1\"));\r",
									"    pm.expect(jsonData.data[1].stage).to.eql(pm.environment.get(\"appstage1\"));\r",
									"    pm.expect(jsonData.data[1].stage_type).to.eql(pm.environment.get(\"appstagetype1\"));\r",
									"    pm.expect(jsonData.data[1].stage_type_id).to.eql(pm.environment.get(\"appstagetypeid1\"));\r",
									"    pm.expect(jsonData.data[2].name).to.eql(pm.environment.get(\"appname2\"));\r",
									"    pm.expect(jsonData.data[2].description).to.eql(pm.environment.get(\"appdescription2\"));\r",
									"    pm.expect(jsonData.data[2].stage).to.eql(pm.environment.get(\"appstage2\"));\r",
									"    pm.expect(jsonData.data[2].stage_type).to.eql(pm.environment.get(\"appstagetype2\"));\r",
									"    pm.expect(jsonData.data[2].stage_type_id).to.eql(pm.environment.get(\"appstagetypeid2\"));\r",
									"    pm.expect(jsonData.data[3].name).to.eql(pm.environment.get(\"appname3\"));\r",
									"    pm.expect(jsonData.data[3].description).to.eql(pm.environment.get(\"appdescription3\"));\r",
									"    pm.expect(jsonData.data[3].stage).to.eql(pm.environment.get(\"appstage3\"));\r",
									"    pm.expect(jsonData.data[3].stage_type).to.eql(pm.environment.get(\"appstagetype3\"));\r",
									"    pm.expect(jsonData.data[3].stage_type_id).to.eql(pm.environment.get(\"appstagetypeid3\"));\r",
									"    pm.expect(jsonData.data[4].name).to.eql(pm.environment.get(\"appname4\"));\r",
									"    pm.expect(jsonData.data[4].description).to.eql(pm.environment.get(\"appdescription4\"));\r",
									"    pm.expect(jsonData.data[4].stage).to.eql(pm.environment.get(\"appstage4\"));\r",
									"    pm.expect(jsonData.data[4].stage_type).to.eql(pm.environment.get(\"appstagetype4\"));\r",
									"    pm.expect(jsonData.data[4].stage_type_id).to.eql(pm.environment.get(\"appstagetypeid4\"));\r",
									"    pm.expect(jsonData.data[5].name).to.eql(pm.environment.get(\"appname5\"));\r",
									"    pm.expect(jsonData.data[5].description).to.eql(pm.environment.get(\"appdescription5\"));\r",
									"    pm.expect(jsonData.data[5].stage).to.eql(pm.environment.get(\"appstage5\"));\r",
									"    pm.expect(jsonData.data[5].stage_type).to.eql(pm.environment.get(\"appstagetype5\"));\r",
									"    pm.expect(jsonData.data[5].stage_type_id).to.eql(pm.environment.get(\"appstagetypeid5\"));\r",
									"\r",
									"    pm.expect(jsonData.data[6].name).to.eql(pm.environment.get(\"appname6\"));\r",
									"    pm.expect(jsonData.data[6].description).to.eql(pm.environment.get(\"appdescription6\"));\r",
									"    pm.expect(jsonData.data[6].stage).to.eql(pm.environment.get(\"appstage6\"));\r",
									"    pm.expect(jsonData.data[6].stage_type).to.eql(pm.environment.get(\"appstagetype6\"));\r",
									"    pm.expect(jsonData.data[6].stage_type_id).to.eql(pm.environment.get(\"appstagetypeid6\"));\r",
									"\r",
									"    pm.expect(jsonData.data[7].name).to.eql(pm.environment.get(\"appname7\"));\r",
									"    pm.expect(jsonData.data[7].description).to.eql(pm.environment.get(\"appdescription7\"));\r",
									"    pm.expect(jsonData.data[7].stage).to.eql(pm.environment.get(\"appstage7\"));\r",
									"    pm.expect(jsonData.data[7].stage_type).to.eql(pm.environment.get(\"appstagetype7\"));\r",
									"    pm.expect(jsonData.data[7].stage_type_id).to.eql(pm.environment.get(\"appstagetypeid7\"));\r",
									"\r",
									"    pm.expect(jsonData.data[8].name).to.eql(pm.environment.get(\"appname8\"));\r",
									"    pm.expect(jsonData.data[8].description).to.eql(pm.environment.get(\"appdescription8\"));\r",
									"    pm.expect(jsonData.data[8].stage).to.eql(pm.environment.get(\"appstage8\"));\r",
									"    pm.expect(jsonData.data[8].stage_type).to.eql(pm.environment.get(\"appstagetype8\"));\r",
									"    pm.expect(jsonData.data[8].stage_type_id).to.eql(pm.environment.get(\"appstagetypeid8\"));\r",
									"    \r",
									"});"
								],
								"id": "5ad0a483-f156-407e-8862-f32fd22f7e99"
							}
						}
					],
					"_postman_id": "dc44d760-cc97-484d-9d02-fbf86d5dc530",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"stages\" : [\n       {\n            \"name\": \"Applied\",\n            \"stage\": 1,\n            \"stage_type_id\": 1\n        },\n        {\n            \"name\": \"In Review\",\n            \"stage\": 2,\n            \"stage_type_id\": 2\n        },\n        {\n            \"name\": \"Shortlisted\",\n            \"stage\": 3,\n            \"stage_type_id\": 4\n        },\n        {\n            \"name\": \"Interviewing I\",\n            \"stage\": 4,\n            \"stage_type_id\": 6\n        },\n        {\n            \"name\": \"Interviewing II\",\n            \"stage\": 5,\n            \"stage_type_id\": 6\n        },\n        {\n            \"name\": \"Interviewing III\",\n            \"stage\": 6,\n            \"stage_type_id\": 6\n        },\n        {\n            \"name\": \"Hired\",\n            \"stage\": 98,\n            \"stage_type_id\": 9\n        },\n        {\n            \"name\": \"Fired\",\n            \"stage\": 99,\n            \"stage_type_id\": 10\n        },\n        {\n            \"name\": \"Withdrawn\",\n            \"stage\": 100,\n            \"stage_type_id\": 11\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/businesses/application-stages"
					},
					"response": []
				}
			],
			"_postman_id": "93cdcb20-c460-44da-90bc-8f9b3f1b82e9"
		},
		{
			"name": "Talents",
			"item": [
				{
					"name": "Fetch Talent Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"id": "1433612c-95ed-416a-b877-8b62440ccf62"
							}
						}
					],
					"_postman_id": "8751a3ad-a63b-489a-9ac1-472fa327dbe0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{borderless_service_url}}/api/v1/businesses/vacancies/:vacancy_id/talents/:talent_id",
							"host": [
								"{{borderless_service_url}}"
							],
							"path": [
								"api",
								"v1",
								"businesses",
								"vacancies",
								":vacancy_id",
								"talents",
								":talent_id"
							],
							"variable": [
								{
									"id": "99b3b9bc-9634-4576-b79a-3f195210084c",
									"key": "vacancy_id",
									"value": "112",
									"description": "Primary key of vacancy of interest",
									"type": "string"
								},
								{
									"id": "3d43e34e-cadb-463e-bec9-d9f3ac788554",
									"key": "talent_id",
									"value": "6040",
									"description": "Primary key of talent of interest",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "0f55a1c3-5155-4cca-a1a9-f8ec7b32506a"
		},
		{
			"name": "Business User Profile",
			"item": [
				{
					"name": "Update Business User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set('firstname',jsonData.data.first_name)\r",
									"pm.environment.set('lastname',jsonData.data.last_name)\r",
									"pm.environment.set('businessemail',jsonData.data.email)\r",
									"pm.environment.set('businessaddress',jsonData.data.address)\r",
									"pm.environment.set('businessenabled',jsonData.data.enabled)\r",
									"pm.environment.set('countryid',jsonData.data.country.id)\r",
									"pm.environment.set('countryname',jsonData.data.country.name)\r",
									"pm.environment.set('stateid',jsonData.data.state.id)\r",
									"pm.environment.set('statename',jsonData.data.state.name)\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Business User Profile\", function () {\r",
									"    pm.expect(jsonData.data.first_name).to.eql(pm.environment.get(\"firstname\"));\r",
									"    pm.expect(jsonData.data.last_name).to.eql(pm.environment.get(\"lastname\"));\r",
									"    pm.expect(jsonData.data.email).to.eql(pm.environment.get(\"businessemail\"));\r",
									"    pm.expect(jsonData.data.address).to.eql(pm.environment.get(\"businessaddress\"));\r",
									"    pm.expect(jsonData.data.enabled).to.eql(pm.environment.get(\"businessenabled\"));\r",
									"    pm.expect(jsonData.data.country.id).to.eql(pm.environment.get(\"countryid\"));\r",
									"    pm.expect(jsonData.data.country.name).to.eql(pm.environment.get(\"countryname\"));\r",
									"    pm.expect(jsonData.data.state.id).to.eql(pm.environment.get(\"stateid\"));\r",
									"    pm.expect(jsonData.data.state.name).to.eql(pm.environment.get(\"statename\"));\r",
									"        \r",
									"});"
								],
								"id": "c33a1707-46f4-4012-abc3-21e207367ea1"
							}
						}
					],
					"_postman_id": "c078d9ef-57aa-46e8-85da-8d0b41bfebde",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Alemhulu\",\n    \"last_name\": \"Awekelgne\",\n    \"email\": \"hi1@borderlesshr.com\",\n    \"phone\": 2349098861745,\n    \"country_id\": \"AD\",\n    \"state_id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/businesses/profile",
						"description": "- update Business user profile\n- you can use enabled field to disable an user account\n"
					},
					"response": []
				},
				{
					"name": "Fetch Business User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set('firstname',jsonData.data.first_name)\r",
									"pm.environment.set('lastname',jsonData.data.last_name)\r",
									"pm.environment.set('businessemail',jsonData.data.email)\r",
									"pm.environment.set('businessaddress',jsonData.data.address)\r",
									"pm.environment.set('businessenabled',jsonData.data.enabled)\r",
									"pm.environment.set('countryid',jsonData.data.country.id)\r",
									"pm.environment.set('countryname',jsonData.data.country.name)\r",
									"pm.environment.set('stateid',jsonData.data.state.id)\r",
									"pm.environment.set('statename',jsonData.data.state.name)\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Business User Profile\", function () {\r",
									"    pm.expect(jsonData.data.first_name).to.eql(pm.environment.get(\"firstname\"));\r",
									"    pm.expect(jsonData.data.last_name).to.eql(pm.environment.get(\"lastname\"));\r",
									"    pm.expect(jsonData.data.email).to.eql(pm.environment.get(\"businessemail\"));\r",
									"    pm.expect(jsonData.data.address).to.eql(pm.environment.get(\"businessaddress\"));\r",
									"    pm.expect(jsonData.data.enabled).to.eql(pm.environment.get(\"businessenabled\"));\r",
									"    pm.expect(jsonData.data.country.id).to.eql(pm.environment.get(\"countryid\"));\r",
									"    pm.expect(jsonData.data.country.name).to.eql(pm.environment.get(\"countryname\"));\r",
									"    pm.expect(jsonData.data.state.id).to.eql(pm.environment.get(\"stateid\"));\r",
									"    pm.expect(jsonData.data.state.name).to.eql(pm.environment.get(\"statename\"));\r",
									"        \r",
									"});"
								],
								"id": "4792b2c8-a1a0-49e3-b060-ae649aca088d"
							}
						}
					],
					"_postman_id": "9a62f97f-3cee-43db-a926-e7dea118f34e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{borderless_service_url}}/api/v1/businesses/profile"
					},
					"response": []
				}
			],
			"_postman_id": "816f6b80-0fde-47a6-8b6e-65ee2975fbce"
		},
		{
			"name": "Employer Profile",
			"item": [
				{
					"name": "Fetch Profile Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set('visibilityname',jsonData.data.visibility.name)\r",
									"pm.environment.set('visibilityid',jsonData.data.visibility.id)\r",
									"pm.environment.set('infoname',jsonData.data.info.name)\r",
									"pm.environment.set('infowebsite',jsonData.data.info.website)\r",
									"pm.environment.set('infoaddress',jsonData.data.info.address)\r",
									"pm.environment.set('infoyear',jsonData.data.info.year_founded)\r",
									"pm.environment.set('infosize',jsonData.data.info.size)\r",
									"pm.environment.set('infosizeid',jsonData.data.info.size_id)\r",
									"pm.environment.set('infoindustry',jsonData.data.info.industry)\r",
									"pm.environment.set('infoindustryid',jsonData.data.info.industry_id)\r",
									"pm.environment.set('missionstatement',jsonData.data.story.mission_statement)\r",
									"pm.environment.set('profilestory',jsonData.data.story.story)\r",
									"pm.environment.set('valuesid',jsonData.data.culture_fit.Values[0].id)\r",
									"pm.environment.set('valuesname',jsonData.data.culture_fit.Values[0].name)\r",
									"pm.environment.set('valuesscore',jsonData.data.culture_fit.Values[0].score)\r",
									"\r",
									"pm.environment.set('valuesid1',jsonData.data.culture_fit.Values[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].id)\r",
									"pm.environment.set('valuesname1',jsonData.data.culture_fit.Values[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].name)\r",
									"\r",
									"pm.environment.set('valuesscore1',jsonData.data.culture_fit.Values[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].score)\r",
									"\r",
									"pm.environment.set('Behaviorsid',jsonData.data.culture_fit.Behaviors[0].id)\r",
									"pm.environment.set('Behaviorsname',jsonData.data.culture_fit.Behaviors[0].name)\r",
									"pm.environment.set('Behaviorsscore',jsonData.data.culture_fit.Behaviors[0].score)\r",
									"\r",
									"pm.environment.set('Behaviorsid1',jsonData.data.culture_fit.Behaviors[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].id)\r",
									"\r",
									"pm.environment.set('Behaviorsname1',jsonData.data.culture_fit.Behaviors[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].name)\r",
									"\r",
									"pm.environment.set('Behaviorsscore1',jsonData.data.culture_fit.Behaviors[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].score)\r",
									"\r",
									"pm.environment.set('Motivationsid',jsonData.data.culture_fit.Motivations[0].id)\r",
									"pm.environment.set('Motivationsname',jsonData.data.culture_fit.Motivations[0].name)\r",
									"pm.environment.set('Motivationsscore',jsonData.data.culture_fit.Motivations[0].score)\r",
									"pm.environment.set('Motivationsid1',jsonData.data.culture_fit.Motivations[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].id)\r",
									"pm.environment.set('Motivationsname1',jsonData.data.culture_fit.Motivations[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].name)\r",
									"pm.environment.set('Motivationsscore1',jsonData.data.culture_fit.Motivations[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].score)\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Profile Details\", function () {\r",
									"    pm.expect(jsonData.data.visibility.name).to.eql(pm.environment.get(\"visibilityname\"));\r",
									"    pm.expect(jsonData.data.visibility.id).to.eql(pm.environment.get(\"visibilityid\"));\r",
									"    pm.expect(jsonData.data.info.name).to.eql(pm.environment.get(\"infoname\"));\r",
									"    pm.expect(jsonData.data.info.website).to.eql(pm.environment.get(\"infowebsite\"));\r",
									"    pm.expect(jsonData.data.info.address).to.eql(pm.environment.get(\"infoaddress\"));\r",
									"    pm.expect(jsonData.data.info.year_founded).to.eql(pm.environment.get(\"infoyear\"));\r",
									"    pm.expect(jsonData.data.info.size).to.eql(pm.environment.get(\"infosize\"));\r",
									"    pm.expect(jsonData.data.info.size_id).to.eql(pm.environment.get(\"infosizeid\"));\r",
									"    pm.expect(jsonData.data.info.industry).to.eql(pm.environment.get(\"infoindustry\"));\r",
									"    pm.expect(jsonData.data.info.industry_id).to.eql(pm.environment.get(\"infoindustryid\"));\r",
									"    pm.expect(jsonData.data.story.mission_statement).to.eql(pm.environment.get(\"missionstatement\"));\r",
									"    pm.expect(jsonData.data.story.story).to.eql(pm.environment.get(\"profilestory\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Values[0].id).to.eql(pm.environment.get(\"valuesid\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Values[0].name).to.eql(pm.environment.get(\"valuesname\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Values[0].score).to.eql(pm.environment.get(\"valuesscore\")); \r",
									"    pm.expect(jsonData.data.culture_fit.Values[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].id).to.eql(pm.environment.get(\"valuesid1\"));\r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Values[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].name).to.eql(pm.environment.get(\"valuesname1\"));\r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Values[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].score).to.eql(pm.environment.get(\"valuesscore1\")); \r",
									"    \r",
									"    pm.expect(jsonData.data.culture_fit.Behaviors[0].id).to.eql(pm.environment.get(\"Behaviorsid\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Behaviors[0].name).to.eql(pm.environment.get(\"Behaviorsname\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Behaviors[0].score).to.eql(pm.environment.get(\"Behaviorsscore\")); \r",
									"    pm.expect(jsonData.data.culture_fit.Behaviors[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].id).to.eql(pm.environment.get(\"Behaviorsid1\"));\r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Behaviors[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].name).to.eql(pm.environment.get(\"Behaviorsname1\"));\r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Behaviors[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].score).to.eql(pm.environment.get(\"Behaviorsscore1\"));\r",
									"\r",
									"     pm.expect(jsonData.data.culture_fit.Motivations[0].id).to.eql(pm.environment.get(\"Motivationsid\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Motivations[0].name).to.eql(pm.environment.get(\"Motivationsname\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Motivations[0].score).to.eql(pm.environment.get(\"Motivationsscore\")); \r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Motivations[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].id).to.eql(pm.environment.get(\"Motivationsid1\"));\r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Motivations[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].name).to.eql(pm.environment.get(\"Motivationsname1\"));\r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Motivations[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].score).to.eql(pm.environment.get(\"Motivationsscore1\"));\r",
									"});"
								],
								"id": "471c5adb-7542-4e23-bdf0-cf2b953d8963"
							}
						}
					],
					"_postman_id": "0f723528-03f4-4c64-971f-71e83f861027",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{borderless_service_url}}/api/v1/businesses/employer-profile"
					},
					"response": []
				},
				{
					"name": "Update Profile Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set('visibilityname',jsonData.data.visibility.name)\r",
									"pm.environment.set('visibilityid',jsonData.data.visibility.id)\r",
									"pm.environment.set('infoname',jsonData.data.info.name)\r",
									"pm.environment.set('infowebsite',jsonData.data.info.website)\r",
									"pm.environment.set('infoaddress',jsonData.data.info.address)\r",
									"pm.environment.set('infoyear',jsonData.data.info.year_founded)\r",
									"pm.environment.set('infosize',jsonData.data.info.size)\r",
									"pm.environment.set('infosizeid',jsonData.data.info.size_id)\r",
									"pm.environment.set('infoindustry',jsonData.data.info.industry)\r",
									"pm.environment.set('infoindustryid',jsonData.data.info.industry_id)\r",
									"pm.environment.set('missionstatement',jsonData.data.story.mission_statement)\r",
									"pm.environment.set('profilestory',jsonData.data.story.story)\r",
									"pm.environment.set('valuesid',jsonData.data.culture_fit.Values[0].id)\r",
									"pm.environment.set('valuesname',jsonData.data.culture_fit.Values[0].name)\r",
									"pm.environment.set('valuesscore',jsonData.data.culture_fit.Values[0].score)\r",
									"\r",
									"pm.environment.set('valuesid1',jsonData.data.culture_fit.Values[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].id)\r",
									"pm.environment.set('valuesname1',jsonData.data.culture_fit.Values[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].name)\r",
									"\r",
									"pm.environment.set('valuesscore1',jsonData.data.culture_fit.Values[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].score)\r",
									"\r",
									"pm.environment.set('Behaviorsid',jsonData.data.culture_fit.Behaviors[0].id)\r",
									"pm.environment.set('Behaviorsname',jsonData.data.culture_fit.Behaviors[0].name)\r",
									"pm.environment.set('Behaviorsscore',jsonData.data.culture_fit.Behaviors[0].score)\r",
									"\r",
									"pm.environment.set('Behaviorsid1',jsonData.data.culture_fit.Behaviors[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].id)\r",
									"\r",
									"pm.environment.set('Behaviorsname1',jsonData.data.culture_fit.Behaviors[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].name)\r",
									"\r",
									"pm.environment.set('Behaviorsscore1',jsonData.data.culture_fit.Behaviors[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].score)\r",
									"\r",
									"pm.environment.set('Motivationsid',jsonData.data.culture_fit.Motivations[0].id)\r",
									"pm.environment.set('Motivationsname',jsonData.data.culture_fit.Motivations[0].name)\r",
									"pm.environment.set('Motivationsscore',jsonData.data.culture_fit.Motivations[0].score)\r",
									"pm.environment.set('Motivationsid1',jsonData.data.culture_fit.Motivations[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].id)\r",
									"pm.environment.set('Motivationsname1',jsonData.data.culture_fit.Motivations[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].name)\r",
									"pm.environment.set('Motivationsscore1',jsonData.data.culture_fit.Motivations[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].score)\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Update Profile Details\", function () {\r",
									"    pm.expect(jsonData.data.visibility.name).to.eql(pm.environment.get(\"visibilityname\"));\r",
									"    pm.expect(jsonData.data.visibility.id).to.eql(pm.environment.get(\"visibilityid\"));\r",
									"    pm.expect(jsonData.data.info.name).to.eql(pm.environment.get(\"infoname\"));\r",
									"    pm.expect(jsonData.data.info.website).to.eql(pm.environment.get(\"infowebsite\"));\r",
									"    pm.expect(jsonData.data.info.address).to.eql(pm.environment.get(\"infoaddress\"));\r",
									"    pm.expect(jsonData.data.info.year_founded).to.eql(pm.environment.get(\"infoyear\"));\r",
									"    pm.expect(jsonData.data.info.size).to.eql(pm.environment.get(\"infosize\"));\r",
									"    pm.expect(jsonData.data.info.size_id).to.eql(pm.environment.get(\"infosizeid\"));\r",
									"    pm.expect(jsonData.data.info.industry).to.eql(pm.environment.get(\"infoindustry\"));\r",
									"    pm.expect(jsonData.data.info.industry_id).to.eql(pm.environment.get(\"infoindustryid\"));\r",
									"    pm.expect(jsonData.data.story.mission_statement).to.eql(pm.environment.get(\"missionstatement\"));\r",
									"    pm.expect(jsonData.data.story.story).to.eql(pm.environment.get(\"profilestory\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Values[0].id).to.eql(pm.environment.get(\"valuesid\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Values[0].name).to.eql(pm.environment.get(\"valuesname\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Values[0].score).to.eql(pm.environment.get(\"valuesscore\")); \r",
									"    pm.expect(jsonData.data.culture_fit.Values[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].id).to.eql(pm.environment.get(\"valuesid1\"));\r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Values[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].name).to.eql(pm.environment.get(\"valuesname1\"));\r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Values[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].score).to.eql(pm.environment.get(\"valuesscore1\")); \r",
									"    \r",
									"    pm.expect(jsonData.data.culture_fit.Behaviors[0].id).to.eql(pm.environment.get(\"Behaviorsid\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Behaviors[0].name).to.eql(pm.environment.get(\"Behaviorsname\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Behaviors[0].score).to.eql(pm.environment.get(\"Behaviorsscore\")); \r",
									"    pm.expect(jsonData.data.culture_fit.Behaviors[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].id).to.eql(pm.environment.get(\"Behaviorsid1\"));\r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Behaviors[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].name).to.eql(pm.environment.get(\"Behaviorsname1\"));\r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Behaviors[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].score).to.eql(pm.environment.get(\"Behaviorsscore1\"));\r",
									"\r",
									"     pm.expect(jsonData.data.culture_fit.Motivations[0].id).to.eql(pm.environment.get(\"Motivationsid\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Motivations[0].name).to.eql(pm.environment.get(\"Motivationsname\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Motivations[0].score).to.eql(pm.environment.get(\"Motivationsscore\")); \r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Motivations[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].id).to.eql(pm.environment.get(\"Motivationsid1\"));\r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Motivations[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].name).to.eql(pm.environment.get(\"Motivationsname1\"));\r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Motivations[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].score).to.eql(pm.environment.get(\"Motivationsscore1\"));\r",
									"});"
								],
								"id": "a8696c2d-e4d5-445a-8762-4cc174725e8e"
							}
						}
					],
					"_postman_id": "8ea6bb0d-95c2-4ad5-8d7a-e1f2bf7f6b63",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"visibility\" : 1,\n    \"name\": \"BorderlessHR Inc.\",\n    \"website\": \"https://borderlesshr.com\",\n    \"address\": \"Ottawa, ON\",\n    \"year_founded\": 2021,\n    \"size_id\": 1,\n    \"industry_id\": 31,\n    \"mission_statement\" : \"Mission statement goes here\",\n    \"story\" : \"Company story goes here\",\n    \"culture_fit\" : [\n        {\n                \"culture_fit_id\": 5,\n                \"score\": 1\n            },\n            {\n                \"culture_fit_id\": 7,\n                \"score\": 2\n            },\n            {\n                \"culture_fit_id\": 12,\n                \"score\": 3\n            }\n    ]\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/businesses/employer-profile"
					},
					"response": []
				},
				{
					"name": "Update Culture Fit",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set('visibilityname',jsonData.data.visibility.name)\r",
									"pm.environment.set('visibilityid',jsonData.data.visibility.id)\r",
									"pm.environment.set('infoname',jsonData.data.info.name)\r",
									"pm.environment.set('infowebsite',jsonData.data.info.website)\r",
									"pm.environment.set('infoaddress',jsonData.data.info.address)\r",
									"pm.environment.set('infoyear',jsonData.data.info.year_founded)\r",
									"pm.environment.set('infosize',jsonData.data.info.size)\r",
									"pm.environment.set('infosizeid',jsonData.data.info.size_id)\r",
									"pm.environment.set('infoindustry',jsonData.data.info.industry)\r",
									"pm.environment.set('infoindustryid',jsonData.data.info.industry_id)\r",
									"pm.environment.set('missionstatement',jsonData.data.story.mission_statement)\r",
									"pm.environment.set('profilestory',jsonData.data.story.story)\r",
									"pm.environment.set('valuesid',jsonData.data.culture_fit.Values[0].id)\r",
									"pm.environment.set('valuesname',jsonData.data.culture_fit.Values[0].name)\r",
									"pm.environment.set('valuesscore',jsonData.data.culture_fit.Values[0].score)\r",
									"\r",
									"pm.environment.set('valuesid1',jsonData.data.culture_fit.Values[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].id)\r",
									"pm.environment.set('valuesname1',jsonData.data.culture_fit.Values[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].name)\r",
									"\r",
									"pm.environment.set('valuesscore1',jsonData.data.culture_fit.Values[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].score)\r",
									"\r",
									"pm.environment.set('Behaviorsid',jsonData.data.culture_fit.Behaviors[0].id)\r",
									"pm.environment.set('Behaviorsname',jsonData.data.culture_fit.Behaviors[0].name)\r",
									"pm.environment.set('Behaviorsscore',jsonData.data.culture_fit.Behaviors[0].score)\r",
									"\r",
									"pm.environment.set('Behaviorsid1',jsonData.data.culture_fit.Behaviors[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].id)\r",
									"\r",
									"pm.environment.set('Behaviorsname1',jsonData.data.culture_fit.Behaviors[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].name)\r",
									"\r",
									"pm.environment.set('Behaviorsscore1',jsonData.data.culture_fit.Behaviors[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].score)\r",
									"\r",
									"pm.environment.set('Motivationsid',jsonData.data.culture_fit.Motivations[0].id)\r",
									"pm.environment.set('Motivationsname',jsonData.data.culture_fit.Motivations[0].name)\r",
									"pm.environment.set('Motivationsscore',jsonData.data.culture_fit.Motivations[0].score)\r",
									"pm.environment.set('Motivationsid1',jsonData.data.culture_fit.Motivations[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].id)\r",
									"pm.environment.set('Motivationsname1',jsonData.data.culture_fit.Motivations[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].name)\r",
									"pm.environment.set('Motivationsscore1',jsonData.data.culture_fit.Motivations[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].score)\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Update Culture Fit\", function () {\r",
									"    pm.expect(jsonData.data.visibility.name).to.eql(pm.environment.get(\"visibilityname\"));\r",
									"    pm.expect(jsonData.data.visibility.id).to.eql(pm.environment.get(\"visibilityid\"));\r",
									"    pm.expect(jsonData.data.info.name).to.eql(pm.environment.get(\"infoname\"));\r",
									"    pm.expect(jsonData.data.info.website).to.eql(pm.environment.get(\"infowebsite\"));\r",
									"    pm.expect(jsonData.data.info.address).to.eql(pm.environment.get(\"infoaddress\"));\r",
									"    pm.expect(jsonData.data.info.year_founded).to.eql(pm.environment.get(\"infoyear\"));\r",
									"    pm.expect(jsonData.data.info.size).to.eql(pm.environment.get(\"infosize\"));\r",
									"    pm.expect(jsonData.data.info.size_id).to.eql(pm.environment.get(\"infosizeid\"));\r",
									"    pm.expect(jsonData.data.info.industry).to.eql(pm.environment.get(\"infoindustry\"));\r",
									"    pm.expect(jsonData.data.info.industry_id).to.eql(pm.environment.get(\"infoindustryid\"));\r",
									"    pm.expect(jsonData.data.story.mission_statement).to.eql(pm.environment.get(\"missionstatement\"));\r",
									"    pm.expect(jsonData.data.story.story).to.eql(pm.environment.get(\"profilestory\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Values[0].id).to.eql(pm.environment.get(\"valuesid\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Values[0].name).to.eql(pm.environment.get(\"valuesname\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Values[0].score).to.eql(pm.environment.get(\"valuesscore\")); \r",
									"    pm.expect(jsonData.data.culture_fit.Values[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].id).to.eql(pm.environment.get(\"valuesid1\"));\r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Values[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].name).to.eql(pm.environment.get(\"valuesname1\"));\r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Values[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].score).to.eql(pm.environment.get(\"valuesscore1\")); \r",
									"    \r",
									"    pm.expect(jsonData.data.culture_fit.Behaviors[0].id).to.eql(pm.environment.get(\"Behaviorsid\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Behaviors[0].name).to.eql(pm.environment.get(\"Behaviorsname\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Behaviors[0].score).to.eql(pm.environment.get(\"Behaviorsscore\")); \r",
									"    pm.expect(jsonData.data.culture_fit.Behaviors[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].id).to.eql(pm.environment.get(\"Behaviorsid1\"));\r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Behaviors[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].name).to.eql(pm.environment.get(\"Behaviorsname1\"));\r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Behaviors[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47].score).to.eql(pm.environment.get(\"Behaviorsscore1\"));\r",
									"\r",
									"     pm.expect(jsonData.data.culture_fit.Motivations[0].id).to.eql(pm.environment.get(\"Motivationsid\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Motivations[0].name).to.eql(pm.environment.get(\"Motivationsname\"));\r",
									"    pm.expect(jsonData.data.culture_fit.Motivations[0].score).to.eql(pm.environment.get(\"Motivationsscore\")); \r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Motivations[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].id).to.eql(pm.environment.get(\"Motivationsid1\"));\r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Motivations[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].name).to.eql(pm.environment.get(\"Motivationsname1\"));\r",
									"\r",
									"    pm.expect(jsonData.data.culture_fit.Motivations[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].score).to.eql(pm.environment.get(\"Motivationsscore1\"));\r",
									"});"
								],
								"id": "c040d27a-fd94-44bd-a0ed-603a0ca6f871"
							}
						}
					],
					"_postman_id": "f42fa76c-13d7-45cb-bcdc-352af6095755",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"culture_fit\" : [\n        {\n            \"culture_fit_id\": 5,\n            \"score\": 1\n        },\n        {\n            \"culture_fit_id\": 7,\n            \"score\": 2\n        },\n        {\n            \"culture_fit_id\": 12,\n            \"score\": 3\n        }\n    ]\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{borderless_service_url}}/api/v1/businesses/employer-profile/culture-fit"
					},
					"response": []
				}
			],
			"_postman_id": "95d90461-e100-4b64-b916-519558d0004e"
		},
		{
			"name": "Jobs",
			"item": [],
			"_postman_id": "6c122325-e562-456d-8747-cb6fa504d149"
		},
		{
			"name": "Signup",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var value = pm.environment.get(\"id\");\r",
							"\r",
							"pm.environment.set(\"id\", value+1);\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set('businessid',jsonData.data.business.id)\r",
							"pm.environment.set('businessname',jsonData.data.business.name)\r",
							"pm.environment.set('userid',jsonData.data.user.id)\r",
							"pm.environment.set('username',jsonData.data.user.name)\r",
							"pm.environment.set('useremail',jsonData.data.user.email)\r",
							"pm.environment.set('userrole',jsonData.data.user.role)\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Business profile\", function () {\r",
							"    pm.expect(jsonData.data.business.id).to.eql(pm.environment.get(\"businessid\"));\r",
							"    pm.expect(jsonData.data.business.name).to.eql(pm.environment.get(\"businessname\"));\r",
							"    pm.expect(jsonData.data.user.id).to.eql(pm.environment.get(\"userid\"));\r",
							"    pm.expect(jsonData.data.user.name).to.eql(pm.environment.get(\"username\"));\r",
							"    pm.expect(jsonData.data.user.email).to.eql(pm.environment.get(\"useremail\"));\r",
							"    pm.expect(jsonData.data.user.role).to.eql(pm.environment.get(\"userrole\"));\r",
							"});"
						],
						"id": "be9b1d62-9d6b-4d25-bc69-1d3b78f31705"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var value = pm.environment.get(\"id\");\r",
							"\r",
							"if( !value) {\r",
							"    pm.environment.set(\"id\", 1);\r",
							"}"
						],
						"id": "7d815b5c-74c3-4b53-a42e-4a843569bf7a"
					}
				}
			],
			"_postman_id": "2cc24e5d-2bf9-461c-90e1-761138788e97",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"company_name\": \"Back&Front Technologies\",\r\n    \"company_website\": \"https://backandfront.com.ng\",\r\n    \"company_country_id\": \"NG\",\r\n    \"company_address\": \"Lagos, Nigeria\",\r\n    \"company_industry_id\": 6,\r\n    \"company_size_id\": 1,\r\n    \"company_state_id\" : 250,\r\n    \"role_id\" : 7,\r\n    \"first_name\": \"Back\",\r\n    \"last_name\": \"Front\",\r\n    \"email\": \"www9{{id}}@backandfront.com.ng\",\r\n    \"phone\": \"2349098861745\",\r\n    \"password\": \"www9{{id}}@backandfront.com.ng\",\r\n    \"password_confirmation\": \"www9{{id}}@backandfront.com.ng\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{borderless_service_url}}/api/v1/businesses"
			},
			"response": []
		},
		{
			"name": "Dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set('statsposted',jsonData.data.stats.posted)\r",
							"pm.environment.set('statsshortlisted',jsonData.data.stats.Shortlisted)\r",
							"pm.environment.set('statshired',jsonData.data.stats.Hired)\r",
							"pm.environment.set('vstatsid',jsonData.data.vacancy_stats[0].id)\r",
							"\r",
							"pm.environment.set('vstatstitle',jsonData.data.vacancy_stats[0].title)\r",
							"pm.environment.set('vstatsshortlisted',jsonData.data.vacancy_stats[0].Shortlisted)\r",
							"pm.environment.set('vstatshired',jsonData.data.vacancy_stats[0].Hired)\r",
							"\r",
							"pm.environment.set('vstatsid1',jsonData.data.vacancy_stats[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20].id)\r",
							"\r",
							"pm.environment.set('vstatstitle1',jsonData.data.vacancy_stats[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20].title)\r",
							"pm.environment.set('vstatsshortlisted1',jsonData.data.vacancy_stats[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20].Shortlisted)\r",
							"pm.environment.set('vstatshired1',jsonData.data.vacancy_stats[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20].Hired)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Dashboard Stats\", function () {\r",
							"    pm.expect(jsonData.data.stats.posted).to.eql(pm.environment.get(\"statsposted\"));\r",
							"    pm.expect(jsonData.data.stats.Shortlisted).to.eql(pm.environment.get(\"statsshortlisted\"));\r",
							"    pm.expect(jsonData.data.stats.Hired).to.eql(pm.environment.get(\"statshired\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Dashboard Vacancy Stats\", function () {\r",
							"    pm.expect(jsonData.data.vacancy_stats[0].id).to.eql(pm.environment.get(\"vstatsid\"));\r",
							"    pm.expect(jsonData.data.vacancy_stats[0].title).to.eql(pm.environment.get(\"vstatstitle\"));\r",
							"    pm.expect(jsonData.data.vacancy_stats[0].Shortlisted).to.eql(pm.environment.get(\"vstatsshortlisted\"));\r",
							"    pm.expect(jsonData.data.vacancy_stats[0].Hired).to.eql(pm.environment.get(\"vstatshired\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Dashboard Vacancy Stats 1\", function () {\r",
							"    pm.expect(jsonData.data.vacancy_stats[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20].id).to.eql(pm.environment.get(\"vstatsid1\"));\r",
							"    pm.expect(jsonData.data.vacancy_stats[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20].title).to.eql(pm.environment.get(\"vstatstitle1\"));\r",
							"    pm.expect(jsonData.data.vacancy_stats[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20].Shortlisted).to.eql(pm.environment.get(\"vstatsshortlisted1\"));\r",
							"    pm.expect(jsonData.data.vacancy_stats[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20].Hired).to.eql(pm.environment.get(\"vstatshired1\"));\r",
							"});"
						],
						"id": "318d813a-be24-47a8-ac87-246a502decfb"
					}
				}
			],
			"_postman_id": "c65b3901-d548-4bcc-b94d-bc4a6725b2a1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{borderless_service_url}}/api/v1/businesses/dashboard"
			},
			"response": []
		},
		{
			"name": "Update Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Update Password\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.eql(\"Password Updated!\");\r",
							"   });"
						],
						"id": "d58c915e-9129-44fa-8192-f9fe3ccf0240"
					}
				}
			],
			"_postman_id": "d0521210-8ca4-4d76-b77d-52a908d1e361",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{business_access_token}}"
					}
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"current_password\": \"habernathy@huel.com\",\r\n    \"password\": \"habernathy@huel.com\",\r\n    \"password_confirmation\": \"habernathy@huel.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{borderless_service_url}}/api/v1/businesses/password"
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{business_access_token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b7bac102-c361-4d01-96d4-6d51ea9f18b0",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d9bfa2f5-2308-4c94-9fa2-85e35dcf41bc",
				"type": "text/javascript",
				"exec": [
					"const responseJson = pm.response.json();",
					"",
					"",
					"pm.test(\"The get the success info\", function () {",
					"    var jsonData = pm.response.json();",
					"    pm.expect(jsonData.success).to.be.oneOf([true,false]);",
					"});"
				]
			}
		}
	]
}